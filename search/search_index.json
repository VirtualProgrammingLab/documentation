{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the ViPLab Documentation Virtual Programming Laboratory (ViPLab) The virtual programming lab ViPLab is a browser-based programming environment. It can be used in ILIAS which enables the execution of programming tasks in online tests. In combination with a management system for research data, like DaRUS , scientists can publicize their code together with their results, for others to try out and take a look at. Structure The documentation contains five main parts: ViPLab Admin Guide ViPLab User Guide ViPLab Developer Guide Architectural Decision Logs Project History Features Support of the following Programming Languages: C ... Execute Docker-Containers ... Displaying the following File-Types in the Result: VTU & VTK JSON CSV PNG JPEG ViPLab Graphics Formats Specify whether a certain File-Type should be displayed in the Result Configure Parameters using GUI-Elements, like Checkboxes Radio Buttons Toggle Buttons Sliders Input Fields Dropdowns Editors Show Two-Column-View or One-Column-View (Minimize / Maximize) Download and Upload Backups","title":"Welcome to the ViPLab Documentation"},{"location":"#welcome-to-the-viplab-documentation","text":"Virtual Programming Laboratory (ViPLab) The virtual programming lab ViPLab is a browser-based programming environment. It can be used in ILIAS which enables the execution of programming tasks in online tests. In combination with a management system for research data, like DaRUS , scientists can publicize their code together with their results, for others to try out and take a look at.","title":"Welcome to the ViPLab Documentation"},{"location":"#structure","text":"The documentation contains five main parts: ViPLab Admin Guide ViPLab User Guide ViPLab Developer Guide Architectural Decision Logs Project History","title":"Structure"},{"location":"#features","text":"Support of the following Programming Languages: C ... Execute Docker-Containers ... Displaying the following File-Types in the Result: VTU & VTK JSON CSV PNG JPEG ViPLab Graphics Formats Specify whether a certain File-Type should be displayed in the Result Configure Parameters using GUI-Elements, like Checkboxes Radio Buttons Toggle Buttons Sliders Input Fields Dropdowns Editors Show Two-Column-View or One-Column-View (Minimize / Maximize) Download and Upload Backups","title":"Features"},{"location":"admin/","text":"Admin Guide In the Admin Guide you can find Information about: Architecture Docker Interface to Websocket API Integration Setup","title":"Admin Guide"},{"location":"admin/#admin-guide","text":"In the Admin Guide you can find Information about: Architecture Docker Interface to Websocket API Integration Setup","title":"Admin Guide"},{"location":"admin/architecture/","text":"Architecture General Architecture ViPLab Architecture: General Overview Components Frontend The ViPLab Frontend is a browser-based web application. It was developed using the JavaScript Framework Vue.js. The user can enter his/her input using the graphical interface. If the user sends the input, a JSON message is generated and sent to the Websocket API. An overview with descriptions of the Frontend can be found here: ViPLab Frontend . The Repository containing the Code is published on GitHub . Websocket API The Websocket-Api can be used by the clients to interact with ViPLab. For this it is necessary that th clients authenticate and autorize themselves using JSON Web Tokens (JWTs). Following this process, messages can be exchanged, to start a computation using ViPLab. To enable the computation, all necessary information has to be part of the Websocket message. The messages sent are JSON messages, which are partly described in the Developer Guide . Once the result was computed, the client is informed. Additionally there is a Database, which is used to save Computations and their results. But it is no durable location for saving user data. The Backends have no access to this DB, so all relevant information has to be sent to the Backends using the Middleware. The Repository containing the code of the Websocket API can be found on Git and is written in Java. Middleware As Middleware Apache ActiveMQ is used. To be more precise ActiveMQ Artemis . Apache ActiveMQ Artemis enables asynchronous messaging between the Websocket API and the Backend and thus also asynchonous processing in the Backend(s). Backend The ViPLab Backend is based on Python. It is used to evaluate the input made using the Frontend. For this the specified Docker-Container is executed. Alternatively, the code is executed inside a previously defined Container, e.g. C-Code is executed inside a Container that can run C-Code. After that, the result is reported back to the client via ActiveMQ and the Websocket API. The code can be found here .","title":"Architecture"},{"location":"admin/architecture/#architecture","text":"","title":"Architecture"},{"location":"admin/architecture/#general-architecture","text":"ViPLab Architecture: General Overview","title":"General Architecture"},{"location":"admin/architecture/#components","text":"","title":"Components"},{"location":"admin/architecture/#frontend","text":"The ViPLab Frontend is a browser-based web application. It was developed using the JavaScript Framework Vue.js. The user can enter his/her input using the graphical interface. If the user sends the input, a JSON message is generated and sent to the Websocket API. An overview with descriptions of the Frontend can be found here: ViPLab Frontend . The Repository containing the Code is published on GitHub .","title":"Frontend"},{"location":"admin/architecture/#websocket-api","text":"The Websocket-Api can be used by the clients to interact with ViPLab. For this it is necessary that th clients authenticate and autorize themselves using JSON Web Tokens (JWTs). Following this process, messages can be exchanged, to start a computation using ViPLab. To enable the computation, all necessary information has to be part of the Websocket message. The messages sent are JSON messages, which are partly described in the Developer Guide . Once the result was computed, the client is informed. Additionally there is a Database, which is used to save Computations and their results. But it is no durable location for saving user data. The Backends have no access to this DB, so all relevant information has to be sent to the Backends using the Middleware. The Repository containing the code of the Websocket API can be found on Git and is written in Java.","title":"Websocket API"},{"location":"admin/architecture/#middleware","text":"As Middleware Apache ActiveMQ is used. To be more precise ActiveMQ Artemis . Apache ActiveMQ Artemis enables asynchronous messaging between the Websocket API and the Backend and thus also asynchonous processing in the Backend(s).","title":"Middleware"},{"location":"admin/architecture/#backend","text":"The ViPLab Backend is based on Python. It is used to evaluate the input made using the Frontend. For this the specified Docker-Container is executed. Alternatively, the code is executed inside a previously defined Container, e.g. C-Code is executed inside a Container that can run C-Code. After that, the result is reported back to the client via ActiveMQ and the Websocket API. The code can be found here .","title":"Backend"},{"location":"admin/docker/","text":"Docker","title":"Docker"},{"location":"admin/docker/#docker","text":"","title":"Docker"},{"location":"admin/integration/","text":"Integration Here you can find different possibilities to integrate ViPlab. You can take a look at these examples and either use them or create your own integration. More will be added in the future... Integration into ILIAS ViPLab Architecture: ILIAS Plugin Additional Components ILIAS Plugin TODO Should the ILIAS Plugin be described, too? Error Correct Link: ILIAS Plugin Correction Server The Correction Server is responsible for the correction of exercises. Click here to find the code and more information. Integration into a Research Management Software (like DaRUS) ViPLab Architecture: Integration into DaRUS Additional Components DaRUS-ViPLab Extension: ViPLab-Connector - Integration into DaRUS Landingpage out of DaRUS. It communicates with the Websocket API and starts the Frontend. Error Correct Link: Integration of ViPLab into DaRUS","title":"Integration"},{"location":"admin/integration/#integration","text":"Here you can find different possibilities to integrate ViPlab. You can take a look at these examples and either use them or create your own integration. More will be added in the future...","title":"Integration"},{"location":"admin/integration/#integration-into-ilias","text":"ViPLab Architecture: ILIAS Plugin","title":"Integration into ILIAS"},{"location":"admin/integration/#additional-components","text":"","title":"Additional Components"},{"location":"admin/integration/#ilias-plugin","text":"TODO Should the ILIAS Plugin be described, too? Error Correct Link: ILIAS Plugin","title":"ILIAS Plugin"},{"location":"admin/integration/#correction-server","text":"The Correction Server is responsible for the correction of exercises. Click here to find the code and more information.","title":"Correction Server"},{"location":"admin/integration/#integration-into-a-research-management-software-like-darus","text":"ViPLab Architecture: Integration into DaRUS","title":"Integration into a Research Management Software (like DaRUS)"},{"location":"admin/integration/#additional-components_1","text":"","title":"Additional Components"},{"location":"admin/integration/#darus-viplab-extension-viplab-connector-integration-into-darus","text":"Landingpage out of DaRUS. It communicates with the Websocket API and starts the Frontend. Error Correct Link: Integration of ViPLab into DaRUS","title":"DaRUS-ViPLab Extension: ViPLab-Connector - Integration into DaRUS"},{"location":"admin/interface/","text":"Interface to Websocket API The Repository containing the code of the Websocket API can be found on Git . The Websocket API is based on JSON messages. Those messages are sent between the browser and the server. Each of the messages has a type and a content, whereby the type determines how the content of the message is processed. JSON Message { \"$schema\" : \"http://json-schema.org/draft-07/schema\" , \"$id\" : \"message-schema.json\" , \"title\" : \"Message\" , \"description\" : \"Message format of the ViPLab Websocket API\" , \"type\" : \"object\" , \"properties\" : { \"type\" : { \"type\" : \"string\" , \"description\" : \"The type of the message\" }, \"content\" : { \"type\" : \"object\" , \"description\" : \"The content of the message\" } }, \"required\" : [ \"type\" , \"content\" ] } Message Types Messages from Browser to Server authenticate After establishing a WebSocket connection, authentication takes place. Therefore the first message sent ist the authenticate message. This message contains authentication tokens in terms of JWTs, that are provided to the browser by an external service. authenticate Message Example { \"type\" : \"authenticate\" , \"content\" : { \"jwt\" : \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\" } } create-computation Message to create a new Computation from a Computation Template and a Computation Task . This Computation is sent back to the browser using a computation message create-computation Message Example { \"type\" : \"create-computation\" , \"content\" : { \"template\" : \"eyJpZGVudGlmaWVyIjoiMTE0ODNmMjMtOTViZi00MjRhLTk4YTUtZWU1ODY4Yzg1YzNmIiw...\" , \"task\" : { \"template\" : \"11483f23-95bf-424a-98a5-ee5868c85c3f\" , \"identifier\" : \"b547d5f0-9346-05c6-6bdd-8e32e50abc96\" , \"files\" : [ { \"identifier\" : \"22483f42-95bf-984a-98a5-ee9485c85c3f\" , \"parts\" : [ { \"identifier\" : \"f3fc4404-3529-4962-b252-47bc4ddd02a1\" , \"content\" : \"eyJfX3NsaWRlclNpbmdsZV9fIjoiNzUifQ\" }, { \"identifier\" : \"ceb051d8-b50c-4814-983a-b9d703cae0c6\" , \"content\" : \"eyJfX2NoZWNrYm94X18iOiJwcm9ncmFtbWluZyIsIl9fcmFkaW9CdXR0b25fXyI6IkphdmEiLCJfX2Ryb3Bkb3duU2luZ2xlX18iOiJuZXZlciIsIl9fZHJvcGRvd25NdWx0aXBsZV9fIjoiTGFzdCBDaHJpc3RtYXMiLCJfX3RvZ2dsZV9fIjoiU3BpZGVycyIsIl9fc2xpZGVyTXVsdGlwbGVfXyI6IjI1LDUwLDc1IiwiX19pbnB1dFRleHRXT01heGxlbmd0aF9fIjoiYmFzZTY0OmF3IiwiX19pbnB1dFRleHRXTWF4bGVuZ3RoX18iOiJiYXNlNjQ6ZHciLCJfX2lucHV0TnVtYmVyX18iOiIyNSJ9\" } ] }, { \"identifier\" : \"22483f42-95bf-984a-98a5-ee9485c85c31\" , \"parts\" : [ { \"identifier\" : \"f3fc4404-3529-4962-b252-47bc4ddd02a2\" , \"content\" : \"eyJfX2RlZmF1bHRfXyI6ImJhc2U2NDphVzUwSUcxaGFXNG9hVzUwSUdGeVoyTXNJR05vWVhJZ0tpcGhjbWQyS1NCN0lBMEtMeThnVUhKcGJuUWdKMGhsYkd4dklGZHZjbXhrSnlBTkNuMCJ9\" }, ] } ] } } } prepare-computation Message to inform the backend about the computation that is currently worked on. The backend can then prepare for running the computation. For example, if the value for environment in the computation template is docker , the backend can prepare by already pulling the respective docker image. This message is identical to the create-computation message above, apart from the message type. After preparation, an information is sent back to the browser using a prepared-computation message . The goal of this message for the future is, that the template ultimately only has to be sent once. For this, the 'prepare-computation-id' is used, that is returned by the prepared-computation message . prepare-computation Message Example { \"type\" : \"prepare-computation\" , \"content\" : { \"template\" : \"eyJpZGVudGlmaWVyIjoiMTE0ODNmMjMtOTViZi00MjRhLTk4YTUtZWU1ODY4Yzg1YzNmIiw...\" , \"task\" : { \"template\" : \"11483f23-95bf-424a-98a5-ee5868c85c3f\" , \"identifier\" : \"b547d5f0-9346-05c6-6bdd-8e32e50abc96\" , \"files\" : [ ... ] } } } subscribe Using this message, one can subscribe to different events. For subscribing to an event, the respective event needs to be passed in the message content as string in the topic property. The string is separated by a colon. The message is idempotent, thus you can only subscribe to an event once per WebSocket session. No response is sent back from the server to confirm the subscription. Event Description computation:{id} All events about one computation subscribe Message Example { \"type\" : \"subscribe\" , \"content\" : { \"topic\" : \"computation:b30fca08-7267-4aa9-adc7-8c89f5efd928\" } } Messages from Server to Browser computation This message is used to send a Computation back to the browser. computation Message Example { \"type\" : \"computation\" , \"content\" : { \"id\" : \"20f32dc9-e43f-4a65-af8c-42412ed9d977\" , \"created\" : \"2019-08-19T13:31:30+0200\" , \"expires\" : \"2019-08-19T16:31:30+0200\" , \"status\" : \"created\" } } prepared-computation This message is used to signal, that preparation of the backend was successful. The id that is returned is a prepare-computation-id. prepared-computation Message Example { \"type\" : \"prepared-computation\" , \"content\" : { \"id\" : \"20f32dc9-e43f-4a65-af8c-42412ed9d977\" , \"created\" : \"2019-08-19T13:31:30+0200\" , \"expires\" : \"2019-08-19T16:31:30+0200\" , \"status\" : \"prepared\" } }","title":"Interface to Websocket API"},{"location":"admin/interface/#interface-to-websocket-api","text":"The Repository containing the code of the Websocket API can be found on Git . The Websocket API is based on JSON messages. Those messages are sent between the browser and the server. Each of the messages has a type and a content, whereby the type determines how the content of the message is processed. JSON Message { \"$schema\" : \"http://json-schema.org/draft-07/schema\" , \"$id\" : \"message-schema.json\" , \"title\" : \"Message\" , \"description\" : \"Message format of the ViPLab Websocket API\" , \"type\" : \"object\" , \"properties\" : { \"type\" : { \"type\" : \"string\" , \"description\" : \"The type of the message\" }, \"content\" : { \"type\" : \"object\" , \"description\" : \"The content of the message\" } }, \"required\" : [ \"type\" , \"content\" ] }","title":"Interface to Websocket API"},{"location":"admin/interface/#message-types","text":"","title":"Message Types"},{"location":"admin/interface/#messages-from-browser-to-server","text":"","title":"Messages from Browser to Server"},{"location":"admin/interface/#authenticate","text":"After establishing a WebSocket connection, authentication takes place. Therefore the first message sent ist the authenticate message. This message contains authentication tokens in terms of JWTs, that are provided to the browser by an external service. authenticate Message Example { \"type\" : \"authenticate\" , \"content\" : { \"jwt\" : \"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.SflKxwRJSMeKKF2QT4fwpMeJf36POk6yJV_adQssw5c\" } }","title":"authenticate"},{"location":"admin/interface/#create-computation","text":"Message to create a new Computation from a Computation Template and a Computation Task . This Computation is sent back to the browser using a computation message create-computation Message Example { \"type\" : \"create-computation\" , \"content\" : { \"template\" : \"eyJpZGVudGlmaWVyIjoiMTE0ODNmMjMtOTViZi00MjRhLTk4YTUtZWU1ODY4Yzg1YzNmIiw...\" , \"task\" : { \"template\" : \"11483f23-95bf-424a-98a5-ee5868c85c3f\" , \"identifier\" : \"b547d5f0-9346-05c6-6bdd-8e32e50abc96\" , \"files\" : [ { \"identifier\" : \"22483f42-95bf-984a-98a5-ee9485c85c3f\" , \"parts\" : [ { \"identifier\" : \"f3fc4404-3529-4962-b252-47bc4ddd02a1\" , \"content\" : \"eyJfX3NsaWRlclNpbmdsZV9fIjoiNzUifQ\" }, { \"identifier\" : \"ceb051d8-b50c-4814-983a-b9d703cae0c6\" , \"content\" : \"eyJfX2NoZWNrYm94X18iOiJwcm9ncmFtbWluZyIsIl9fcmFkaW9CdXR0b25fXyI6IkphdmEiLCJfX2Ryb3Bkb3duU2luZ2xlX18iOiJuZXZlciIsIl9fZHJvcGRvd25NdWx0aXBsZV9fIjoiTGFzdCBDaHJpc3RtYXMiLCJfX3RvZ2dsZV9fIjoiU3BpZGVycyIsIl9fc2xpZGVyTXVsdGlwbGVfXyI6IjI1LDUwLDc1IiwiX19pbnB1dFRleHRXT01heGxlbmd0aF9fIjoiYmFzZTY0OmF3IiwiX19pbnB1dFRleHRXTWF4bGVuZ3RoX18iOiJiYXNlNjQ6ZHciLCJfX2lucHV0TnVtYmVyX18iOiIyNSJ9\" } ] }, { \"identifier\" : \"22483f42-95bf-984a-98a5-ee9485c85c31\" , \"parts\" : [ { \"identifier\" : \"f3fc4404-3529-4962-b252-47bc4ddd02a2\" , \"content\" : \"eyJfX2RlZmF1bHRfXyI6ImJhc2U2NDphVzUwSUcxaGFXNG9hVzUwSUdGeVoyTXNJR05vWVhJZ0tpcGhjbWQyS1NCN0lBMEtMeThnVUhKcGJuUWdKMGhsYkd4dklGZHZjbXhrSnlBTkNuMCJ9\" }, ] } ] } } }","title":"create-computation"},{"location":"admin/interface/#prepare-computation","text":"Message to inform the backend about the computation that is currently worked on. The backend can then prepare for running the computation. For example, if the value for environment in the computation template is docker , the backend can prepare by already pulling the respective docker image. This message is identical to the create-computation message above, apart from the message type. After preparation, an information is sent back to the browser using a prepared-computation message . The goal of this message for the future is, that the template ultimately only has to be sent once. For this, the 'prepare-computation-id' is used, that is returned by the prepared-computation message . prepare-computation Message Example { \"type\" : \"prepare-computation\" , \"content\" : { \"template\" : \"eyJpZGVudGlmaWVyIjoiMTE0ODNmMjMtOTViZi00MjRhLTk4YTUtZWU1ODY4Yzg1YzNmIiw...\" , \"task\" : { \"template\" : \"11483f23-95bf-424a-98a5-ee5868c85c3f\" , \"identifier\" : \"b547d5f0-9346-05c6-6bdd-8e32e50abc96\" , \"files\" : [ ... ] } } }","title":"prepare-computation"},{"location":"admin/interface/#subscribe","text":"Using this message, one can subscribe to different events. For subscribing to an event, the respective event needs to be passed in the message content as string in the topic property. The string is separated by a colon. The message is idempotent, thus you can only subscribe to an event once per WebSocket session. No response is sent back from the server to confirm the subscription. Event Description computation:{id} All events about one computation subscribe Message Example { \"type\" : \"subscribe\" , \"content\" : { \"topic\" : \"computation:b30fca08-7267-4aa9-adc7-8c89f5efd928\" } }","title":"subscribe"},{"location":"admin/interface/#messages-from-server-to-browser","text":"","title":"Messages from Server to Browser"},{"location":"admin/interface/#computation","text":"This message is used to send a Computation back to the browser. computation Message Example { \"type\" : \"computation\" , \"content\" : { \"id\" : \"20f32dc9-e43f-4a65-af8c-42412ed9d977\" , \"created\" : \"2019-08-19T13:31:30+0200\" , \"expires\" : \"2019-08-19T16:31:30+0200\" , \"status\" : \"created\" } }","title":"computation"},{"location":"admin/interface/#prepared-computation","text":"This message is used to signal, that preparation of the backend was successful. The id that is returned is a prepare-computation-id. prepared-computation Message Example { \"type\" : \"prepared-computation\" , \"content\" : { \"id\" : \"20f32dc9-e43f-4a65-af8c-42412ed9d977\" , \"created\" : \"2019-08-19T13:31:30+0200\" , \"expires\" : \"2019-08-19T16:31:30+0200\" , \"status\" : \"prepared\" } }","title":"prepared-computation"},{"location":"admin/setup/","text":"Setup of ViPLab Frontend There are multiple ways to setup the Frontend. If you want to set it up... ... in ILIAS: Follow the link specified in the section about the Integration into ILIAS ... in DaRUS: Follow the link specified in the section about the Integration into DaRUS ... in a System of your choice: Take a look at the Git-Repository of the Frontend to find an overview on what you need to use it Websocket API To set up the Websocket API for getting an interactive session with the ViPLab Service, follow the instructions found in the README of the viplab-websocket-api Git-Repository. Apache ActiveMQ Artemis Information on how to set up Artemis, can be found in the Docs . TODO Anleitung zur Einrichtung von ActiveMQ? Backends To find all the requirements to run the ViPLab Backend and start it, follow the following link and carry out the given instructions.","title":"Setup"},{"location":"admin/setup/#setup-of-viplab","text":"","title":"Setup of ViPLab"},{"location":"admin/setup/#frontend","text":"There are multiple ways to setup the Frontend. If you want to set it up... ... in ILIAS: Follow the link specified in the section about the Integration into ILIAS ... in DaRUS: Follow the link specified in the section about the Integration into DaRUS ... in a System of your choice: Take a look at the Git-Repository of the Frontend to find an overview on what you need to use it","title":"Frontend"},{"location":"admin/setup/#websocket-api","text":"To set up the Websocket API for getting an interactive session with the ViPLab Service, follow the instructions found in the README of the viplab-websocket-api Git-Repository.","title":"Websocket API"},{"location":"admin/setup/#apache-activemq-artemis","text":"Information on how to set up Artemis, can be found in the Docs . TODO Anleitung zur Einrichtung von ActiveMQ?","title":"Apache ActiveMQ Artemis"},{"location":"admin/setup/#backends","text":"To find all the requirements to run the ViPLab Backend and start it, follow the following link and carry out the given instructions.","title":"Backends"},{"location":"adr/","text":"Architectural Decision Log This log lists the architectural decisions for ViPLab. ADR-0000 - Use Markdown Architectural Decision Records ADR-0001 - Use JSON Web Tokens ADR-0002 - Use SHA256 and Base64Url encoding for verifying json ADR-0003 - Transfer hash in JWT Claim ADR-0004 - Use Asymmetric JWT Singning Versioning - Versioning For new ADRs, please use template.md as basis. More information on MADR is available at https://adr.github.io/madr/ . General information about architectural decision records is available at https://adr.github.io/ .","title":"Architectural Decision Log"},{"location":"adr/#architectural-decision-log","text":"This log lists the architectural decisions for ViPLab. ADR-0000 - Use Markdown Architectural Decision Records ADR-0001 - Use JSON Web Tokens ADR-0002 - Use SHA256 and Base64Url encoding for verifying json ADR-0003 - Transfer hash in JWT Claim ADR-0004 - Use Asymmetric JWT Singning Versioning - Versioning For new ADRs, please use template.md as basis. More information on MADR is available at https://adr.github.io/madr/ . General information about architectural decision records is available at https://adr.github.io/ .","title":"Architectural Decision Log"},{"location":"adr/0000-use-markdown-architectural-decision-records/","text":"Use Markdown Architectural Decision Records Context and Problem Statement We want to record architectural decisions made in this project. Which format and structure should these records follow? Considered Options MADR 2.1.2 \u2013 The Markdown Architectural Decision Records Michael Nygard's template \u2013 The first incarnation of the term \"ADR\" Sustainable Architectural Decisions \u2013 The Y-Statements Other templates listed at https://github.com/joelparkerhenderson/architecture_decision_record Formless \u2013 No conventions for file format and structure Decision Outcome Chosen option: \"MADR 2.1.2\", because Implicit assumptions should be made explicit. Design documentation is important to enable people understanding the decisions later on. See also A rational design process: How and why to fake it . The MADR format is lean and fits our development style. The MADR structure is comprehensible and facilitates usage & maintenance. The MADR project is vivid. Version 2.1.2 is the latest one available when starting to document ADRs.","title":"ADR-0000"},{"location":"adr/0000-use-markdown-architectural-decision-records/#use-markdown-architectural-decision-records","text":"","title":"Use Markdown Architectural Decision Records"},{"location":"adr/0000-use-markdown-architectural-decision-records/#context-and-problem-statement","text":"We want to record architectural decisions made in this project. Which format and structure should these records follow?","title":"Context and Problem Statement"},{"location":"adr/0000-use-markdown-architectural-decision-records/#considered-options","text":"MADR 2.1.2 \u2013 The Markdown Architectural Decision Records Michael Nygard's template \u2013 The first incarnation of the term \"ADR\" Sustainable Architectural Decisions \u2013 The Y-Statements Other templates listed at https://github.com/joelparkerhenderson/architecture_decision_record Formless \u2013 No conventions for file format and structure","title":"Considered Options"},{"location":"adr/0000-use-markdown-architectural-decision-records/#decision-outcome","text":"Chosen option: \"MADR 2.1.2\", because Implicit assumptions should be made explicit. Design documentation is important to enable people understanding the decisions later on. See also A rational design process: How and why to fake it . The MADR format is lean and fits our development style. The MADR structure is comprehensible and facilitates usage & maintenance. The MADR project is vivid. Version 2.1.2 is the latest one available when starting to document ADRs.","title":"Decision Outcome"},{"location":"adr/0001-use-json-web-tokens/","text":"Use JSON Web Tokens Status: accepted Deciders: Leon Kiefer, Per Pascal Seeland, Anett Seeland Date: 2019-11-07 Context and Problem Statement External services must authorize web clients to the WebSocket API. The WebSocket API is stateless and not maintain a user Session with Cookies. Only little data should be stored for an open WebSocket connection. Decision Drivers decoupling of the authorization service and the WebSocket API flexible and well supported on many platforms Considered Options JWT from pre-shared keys Basic Auth OAuth 2.0 Decision Outcome Chosen option: \"JWT from pre-shared keys\", because the WebSocket API is loosely coupled and it is well supported on many platforms. Positive Consequences Simple to implement Authorization data can be send in a portable and verifiable way Negative Consequences The shared keys must be handled Pros and Cons of the Options JWT from pre-shared keys External service and WebSocket API have a pre-shared key (this does not mean it's a symmetric key). Each external service has it's own pre-shared key to identify it. The external services uses the pre-shared key to generate JWTs and add authorization data in the JWT Claims to allow clients access to parts of the WebSocket API. Good, because it is simple to implement Good, because many libraries available for almost all platforms Good, because authorization data can be included in the JWT Bad, because the pre-shared keys must be handled by the services Basic Auth The client uses credentials like username and password to authenticate to the WebSocket API. The WebSocket API manages the access control for clients and the external service can give clients the access. Good, because authorization is done only on the server side Bad, because user management must be implemented in the WebSocket API Bad, because access control must be implemented in the WebSocket API Bad, because each client need own credentials OAuth 2.0 Similar to Basic Auth but the authorization is done using OAuth 2.0. Good, because integration of OAuth 2.0 Service Bad, because an OAuth 2.0 is required and must be configured for the correct access control Bad, because user management must be implemented in OAuth 2.0 Service","title":"ADR-0001"},{"location":"adr/0001-use-json-web-tokens/#use-json-web-tokens","text":"Status: accepted Deciders: Leon Kiefer, Per Pascal Seeland, Anett Seeland Date: 2019-11-07","title":"Use JSON Web Tokens"},{"location":"adr/0001-use-json-web-tokens/#context-and-problem-statement","text":"External services must authorize web clients to the WebSocket API. The WebSocket API is stateless and not maintain a user Session with Cookies. Only little data should be stored for an open WebSocket connection.","title":"Context and Problem Statement"},{"location":"adr/0001-use-json-web-tokens/#decision-drivers","text":"decoupling of the authorization service and the WebSocket API flexible and well supported on many platforms","title":"Decision Drivers"},{"location":"adr/0001-use-json-web-tokens/#considered-options","text":"JWT from pre-shared keys Basic Auth OAuth 2.0","title":"Considered Options"},{"location":"adr/0001-use-json-web-tokens/#decision-outcome","text":"Chosen option: \"JWT from pre-shared keys\", because the WebSocket API is loosely coupled and it is well supported on many platforms.","title":"Decision Outcome"},{"location":"adr/0001-use-json-web-tokens/#positive-consequences","text":"Simple to implement Authorization data can be send in a portable and verifiable way","title":"Positive Consequences"},{"location":"adr/0001-use-json-web-tokens/#negative-consequences","text":"The shared keys must be handled","title":"Negative Consequences"},{"location":"adr/0001-use-json-web-tokens/#pros-and-cons-of-the-options","text":"","title":"Pros and Cons of the Options"},{"location":"adr/0001-use-json-web-tokens/#jwt-from-pre-shared-keys","text":"External service and WebSocket API have a pre-shared key (this does not mean it's a symmetric key). Each external service has it's own pre-shared key to identify it. The external services uses the pre-shared key to generate JWTs and add authorization data in the JWT Claims to allow clients access to parts of the WebSocket API. Good, because it is simple to implement Good, because many libraries available for almost all platforms Good, because authorization data can be included in the JWT Bad, because the pre-shared keys must be handled by the services","title":"JWT from pre-shared keys"},{"location":"adr/0001-use-json-web-tokens/#basic-auth","text":"The client uses credentials like username and password to authenticate to the WebSocket API. The WebSocket API manages the access control for clients and the external service can give clients the access. Good, because authorization is done only on the server side Bad, because user management must be implemented in the WebSocket API Bad, because access control must be implemented in the WebSocket API Bad, because each client need own credentials","title":"Basic Auth"},{"location":"adr/0001-use-json-web-tokens/#oauth-20","text":"Similar to Basic Auth but the authorization is done using OAuth 2.0. Good, because integration of OAuth 2.0 Service Bad, because an OAuth 2.0 is required and must be configured for the correct access control Bad, because user management must be implemented in OAuth 2.0 Service","title":"OAuth 2.0"},{"location":"adr/0002-use-sha256-with-base64url-encoding/","text":"Use SHA256 and Base64Url encoding for verifying json Status: proposed Deciders: Leon Kiefer Date: 2019-12-13 Context and Problem Statement We have to transfer json data and verify the integrity of the data. The transfer involves an Authorization server which provides the json, a client which gets the data form that server and pass it to the WebSocket API. The WebSocket API must able to verify the integrity of the json data. Decision Drivers Use standard encodings Considered Options Transfer complete json via secure channel Send SHA256 hash of Base64Url encoded json Send SHA256 hash of formatted json Decision Outcome Chosen option: \"Send SHA256 hash of Base64Url encoded json\", because this method is platform independent and not much session state is required. Positive Consequences The JWT really function as a verification token for the other requests. Can be applied to all json data that must be verified. Negative Consequences The json must be transferred in Base64Url encoding Pros and Cons of the Options Transfer complete json via secure channel The complete json data is transferred using a secure channel, like a JWT Token Claim. The secure channel takes care of the Integrity and the transport. Good, because well known solutions can be used. Good, because very secure. Bad, because depending on selected secure channel many data have to be stored in a session state. Bad, because there are limitations how many data can be transferred at once using a secure channel. Send SHA256 hash of Base64Url encoded json The json is encoded with Base64Url encoding (RFC 4648). The Base64 String is then transferred instead of the raw json. For the Base64 string the message digest using SHA256 (FIPS PUB 180-4) is computed and used to verify the integrity. The message digest is a sequence of bytes and should be encoded to a lower-case hex string to transfer it over a secure channel like JWT. Good, because the Integrity of the json can be verified simply. Good, because only the small hex encoded message digest must be transferred over a secure channel. Bad, because the json is transferred Base64 encoded and must be decoded before use. Bad, because this must be implemented by hand. Send SHA256 hash of formatted json The json can be transferred in any format. To verify the integrity, the json is formatted in a way, that the same json info set result in the same json string representation on all platforms. This json string is then hashed using SHA256 (FIPS PUB 180-4) and the message digest can be used the verify the integrity. The message digest is a sequence of bytes and can be Base64Url encoded to transferred it over a secure channel like JWT. Good, because only the small Base64 encoded message digest must be transferred over a secure channel. Good, because json can be be transferred as is. Bad, because difficult to get a consistent formatting across platforms. Bad, because heavily depends on the json formatting library Bad, because this must be implemented by hand. Links ADR-0001 ADR-0003","title":"ADR-0002"},{"location":"adr/0002-use-sha256-with-base64url-encoding/#use-sha256-and-base64url-encoding-for-verifying-json","text":"Status: proposed Deciders: Leon Kiefer Date: 2019-12-13","title":"Use SHA256 and Base64Url encoding for verifying json"},{"location":"adr/0002-use-sha256-with-base64url-encoding/#context-and-problem-statement","text":"We have to transfer json data and verify the integrity of the data. The transfer involves an Authorization server which provides the json, a client which gets the data form that server and pass it to the WebSocket API. The WebSocket API must able to verify the integrity of the json data.","title":"Context and Problem Statement"},{"location":"adr/0002-use-sha256-with-base64url-encoding/#decision-drivers","text":"Use standard encodings","title":"Decision Drivers "},{"location":"adr/0002-use-sha256-with-base64url-encoding/#considered-options","text":"Transfer complete json via secure channel Send SHA256 hash of Base64Url encoded json Send SHA256 hash of formatted json","title":"Considered Options"},{"location":"adr/0002-use-sha256-with-base64url-encoding/#decision-outcome","text":"Chosen option: \"Send SHA256 hash of Base64Url encoded json\", because this method is platform independent and not much session state is required.","title":"Decision Outcome"},{"location":"adr/0002-use-sha256-with-base64url-encoding/#positive-consequences","text":"The JWT really function as a verification token for the other requests. Can be applied to all json data that must be verified.","title":"Positive Consequences "},{"location":"adr/0002-use-sha256-with-base64url-encoding/#negative-consequences","text":"The json must be transferred in Base64Url encoding","title":"Negative Consequences "},{"location":"adr/0002-use-sha256-with-base64url-encoding/#pros-and-cons-of-the-options","text":"","title":"Pros and Cons of the Options "},{"location":"adr/0002-use-sha256-with-base64url-encoding/#transfer-complete-json-via-secure-channel","text":"The complete json data is transferred using a secure channel, like a JWT Token Claim. The secure channel takes care of the Integrity and the transport. Good, because well known solutions can be used. Good, because very secure. Bad, because depending on selected secure channel many data have to be stored in a session state. Bad, because there are limitations how many data can be transferred at once using a secure channel.","title":"Transfer complete json via secure channel"},{"location":"adr/0002-use-sha256-with-base64url-encoding/#send-sha256-hash-of-base64url-encoded-json","text":"The json is encoded with Base64Url encoding (RFC 4648). The Base64 String is then transferred instead of the raw json. For the Base64 string the message digest using SHA256 (FIPS PUB 180-4) is computed and used to verify the integrity. The message digest is a sequence of bytes and should be encoded to a lower-case hex string to transfer it over a secure channel like JWT. Good, because the Integrity of the json can be verified simply. Good, because only the small hex encoded message digest must be transferred over a secure channel. Bad, because the json is transferred Base64 encoded and must be decoded before use. Bad, because this must be implemented by hand.","title":"Send SHA256 hash of Base64Url encoded json"},{"location":"adr/0002-use-sha256-with-base64url-encoding/#send-sha256-hash-of-formatted-json","text":"The json can be transferred in any format. To verify the integrity, the json is formatted in a way, that the same json info set result in the same json string representation on all platforms. This json string is then hashed using SHA256 (FIPS PUB 180-4) and the message digest can be used the verify the integrity. The message digest is a sequence of bytes and can be Base64Url encoded to transferred it over a secure channel like JWT. Good, because only the small Base64 encoded message digest must be transferred over a secure channel. Good, because json can be be transferred as is. Bad, because difficult to get a consistent formatting across platforms. Bad, because heavily depends on the json formatting library Bad, because this must be implemented by hand.","title":"Send SHA256 hash of formatted json"},{"location":"adr/0002-use-sha256-with-base64url-encoding/#links","text":"ADR-0001 ADR-0003","title":"Links "},{"location":"adr/0003-transfere-hash-in-jwt-claim/","text":"Transfer hash in JWT Claim Status: proposed Deciders: Leon Kiefer Date: 2019-11-07 Context and Problem Statement We have to transfer json data and verify the integrity of the json data model. ADR-0002 describes how to create a hash of the json. The hash must be transferred to from the authorization server to the WebSocket API secure. The validity of the hash must be verified. Decision Drivers JWT should be used Considered Options Transfer hash in JWT Claim Decision Outcome Chosen option: \"Transfer hash in JWT Claim\", because it's the only option when using JWT. Positive Consequences multiple hashes for different json documents can be added in one JWT Pros and Cons of the Options Transfer hash in JWT Claim The JWT Claim used to authorize the user to the WebSocket API contains the claims for the json data that should be used. The Claims are key-value pairs were the key should be namespaced and describe the json data type and the value is the hash of the concrete json data. The json data are not included in the JWT only the hash as described by ADR-0002 . Good, because small JWTs Good, because all authorization data in one place Bad, because all json data must be know when creating the JWT Links ADR-0001 ADR-0002","title":"ADR-0003"},{"location":"adr/0003-transfere-hash-in-jwt-claim/#transfer-hash-in-jwt-claim","text":"Status: proposed Deciders: Leon Kiefer Date: 2019-11-07","title":"Transfer hash in JWT Claim"},{"location":"adr/0003-transfere-hash-in-jwt-claim/#context-and-problem-statement","text":"We have to transfer json data and verify the integrity of the json data model. ADR-0002 describes how to create a hash of the json. The hash must be transferred to from the authorization server to the WebSocket API secure. The validity of the hash must be verified.","title":"Context and Problem Statement"},{"location":"adr/0003-transfere-hash-in-jwt-claim/#decision-drivers","text":"JWT should be used","title":"Decision Drivers "},{"location":"adr/0003-transfere-hash-in-jwt-claim/#considered-options","text":"Transfer hash in JWT Claim","title":"Considered Options"},{"location":"adr/0003-transfere-hash-in-jwt-claim/#decision-outcome","text":"Chosen option: \"Transfer hash in JWT Claim\", because it's the only option when using JWT.","title":"Decision Outcome"},{"location":"adr/0003-transfere-hash-in-jwt-claim/#positive-consequences","text":"multiple hashes for different json documents can be added in one JWT","title":"Positive Consequences "},{"location":"adr/0003-transfere-hash-in-jwt-claim/#pros-and-cons-of-the-options","text":"","title":"Pros and Cons of the Options "},{"location":"adr/0003-transfere-hash-in-jwt-claim/#transfer-hash-in-jwt-claim_1","text":"The JWT Claim used to authorize the user to the WebSocket API contains the claims for the json data that should be used. The Claims are key-value pairs were the key should be namespaced and describe the json data type and the value is the hash of the concrete json data. The json data are not included in the JWT only the hash as described by ADR-0002 . Good, because small JWTs Good, because all authorization data in one place Bad, because all json data must be know when creating the JWT","title":"Transfer hash in JWT Claim"},{"location":"adr/0003-transfere-hash-in-jwt-claim/#links","text":"ADR-0001 ADR-0002","title":"Links "},{"location":"adr/0004-use-asymmetric-jwt-signing/","text":"Use asymmetric JWT signing Status: accepted Deciders: Leon Kiefer, Per Pascal Seeland Date: 2020-05-11 Technical Story: https://github.com/VirtualProgrammingLab/viplab-websocket-api/issues/11 Context and Problem Statement When using JSON Web Tokens generating signatures and verifying them is an important task. JWTs can be signed using a secret (with the HMAC algorithm) or a public/private key pair using RSA or ECDSA. When implementing JWTs one must decide which method to use. Decision Drivers Multi tenant support with own keys for each tenant Considered Options Asymmetric JWT signing Symmetric JWT signing Decision Outcome Chosen option: \"Asymmetric JWT signing\", because it the only option which allow to use different keys for different tenants. Positive Consequences multiple keys are supported Negative Consequences complex management of keys Pros and Cons of the Options Asymmetric JWT signing A RSA or ECDSA key pair is used for signing and verification. The JWTs signed by the external services using their own private key. Each private/public key pair has a key id and the public key is added as known key to the websocket-api. The websocket-api uses the key id of the JWT to find the corresponding known public and use it to validate the JWT Token signature. Good, because multiple tenants can use the same websocket-api service with different keys Good, because adding or revoking of single tenant key is possible Bad, because setup of the private and public keys is complicated Bad, because multiple keys must be managed Symmetric JWT signing The HMAC algorithm with a shared secret is used for signing and verification. All the external services must know the shared secret of the websocket-api to generate valid JWTs. The websocket-api use it secret to validate all JWTs. Good, because implementation very simple Good, because only a simple secret (string) must be managed Bad, because all tenants use the same shared secret Bad, because changing the secret require changes to all tenants Links ADR-0001","title":"ADR-0004"},{"location":"adr/0004-use-asymmetric-jwt-signing/#use-asymmetric-jwt-signing","text":"Status: accepted Deciders: Leon Kiefer, Per Pascal Seeland Date: 2020-05-11 Technical Story: https://github.com/VirtualProgrammingLab/viplab-websocket-api/issues/11","title":"Use asymmetric JWT signing"},{"location":"adr/0004-use-asymmetric-jwt-signing/#context-and-problem-statement","text":"When using JSON Web Tokens generating signatures and verifying them is an important task. JWTs can be signed using a secret (with the HMAC algorithm) or a public/private key pair using RSA or ECDSA. When implementing JWTs one must decide which method to use.","title":"Context and Problem Statement"},{"location":"adr/0004-use-asymmetric-jwt-signing/#decision-drivers","text":"Multi tenant support with own keys for each tenant","title":"Decision Drivers"},{"location":"adr/0004-use-asymmetric-jwt-signing/#considered-options","text":"Asymmetric JWT signing Symmetric JWT signing","title":"Considered Options"},{"location":"adr/0004-use-asymmetric-jwt-signing/#decision-outcome","text":"Chosen option: \"Asymmetric JWT signing\", because it the only option which allow to use different keys for different tenants.","title":"Decision Outcome"},{"location":"adr/0004-use-asymmetric-jwt-signing/#positive-consequences","text":"multiple keys are supported","title":"Positive Consequences"},{"location":"adr/0004-use-asymmetric-jwt-signing/#negative-consequences","text":"complex management of keys","title":"Negative Consequences"},{"location":"adr/0004-use-asymmetric-jwt-signing/#pros-and-cons-of-the-options","text":"","title":"Pros and Cons of the Options"},{"location":"adr/0004-use-asymmetric-jwt-signing/#asymmetric-jwt-signing","text":"A RSA or ECDSA key pair is used for signing and verification. The JWTs signed by the external services using their own private key. Each private/public key pair has a key id and the public key is added as known key to the websocket-api. The websocket-api uses the key id of the JWT to find the corresponding known public and use it to validate the JWT Token signature. Good, because multiple tenants can use the same websocket-api service with different keys Good, because adding or revoking of single tenant key is possible Bad, because setup of the private and public keys is complicated Bad, because multiple keys must be managed","title":"Asymmetric JWT signing"},{"location":"adr/0004-use-asymmetric-jwt-signing/#symmetric-jwt-signing","text":"The HMAC algorithm with a shared secret is used for signing and verification. All the external services must know the shared secret of the websocket-api to generate valid JWTs. The websocket-api use it secret to validate all JWTs. Good, because implementation very simple Good, because only a simple secret (string) must be managed Bad, because all tenants use the same shared secret Bad, because changing the secret require changes to all tenants","title":"Symmetric JWT signing"},{"location":"adr/0004-use-asymmetric-jwt-signing/#links","text":"ADR-0001","title":"Links"},{"location":"adr/template/","text":"[short title of solved problem and solution] Status: [proposed | rejected | accepted | deprecated | \u2026 | superseded by ADR-0004 ] Deciders: [list everyone involved in the decision] Date: [YYYY-MM-DD when the decision was last updated] Technical Story: [description | ticket/issue URL] Context and Problem Statement [Describe the context and problem statement, e.g., in free form using two to three sentences. You may want to articulate the problem in form of a question.] Decision Drivers [driver 1, e.g., a force, facing concern, \u2026] [driver 2, e.g., a force, facing concern, \u2026] \u2026 Considered Options [option 1] [option 2] [option 3] \u2026 Decision Outcome Chosen option: \"[option 1]\", because [justification. e.g., only option, which meets k.o. criterion decision driver | which resolves force force | \u2026 | comes out best (see below)]. Positive Consequences [e.g., improvement of quality attribute satisfaction, follow-up decisions required, \u2026] \u2026 Negative Consequences [e.g., compromising quality attribute, follow-up decisions required, \u2026] \u2026 Pros and Cons of the Options [option 1] [example | description | pointer to more information | \u2026] Good, because [argument a] Good, because [argument b] Bad, because [argument c] \u2026 [option 2] [example | description | pointer to more information | \u2026] Good, because [argument a] Good, because [argument b] Bad, because [argument c] \u2026 [option 3] [example | description | pointer to more information | \u2026] Good, because [argument a] Good, because [argument b] Bad, because [argument c] \u2026 Links [Link type] [Link to ADR] \u2026","title":"Template"},{"location":"adr/template/#short-title-of-solved-problem-and-solution","text":"Status: [proposed | rejected | accepted | deprecated | \u2026 | superseded by ADR-0004 ] Deciders: [list everyone involved in the decision] Date: [YYYY-MM-DD when the decision was last updated] Technical Story: [description | ticket/issue URL]","title":"[short title of solved problem and solution]"},{"location":"adr/template/#context-and-problem-statement","text":"[Describe the context and problem statement, e.g., in free form using two to three sentences. You may want to articulate the problem in form of a question.]","title":"Context and Problem Statement"},{"location":"adr/template/#decision-drivers","text":"[driver 1, e.g., a force, facing concern, \u2026] [driver 2, e.g., a force, facing concern, \u2026] \u2026","title":"Decision Drivers "},{"location":"adr/template/#considered-options","text":"[option 1] [option 2] [option 3] \u2026","title":"Considered Options"},{"location":"adr/template/#decision-outcome","text":"Chosen option: \"[option 1]\", because [justification. e.g., only option, which meets k.o. criterion decision driver | which resolves force force | \u2026 | comes out best (see below)].","title":"Decision Outcome"},{"location":"adr/template/#positive-consequences","text":"[e.g., improvement of quality attribute satisfaction, follow-up decisions required, \u2026] \u2026","title":"Positive Consequences "},{"location":"adr/template/#negative-consequences","text":"[e.g., compromising quality attribute, follow-up decisions required, \u2026] \u2026","title":"Negative Consequences "},{"location":"adr/template/#pros-and-cons-of-the-options","text":"","title":"Pros and Cons of the Options "},{"location":"adr/template/#option-1","text":"[example | description | pointer to more information | \u2026] Good, because [argument a] Good, because [argument b] Bad, because [argument c] \u2026","title":"[option 1]"},{"location":"adr/template/#option-2","text":"[example | description | pointer to more information | \u2026] Good, because [argument a] Good, because [argument b] Bad, because [argument c] \u2026","title":"[option 2]"},{"location":"adr/template/#option-3","text":"[example | description | pointer to more information | \u2026] Good, because [argument a] Good, because [argument b] Bad, because [argument c] \u2026","title":"[option 3]"},{"location":"adr/template/#links","text":"[Link type] [Link to ADR] \u2026","title":"Links "},{"location":"adr/versioning/","text":"/*Hide \"Edit this page-Button*/ .md-content__button { display: none; } JSON Object Versioning Rules Status: proposed Deciders: Leon Kiefer, Per Pascal Seeland Date: 2020-05-14 Technical Story: https://github.com/VirtualProgrammingLab/documentation/issues/1 Context and Problem Statement The ViPLab Projects defines a set of JSON-objects, which are used in the different components of the project. Since ViPLab itself does not store any data, these objects have to be stored by third party systems. These will be, depending on the context they are used in either LMS (like ILIAS) or data repositories (like dataverse). There needs to be a way to identify the version of the different objects stored by the third party system to allow e.g. upgrading/migrating the different components. Decision Drivers Provide a way to identify the version of the objects and also provide a path for e.g. upgrading the API endpoints used by those systems. Considered Options Version all endpoints, but not the objects Version all objects, but not the endpoints Version parts of the objects and all of the endpoints. Version all objects and all of the endpoints. Decision Outcome It has been decided to version all long living objects, and all endpoints. The reason for requiring all objects to have version tags is for consistency reasons. Endpoints will only accept objects versions of one major version. Breaking changes will require to define a new version. Incremental updates, which only extend the object are allowed. All systems are expected to handle these incremental updates gracefully. This means that a version 3.1.x message returned by the api must be accept by a 3.0.x client. The additional information contained by the api may be discarded. The same rules apply when a 3.1.x client talks to a 3.0.x api. The api will process the message according to the 3.0.x rules and extra information might be discarded. The client has to determine the correct endpoint versions to use. When the client will use a ComputationTemplate with version 3.x.x the corresponding websocket api will be ws://example.com/v3/computation. All other messages used in any further communication between the websocket-api and the client are also expected to be version 3.x.x. There is no possiblity to mix different versions. If a client wants to use a v4 api, he has to reconnect to the correct endpoint at ws://example.com/v4/computation The objects have been devided into three groups: - Long living object: ComputationTemplate, ComputationTask and ComputationResult - Wrappers: Computation - Message Types: CreateComputation and Result All long living objects are expected to be stored by clients and have version attribute on their top level of the json object, making it easy to get the information. Wrappers only exist during the communication between the client and the api and thus will not contain any version information, as it can be derived from the version of the api version they are being used with. Their only functionality is to group long living objects during a request. Messages Types are the messages used for the communication of the client with the websocket api. Like the wrappers they belong to a specific endpoint version and are also not versioned. Positive Consequences Providing version information allows api and the client to be updated independently. It also allows the objects being held by the client to be easily identified without the need to either store this information somewhere external, where is might get lost or require some method to identify it based on the attributes available. Negative Consequences The version needs to stored on all objects, which requires additional space and bandwidth. Also this information needs to be processed in the endpoints. But this in neglactable considered to the need of upgrading different systems of different third party users at once. Pros and Cons of the Options Versioning either only the endpoints would still cause the issue, that a client needs to keep track of which implicit version an object has, to make sure he picks the right endpoint. This might also lead to the fact, that one might try to send the data to the wrong endpoint, since it is not known where it should belong. Only versioning the endpoints would require to add a lot of version identification cold on the api side, which should be avoided. Between the last to options, the only difference is, that the actions wrappers are not being versioned. This tradeoff has been made due to the fact, that they should never be stored somewhere and that they are considered stable for one api version. Adding actions or changing the wrappers itself will cause a upgrade of the api version. Links","title":"Versioning"},{"location":"adr/versioning/#json-object-versioning-rules","text":"Status: proposed Deciders: Leon Kiefer, Per Pascal Seeland Date: 2020-05-14 Technical Story: https://github.com/VirtualProgrammingLab/documentation/issues/1","title":"JSON Object Versioning Rules"},{"location":"adr/versioning/#context-and-problem-statement","text":"The ViPLab Projects defines a set of JSON-objects, which are used in the different components of the project. Since ViPLab itself does not store any data, these objects have to be stored by third party systems. These will be, depending on the context they are used in either LMS (like ILIAS) or data repositories (like dataverse). There needs to be a way to identify the version of the different objects stored by the third party system to allow e.g. upgrading/migrating the different components.","title":"Context and Problem Statement"},{"location":"adr/versioning/#decision-drivers","text":"Provide a way to identify the version of the objects and also provide a path for e.g. upgrading the API endpoints used by those systems.","title":"Decision Drivers"},{"location":"adr/versioning/#considered-options","text":"Version all endpoints, but not the objects Version all objects, but not the endpoints Version parts of the objects and all of the endpoints. Version all objects and all of the endpoints.","title":"Considered Options"},{"location":"adr/versioning/#decision-outcome","text":"It has been decided to version all long living objects, and all endpoints. The reason for requiring all objects to have version tags is for consistency reasons. Endpoints will only accept objects versions of one major version. Breaking changes will require to define a new version. Incremental updates, which only extend the object are allowed. All systems are expected to handle these incremental updates gracefully. This means that a version 3.1.x message returned by the api must be accept by a 3.0.x client. The additional information contained by the api may be discarded. The same rules apply when a 3.1.x client talks to a 3.0.x api. The api will process the message according to the 3.0.x rules and extra information might be discarded. The client has to determine the correct endpoint versions to use. When the client will use a ComputationTemplate with version 3.x.x the corresponding websocket api will be ws://example.com/v3/computation. All other messages used in any further communication between the websocket-api and the client are also expected to be version 3.x.x. There is no possiblity to mix different versions. If a client wants to use a v4 api, he has to reconnect to the correct endpoint at ws://example.com/v4/computation The objects have been devided into three groups: - Long living object: ComputationTemplate, ComputationTask and ComputationResult - Wrappers: Computation - Message Types: CreateComputation and Result All long living objects are expected to be stored by clients and have version attribute on their top level of the json object, making it easy to get the information. Wrappers only exist during the communication between the client and the api and thus will not contain any version information, as it can be derived from the version of the api version they are being used with. Their only functionality is to group long living objects during a request. Messages Types are the messages used for the communication of the client with the websocket api. Like the wrappers they belong to a specific endpoint version and are also not versioned.","title":"Decision Outcome"},{"location":"adr/versioning/#positive-consequences","text":"Providing version information allows api and the client to be updated independently. It also allows the objects being held by the client to be easily identified without the need to either store this information somewhere external, where is might get lost or require some method to identify it based on the attributes available.","title":"Positive Consequences"},{"location":"adr/versioning/#negative-consequences","text":"The version needs to stored on all objects, which requires additional space and bandwidth. Also this information needs to be processed in the endpoints. But this in neglactable considered to the need of upgrading different systems of different third party users at once.","title":"Negative Consequences"},{"location":"adr/versioning/#pros-and-cons-of-the-options","text":"Versioning either only the endpoints would still cause the issue, that a client needs to keep track of which implicit version an object has, to make sure he picks the right endpoint. This might also lead to the fact, that one might try to send the data to the wrong endpoint, since it is not known where it should belong. Only versioning the endpoints would require to add a lot of version identification cold on the api side, which should be avoided. Between the last to options, the only difference is, that the actions wrappers are not being versioned. This tradeoff has been made due to the fact, that they should never be stored somewhere and that they are considered stable for one api version. Adding actions or changing the wrappers itself will cause a upgrade of the api version.","title":"Pros and Cons of the Options"},{"location":"adr/versioning/#links","text":"","title":"Links"},{"location":"developer/","text":"ViPLab 3.0 Virtual programming laboratory for education and teaching at universities as well as executing docker images in the context of research data management. Clients (frontends) use the websocket-api to communicate to several backends (computation clients) working in a cluster. A computation client instance supports one or more language environments (e.g. 'C', 'Matlab'). This documentation describes the json-messages used by the different ViPLab components to fulfill all the various features of ViPLab. Terms (ViPLab specific) ViPLab virtual programming laboratory (for programming this term is more generic than NumLab (outdated)) NumLab legacy term for ViPLab (don't use it for new documentation) ViP ViPLab shortcut \"Virtuelles Programmierlabor\" (German project shortcut) CC computation client, also backend FC frontend client; has different views: teacher view or view of a researcher creating a new computation template student view or view of a researcher executing an existing computation client a system component interacting with the websocket-api , e.g. backends, frontends frontend launcher entrypoints for the user, that start the frontend, e.g. viplab-question-plugin-for-ilias or dataverse-viplab-extension computation a CC computes a Result of a Computation Task complementing a Computation Template ( Computation Task and - referenced - Computation Template being input, Result output of computation). Flow of information ViPLab Sequence Diagram After establishing a connection to the Websocket API, a JWT is sent for authentication. This JWT is then verified by the Websocket API. If it is valid, the Requestor can send a createComputation message to the Websocket API. The message contains the Computaton Template and a Computation Task. Receiving the message, the Websocket API verifies the Computation Template and combines the Template and the Task into a Computation. Subsequently, a message is sent to ActiveMQ, to request the Result. Additionally, the Computation is returned to the Requestor. This message gets pushed to the Computation-Backend, which in turn computes a Result, that is sent to the Websocket API via ActiveMQ. Before returning the Result to the initial Requestor, the Websocket API gets the Computation and stored the Result from/in its temporary Datastore. Development Help For further developing ViPLab or related services, you can use the local development environment based on Docker . Versioning rules Versioning rules Long living JSON messages Computation Template Computation Task Computation Result Wrapper Computation Message Types Create Computation Result System status (not implemented yet) Computation Interrupt(not implemented yet)","title":"Index"},{"location":"developer/#viplab-30","text":"Virtual programming laboratory for education and teaching at universities as well as executing docker images in the context of research data management. Clients (frontends) use the websocket-api to communicate to several backends (computation clients) working in a cluster. A computation client instance supports one or more language environments (e.g. 'C', 'Matlab'). This documentation describes the json-messages used by the different ViPLab components to fulfill all the various features of ViPLab.","title":"ViPLab 3.0"},{"location":"developer/#terms-viplab-specific","text":"ViPLab virtual programming laboratory (for programming this term is more generic than NumLab (outdated)) NumLab legacy term for ViPLab (don't use it for new documentation) ViP ViPLab shortcut \"Virtuelles Programmierlabor\" (German project shortcut) CC computation client, also backend FC frontend client; has different views: teacher view or view of a researcher creating a new computation template student view or view of a researcher executing an existing computation client a system component interacting with the websocket-api , e.g. backends, frontends frontend launcher entrypoints for the user, that start the frontend, e.g. viplab-question-plugin-for-ilias or dataverse-viplab-extension computation a CC computes a Result of a Computation Task complementing a Computation Template ( Computation Task and - referenced - Computation Template being input, Result output of computation).","title":"Terms (ViPLab specific)"},{"location":"developer/#flow-of-information","text":"ViPLab Sequence Diagram After establishing a connection to the Websocket API, a JWT is sent for authentication. This JWT is then verified by the Websocket API. If it is valid, the Requestor can send a createComputation message to the Websocket API. The message contains the Computaton Template and a Computation Task. Receiving the message, the Websocket API verifies the Computation Template and combines the Template and the Task into a Computation. Subsequently, a message is sent to ActiveMQ, to request the Result. Additionally, the Computation is returned to the Requestor. This message gets pushed to the Computation-Backend, which in turn computes a Result, that is sent to the Websocket API via ActiveMQ. Before returning the Result to the initial Requestor, the Websocket API gets the Computation and stored the Result from/in its temporary Datastore.","title":"Flow of information"},{"location":"developer/#development-help","text":"For further developing ViPLab or related services, you can use the local development environment based on Docker .","title":"Development Help"},{"location":"developer/#versioning-rules","text":"Versioning rules","title":"Versioning rules"},{"location":"developer/#long-living-json-messages","text":"Computation Template Computation Task Computation Result","title":"Long living JSON messages"},{"location":"developer/#wrapper","text":"Computation","title":"Wrapper"},{"location":"developer/#message-types","text":"Create Computation Result System status (not implemented yet) Computation Interrupt(not implemented yet)","title":"Message Types"},{"location":"developer/computation/","text":"Computation JSON Message A computation represents the combination of a computation template and a corresponding computation task . It is the input of any backend. The JSON message of a computation is very similar to a computation template , so the interested reader is also referred to its documentation . Example (informal) Note: // with text following until EOL is a comment, which is not covered by the JSON spec, and should not be contained in message sends in real; but nevertheless it would help, if JSON parsers could just ignore them. Computation Message Example { \"identifier\" : \"4598393-95bf-409a-98a5-ee375982c3e\" , // uuid, created by websocket api \"environment\" : \"C\" , // important for interpreting configuration \"files\" : // must: at least one array element [ { \"identifier\" : \"22483f42-95bf-984a-98a5-ee9485c85c3e\" , // uuid from template \"path\" : \"code.c\" // filename on backend \"parts\" : // must: at least one array element [ { \"identifier\" : \"preamble\" , // identifier from template \"access\" : \"visible\" , // access from template \"content\" : \"I2luY2x1ZGUgPHN0ZGlvLmg-Cg\" // source (base64url encoded) // decoded: #include <stdio.h>\\n }, { \"identifier\" : \"codeFromStudent\" , // identifier from template \"access\" : \"modifiable\" , \"content\" : \"dm9pZCBiYXIoKSB7IHByaW50ZigiYmFyIQoiKTsKfQo\" // content from task // decoded: void bar() { printf(\\\"bar!\\\\n\\\");\\n}\\n }, { \"identifier\" : \"postscript\" , // identifier from template \"access\" : \"visible\" , \"content\" : \"aW50IG1haW4oKSB7IGJhcigpOyByZXR1cm4gMDsgfQ\" // source // decoded: int main() { bar(); return 0; } } ] // parts[] } ], // files[] \"configuration\" : { \"compiling.compiler\" : \"gcc\" , \"compiling.flags\" : \"-O2 -Wall\" \"checking.sources\" : [ \"codeFromStudent\" ], // identifier to parts \"checking.forbiddenCalls\" : \"system execve\" // forbidden call names separated by WS \"linking.flags\" : \"-lm\" \"running.commandLineArguments\" : \"--stepwidth 0.5\" // mustache template with injected arguments } } Explaining the JSON Format Key [--Subkey] Type (a default is marked by italics ) Opt / Must Description Comment identifier string (UUID) must the identifier of this computation is generated by the websocket api environment one of must Specifies the environment used for the Computation. It defines language, runtime, libraries and tools files [ {...}, {...}, ... ] must array containing File objects : there has to be at least one element configuration struct opt/must (depends on environment) Environment specific configurations Different phases can be configured like compiling, checking (for legal function calls in source code), ... configuration --compiling.sources [FILE_ID, FILE_ID, ...] must Array of identifiers of JSON File objects . Explicit compilation (only referenced sources will be compiled). for C, C++, Java configuration --compiling.compiler string must compiler to be used, e.g. \"gcc\" for C, C++ configuration --compiling.flags string must for C, C++ ; optional for Java CFLAGS for C/C++ ; compile flags for Java e.g. \"gcc\" for C/C++ ; \"-O2\" or \"\" for Java configuration --checking.sources [PART_ID, PART_ID, ...] must if checking should be performed array of identifiers of to be checked sources; given by parts[]{PART_ID} (see below ) for Matlab, Octave, C, Java configuration --checking.allowedCalls string must if checking should be performed for Matlab/Octave : allowed call names separated by WS; only idents (no braces, no func args) for Java : allowed call name expressions separated by WS for Java semantics see Java checking semantics . configuration --checking.forbiddenCalls string must if checking should be performed for C : forbidden call names separated by WS; only idents (no braces, no func args) for Java : forbidden call name expressions separated by WS for C semantics see C checking semantics ); for Java semantics see Java checking semantics . configuration --linking.flags string must LFLAGS for C, C++ ; e.g. \"\" configuration --running.stdinFilename FILE_ID must the file identifier that is passed to Matlab/Octave via standard-in configuration --running.timelimitInSeconds int opt CPU time limit for all environments ; for semantics see Notes to \"timelimitInSeconds\" . configuration --running.commandLineArguments string opt for C, C++, Java : arguments given to main() function; for DuMuX, Container : additional command line args configuration --running.flags string opt flags given to JVM for Java configuration --running.mainClass string opt (if unique) / must (if not unique) class containing \"public static void main(String[] args) {\" for Java : \"args\" may be another name. If main function is unique, its correct class should be detected automatically. configuration --running.executable string must name of executable to run (as in backend file system) for DuMuX configuration --running.entrypoint string must executable to run inside the container for Container configuration --running.observe_stderr bool ( false ) opt if true, transfer intermediate stderr Results for DuMuX, Container configuration --resources.image url must location of the image to be executed for Container ; has to be a tar configuration --resources.volume string must path in the container where data is placed for Container configuration --resources.memory string opt ( 64mb ) memory limit for the container for Container configuration --resources.numCPUs int opt number of CPUs for the container for Container JSON objects in files An object in array files[] has the following members: Key Type (an enum default is marked by italics ) Opt / Must Description Comment identifier string (UUID) must reference to a computation template file path string must absolute path to file It is not allowed to start with '/' parts [{...}, {...}, ...] must array containing part objects . There has to be at least one. JSON objects in parts An object in array parts[] has the following members: Key Type (an enum default is marked by italics ) Opt / Must Description Comment identifier string must reference to a computation template part access one of must the access level of this part equals to the access level of this part in the computation template content string must base64url-encoded source code","title":"Computation"},{"location":"developer/computation/#computation-json-message","text":"A computation represents the combination of a computation template and a corresponding computation task . It is the input of any backend. The JSON message of a computation is very similar to a computation template , so the interested reader is also referred to its documentation .","title":"Computation JSON Message"},{"location":"developer/computation/#example-informal","text":"Note: // with text following until EOL is a comment, which is not covered by the JSON spec, and should not be contained in message sends in real; but nevertheless it would help, if JSON parsers could just ignore them. Computation Message Example { \"identifier\" : \"4598393-95bf-409a-98a5-ee375982c3e\" , // uuid, created by websocket api \"environment\" : \"C\" , // important for interpreting configuration \"files\" : // must: at least one array element [ { \"identifier\" : \"22483f42-95bf-984a-98a5-ee9485c85c3e\" , // uuid from template \"path\" : \"code.c\" // filename on backend \"parts\" : // must: at least one array element [ { \"identifier\" : \"preamble\" , // identifier from template \"access\" : \"visible\" , // access from template \"content\" : \"I2luY2x1ZGUgPHN0ZGlvLmg-Cg\" // source (base64url encoded) // decoded: #include <stdio.h>\\n }, { \"identifier\" : \"codeFromStudent\" , // identifier from template \"access\" : \"modifiable\" , \"content\" : \"dm9pZCBiYXIoKSB7IHByaW50ZigiYmFyIQoiKTsKfQo\" // content from task // decoded: void bar() { printf(\\\"bar!\\\\n\\\");\\n}\\n }, { \"identifier\" : \"postscript\" , // identifier from template \"access\" : \"visible\" , \"content\" : \"aW50IG1haW4oKSB7IGJhcigpOyByZXR1cm4gMDsgfQ\" // source // decoded: int main() { bar(); return 0; } } ] // parts[] } ], // files[] \"configuration\" : { \"compiling.compiler\" : \"gcc\" , \"compiling.flags\" : \"-O2 -Wall\" \"checking.sources\" : [ \"codeFromStudent\" ], // identifier to parts \"checking.forbiddenCalls\" : \"system execve\" // forbidden call names separated by WS \"linking.flags\" : \"-lm\" \"running.commandLineArguments\" : \"--stepwidth 0.5\" // mustache template with injected arguments } }","title":"Example (informal)"},{"location":"developer/computation/#explaining-the-json-format","text":"Key [--Subkey] Type (a default is marked by italics ) Opt / Must Description Comment identifier string (UUID) must the identifier of this computation is generated by the websocket api environment one of must Specifies the environment used for the Computation. It defines language, runtime, libraries and tools files [ {...}, {...}, ... ] must array containing File objects : there has to be at least one element configuration struct opt/must (depends on environment) Environment specific configurations Different phases can be configured like compiling, checking (for legal function calls in source code), ... configuration --compiling.sources [FILE_ID, FILE_ID, ...] must Array of identifiers of JSON File objects . Explicit compilation (only referenced sources will be compiled). for C, C++, Java configuration --compiling.compiler string must compiler to be used, e.g. \"gcc\" for C, C++ configuration --compiling.flags string must for C, C++ ; optional for Java CFLAGS for C/C++ ; compile flags for Java e.g. \"gcc\" for C/C++ ; \"-O2\" or \"\" for Java configuration --checking.sources [PART_ID, PART_ID, ...] must if checking should be performed array of identifiers of to be checked sources; given by parts[]{PART_ID} (see below ) for Matlab, Octave, C, Java configuration --checking.allowedCalls string must if checking should be performed for Matlab/Octave : allowed call names separated by WS; only idents (no braces, no func args) for Java : allowed call name expressions separated by WS for Java semantics see Java checking semantics . configuration --checking.forbiddenCalls string must if checking should be performed for C : forbidden call names separated by WS; only idents (no braces, no func args) for Java : forbidden call name expressions separated by WS for C semantics see C checking semantics ); for Java semantics see Java checking semantics . configuration --linking.flags string must LFLAGS for C, C++ ; e.g. \"\" configuration --running.stdinFilename FILE_ID must the file identifier that is passed to Matlab/Octave via standard-in configuration --running.timelimitInSeconds int opt CPU time limit for all environments ; for semantics see Notes to \"timelimitInSeconds\" . configuration --running.commandLineArguments string opt for C, C++, Java : arguments given to main() function; for DuMuX, Container : additional command line args configuration --running.flags string opt flags given to JVM for Java configuration --running.mainClass string opt (if unique) / must (if not unique) class containing \"public static void main(String[] args) {\" for Java : \"args\" may be another name. If main function is unique, its correct class should be detected automatically. configuration --running.executable string must name of executable to run (as in backend file system) for DuMuX configuration --running.entrypoint string must executable to run inside the container for Container configuration --running.observe_stderr bool ( false ) opt if true, transfer intermediate stderr Results for DuMuX, Container configuration --resources.image url must location of the image to be executed for Container ; has to be a tar configuration --resources.volume string must path in the container where data is placed for Container configuration --resources.memory string opt ( 64mb ) memory limit for the container for Container configuration --resources.numCPUs int opt number of CPUs for the container for Container","title":"Explaining the JSON Format"},{"location":"developer/computation/#json-objects-in-files","text":"An object in array files[] has the following members: Key Type (an enum default is marked by italics ) Opt / Must Description Comment identifier string (UUID) must reference to a computation template file path string must absolute path to file It is not allowed to start with '/' parts [{...}, {...}, ...] must array containing part objects . There has to be at least one.","title":"JSON objects in files"},{"location":"developer/computation/#json-objects-in-parts","text":"An object in array parts[] has the following members: Key Type (an enum default is marked by italics ) Opt / Must Description Comment identifier string must reference to a computation template part access one of must the access level of this part equals to the access level of this part in the computation template content string must base64url-encoded source code","title":"JSON objects in parts"},{"location":"developer/computation_result/","text":"Computation Result JSON Message A computation result is the result of a computation . It always contains the stdout and stderr of of the computation. In addition, it may containIt contains arbitrary information contained in one or more artifacts. Artifacts are information about the success or failure (showing details for students) and result objects, like files, images, links, etc. Example (informal) Computation Result Message Example { \"identifier\" : \"86165eea-14df-4a76-805a-09b21441cbf7\" , \"version\" : \"3.0.0\" \"computation\" : \"4598393-95bf-409a-98a5-ee375982c3e\" , // uuid of corresponding computation \"status\" : \"final\" , // final and intermediate, \"timestamp\" : // creation time of this message in ISO-8601 \"output\" : { \"stdout\" : \"\" , // base64url encoded content, mandatory, even if empty \"stderr\" : \"\" , // base64url encoded content, mandatory, even if empty }, \"artifacts\" : [ // additional artifacts (files, notifications, etc) { \"type\" : \"notifications\" , // each artifact requires a type and \"identifier\" : \"1dd479d9-c9bd-4711-aed8-5bfb3ec5fcfa\" , // and an identifier \"summary\" : \"(C chain)v1.9 failed.\" , \"elements\" : [ { \"severity\" : \"info\" , \"type\" : \"compiler\" , \"message\" : \"source_0.c: In function \\u2018trapez\\u2019:\" , \"output\" : { \"source\" : \"stderr\" , \"extract\" : \"source_0.c: In function \\u2018trapez\\u2019:\" , \"begin\" : 0 , \"end\" : 37 } }, { \"severity\" : \"warning\" , \"type\" : \"compiler\" , \"message\" : \"source_0.c:21:10: warning: unused variable \\u2018x\\u2019 [-Wunused-variable]\" , \"origin\" : { \"source\" : \"parts://7a1808d0-c997-4e28-acdf-bfda3ce70960\" , //code the student can edit \"extract\" : \" double x = 0;\" , \"begin\" : 406 , \"end\" : 421 , \"line\" : 15 , \"col\" : 10 }, \"output\" : { \"source\" : \"stderr\" , \"extract\" : \"source_0.c:21:10: warning: unused variable \\u2018x\\u2019 [-Wunused-variable]\" , \"begin\" : 38 , \"end\" : 108 } }, { \"severity\" : \"error\" , \"type\" : \"callcheck\" , \"message\" : \"[C function filtering] Function call not allowed:\\n\\\"system\\\"; original source: codeFromStudent, line (corrected): 20, col: 3\\nForbidden calls:\\nsystem.\\n\" , \"origin\" : { \"elementID\" : \"parts://7a1808d0-c997-4e28-acdf-bfda3ce70960\" , \"extract\" : \" system(\\\"/bin/rm /tmp/foo.txt\\\"); // illegal call (should be catched by checker)\" , \"begin\" : 325 , \"end\" : 405 , \"line\" : 14 , \"col\" : 3 } } ] }, { \"type\" : \"file\" , \"identifier\" : \"de762095-6cd2-439f-80eb-313e85d33869\" , \"MIMEtype\" : \"image/png\" , \"path\" : \"/images/img.png\" , \"content\" : \"\" // base64url encoded content }, { \"type\" : \"file\" , \"identifier\" : \"10516761-d937-4ba4-a82f-dc2847d45032\" , \"MIMEtype\" : \"image/png\" , \"path\" : \"/images/img2.png\" , \"content\" : \"\" // base64url encoded content }, { \"type\" : \"s3file\" , \"identifier\" : \"cc3c1cf9-c02d-4694-902c-93c298d68c51\" , \"MIMEtype\" : \"application/gzip\" , \"path\" : \"/largefile/result.tar.gz\" , \"url\" : \"https://s3.temporary.file.url/result.tar.gz\" , \"size\" : 123456789 , \"hash\" : \"sha512:hashcode_of_file\" } ] } Result Artifacts Each computation ends with a ComputationResult containing at least the output generated on stdout and stderr. All additional information about an executed computation like created files is contained inside an arbitrary number of artifacts. Each artifact containes at least an identifier and a type describing the content. The main purposes of this concept is to allow a standard way how to extend what information can be created and returned during a computation. artifact types In addition to the two mandatory fields for each artifact, each artifact has a specific set of additional fields. Currently, the following list of artifact types are defined with a given set fields: file s3file notifications Specification of the JSON formats ComputationResult JSON object Key Value Type Opt / Must Description Comment identifier string (uuid) must unique ComputationResult ID version string must version of the json specification used. The major version must match the version of the ComputationTask computation string (uuid) must identifier of the computation that is responsible for this result status One of must \"final\": last Result of computation \"intermediate\": more Results expected If there is only one Result, it status should be \"final\". If there are multiple Results, status of all before \"final\" should be \"intermediate\". timestamp ISO-8601 datetimeString must Timestamp when this result is generated. Need for ordering of intermediate result output output json object must an object containing stdout and stderr artifacts array of artifact objects opt array of objects containing artifacts described at Artifacts output JSON object format Key Value Type Opt / Must Description Comment stdout string must the stdout of the exection, base64url encode must be provided even if empty stderr string must the stderr of the exection, base64url encode must be provided even if empty artifact JSON objects The base artifact object that needs to be extended all other artifacts defined. artifact JSON object Key Value Type Opt / Must Description Comment identifier string (uuid) must unique id for this artifact type string must the type of this artifact The type may be used by the client to determine how to display the artifact file artifact JSON object Key Value Type Opt / Must Description Comment path string must the path in which the content had been created during the computation MIMEtype string must MIMEtype of the content content string must base64url encoded content of the file In Viplab 2.0, the following MIMEtypes where allowed. They contain some custom defined types, which need to be keep supported: text/plain text/uri-list\": links to websides to be presented in SC image/png\" application/x-vgf: generated graphics output in 'ViP graphics format' application/x-vgf3: generated graphics output in 'ViP graphics format 3D' application/x-vgfc: generated graphics output in 'ViP graphics format contour plot'.| Additionally, the following types are supported: image/jpeg application/vnd.kitware application/json ... s3file artifact JSON object Key Value Type Opt / Must Description Comment path string must the path in which the content had been created during the computation MIMEtype string must MIMEtype of the content url string must url on which the content of the file can be retrieved size int must size in bytes of the file stored on the external system hash string must the hash of the remote file in the format usedhash:hashcode_of_file, e.g. sha512:a12355.... notifications artifact JSON object Each notifications artifact contains at least one summary and unlimited number of notification elemets providing more details Key Value Type Opt / Must Description Comment summary string must summary of all info_element's: e.g. one warning, one error may have a summary \"An error occured.\" E.g.: \"[Error] Backend has detected an error: no result!\" or \"Success!\" notifications array of notification objects opt the more detailed notification objects for this notifications object notification JSON object Key Value Type Opt / Must Description Comment severity string must One of type string must One of For all chains: {\"system, \"chain\", \"output\"}; for Octave/Matlab: {\"callcheck\", \"interpreter\"}; for C: {\"callcheck\", \"compiler\", \"linker\", \"executable\"}; for Java: {\"callcheck\", \"compiler\", \"executable\"}; for DuMuX: {\"executable\"} If type equals \"system\", whole Result if of interest for a bug report. message string must summary of one message to the user; it should not contain wrong error locations (file, line, col). Together with \"source\"/\"line\" or \"col\" (containing corrected locations) it should give the most interesting info. may be empty string (',' in optional location_part) origin notification origin json object opt If the message can be linked to a part from the ComputationTask, the original position can be found inside only allowed if \"type\" in output notification output json object opt The position and text from either stdout or stderr (see Output ) which caused notification. Notes: There are error messages containing multiple error triggering locations. This leads to multiple info_elements containing same \"message\" and \"output\", but different \"source\" objects. Note: another way would be to specify \"sources\":[{},...] as alternative to \"source\":{}. \"type\": \"fatal\" may be introduced later Compiler output may contain multiple error positions; only the first one should be extracted. notification origin JSON object Key Value Type Opt / Must Description Comment source string must identifier of part from ComputationTask which has triggered (error/warning/...) message extract string must Part of referenced part. Extracted from message triggering input. begin unsigned int must Offset of extract into ... end unsigned int must ... referenced part: C-like (zero-based). line 1..uint_max must Location of error/warning ... col 1..uint_max opt ... referring to position in triggering part. It is optional, since there are messages containing line info only notification output JSON object Key Value Type Opt / Must Description Comment source string must part of Output , which contained the message extract string must Part of referenced output. Extracted from message triggering input. begin unsigned int must Offset of extract into ... end unsigned int must ... referenced element: C-like (zero-based). Leftovers from Viplab 2.0 might be converted later, just keep around as inspration Key Value Type Opt / Must Description Comment startTime datetimeString must May be local or universal time. Just after getting a Solution. duration durationString must e.g. \"128ms\" Computation duration time since startTime (increases with each intermediate Result). finishTime datetimeString must, iff status == \"final\" May be local or universal time. Just before posting final Result. CC_versionLong string must CC_version string must chain_version string must technicalInfo struct must technicalInfo/host string must CC host technicalInfo/PID unsigned must CC PID technicalInfo/<key> <val_type> opt <key>: locally unique, <val_type>: arbitrary type For allowing further key/val pairs if there should be a need.","title":"Computation Result"},{"location":"developer/computation_result/#computation-result-json-message","text":"A computation result is the result of a computation . It always contains the stdout and stderr of of the computation. In addition, it may containIt contains arbitrary information contained in one or more artifacts. Artifacts are information about the success or failure (showing details for students) and result objects, like files, images, links, etc.","title":"Computation Result JSON Message"},{"location":"developer/computation_result/#example-informal","text":"Computation Result Message Example { \"identifier\" : \"86165eea-14df-4a76-805a-09b21441cbf7\" , \"version\" : \"3.0.0\" \"computation\" : \"4598393-95bf-409a-98a5-ee375982c3e\" , // uuid of corresponding computation \"status\" : \"final\" , // final and intermediate, \"timestamp\" : // creation time of this message in ISO-8601 \"output\" : { \"stdout\" : \"\" , // base64url encoded content, mandatory, even if empty \"stderr\" : \"\" , // base64url encoded content, mandatory, even if empty }, \"artifacts\" : [ // additional artifacts (files, notifications, etc) { \"type\" : \"notifications\" , // each artifact requires a type and \"identifier\" : \"1dd479d9-c9bd-4711-aed8-5bfb3ec5fcfa\" , // and an identifier \"summary\" : \"(C chain)v1.9 failed.\" , \"elements\" : [ { \"severity\" : \"info\" , \"type\" : \"compiler\" , \"message\" : \"source_0.c: In function \\u2018trapez\\u2019:\" , \"output\" : { \"source\" : \"stderr\" , \"extract\" : \"source_0.c: In function \\u2018trapez\\u2019:\" , \"begin\" : 0 , \"end\" : 37 } }, { \"severity\" : \"warning\" , \"type\" : \"compiler\" , \"message\" : \"source_0.c:21:10: warning: unused variable \\u2018x\\u2019 [-Wunused-variable]\" , \"origin\" : { \"source\" : \"parts://7a1808d0-c997-4e28-acdf-bfda3ce70960\" , //code the student can edit \"extract\" : \" double x = 0;\" , \"begin\" : 406 , \"end\" : 421 , \"line\" : 15 , \"col\" : 10 }, \"output\" : { \"source\" : \"stderr\" , \"extract\" : \"source_0.c:21:10: warning: unused variable \\u2018x\\u2019 [-Wunused-variable]\" , \"begin\" : 38 , \"end\" : 108 } }, { \"severity\" : \"error\" , \"type\" : \"callcheck\" , \"message\" : \"[C function filtering] Function call not allowed:\\n\\\"system\\\"; original source: codeFromStudent, line (corrected): 20, col: 3\\nForbidden calls:\\nsystem.\\n\" , \"origin\" : { \"elementID\" : \"parts://7a1808d0-c997-4e28-acdf-bfda3ce70960\" , \"extract\" : \" system(\\\"/bin/rm /tmp/foo.txt\\\"); // illegal call (should be catched by checker)\" , \"begin\" : 325 , \"end\" : 405 , \"line\" : 14 , \"col\" : 3 } } ] }, { \"type\" : \"file\" , \"identifier\" : \"de762095-6cd2-439f-80eb-313e85d33869\" , \"MIMEtype\" : \"image/png\" , \"path\" : \"/images/img.png\" , \"content\" : \"\" // base64url encoded content }, { \"type\" : \"file\" , \"identifier\" : \"10516761-d937-4ba4-a82f-dc2847d45032\" , \"MIMEtype\" : \"image/png\" , \"path\" : \"/images/img2.png\" , \"content\" : \"\" // base64url encoded content }, { \"type\" : \"s3file\" , \"identifier\" : \"cc3c1cf9-c02d-4694-902c-93c298d68c51\" , \"MIMEtype\" : \"application/gzip\" , \"path\" : \"/largefile/result.tar.gz\" , \"url\" : \"https://s3.temporary.file.url/result.tar.gz\" , \"size\" : 123456789 , \"hash\" : \"sha512:hashcode_of_file\" } ] }","title":"Example (informal)"},{"location":"developer/computation_result/#result-artifacts","text":"Each computation ends with a ComputationResult containing at least the output generated on stdout and stderr. All additional information about an executed computation like created files is contained inside an arbitrary number of artifacts. Each artifact containes at least an identifier and a type describing the content. The main purposes of this concept is to allow a standard way how to extend what information can be created and returned during a computation.","title":"Result Artifacts"},{"location":"developer/computation_result/#artifact-types","text":"In addition to the two mandatory fields for each artifact, each artifact has a specific set of additional fields. Currently, the following list of artifact types are defined with a given set fields: file s3file notifications","title":"artifact types"},{"location":"developer/computation_result/#specification-of-the-json-formats","text":"","title":"Specification of the JSON formats"},{"location":"developer/computation_result/#computationresult-json-object","text":"Key Value Type Opt / Must Description Comment identifier string (uuid) must unique ComputationResult ID version string must version of the json specification used. The major version must match the version of the ComputationTask computation string (uuid) must identifier of the computation that is responsible for this result status One of must \"final\": last Result of computation \"intermediate\": more Results expected If there is only one Result, it status should be \"final\". If there are multiple Results, status of all before \"final\" should be \"intermediate\". timestamp ISO-8601 datetimeString must Timestamp when this result is generated. Need for ordering of intermediate result output output json object must an object containing stdout and stderr artifacts array of artifact objects opt array of objects containing artifacts described at Artifacts","title":"ComputationResult JSON object"},{"location":"developer/computation_result/#output-json-object-format","text":"Key Value Type Opt / Must Description Comment stdout string must the stdout of the exection, base64url encode must be provided even if empty stderr string must the stderr of the exection, base64url encode must be provided even if empty","title":"output JSON object format"},{"location":"developer/computation_result/#artifact-json-objects","text":"The base artifact object that needs to be extended all other artifacts defined.","title":"artifact JSON objects"},{"location":"developer/computation_result/#artifact-json-object","text":"Key Value Type Opt / Must Description Comment identifier string (uuid) must unique id for this artifact type string must the type of this artifact The type may be used by the client to determine how to display the artifact","title":"artifact JSON object"},{"location":"developer/computation_result/#file-artifact-json-object","text":"Key Value Type Opt / Must Description Comment path string must the path in which the content had been created during the computation MIMEtype string must MIMEtype of the content content string must base64url encoded content of the file In Viplab 2.0, the following MIMEtypes where allowed. They contain some custom defined types, which need to be keep supported: text/plain text/uri-list\": links to websides to be presented in SC image/png\" application/x-vgf: generated graphics output in 'ViP graphics format' application/x-vgf3: generated graphics output in 'ViP graphics format 3D' application/x-vgfc: generated graphics output in 'ViP graphics format contour plot'.| Additionally, the following types are supported: image/jpeg application/vnd.kitware application/json ...","title":"file artifact JSON object"},{"location":"developer/computation_result/#s3file-artifact-json-object","text":"Key Value Type Opt / Must Description Comment path string must the path in which the content had been created during the computation MIMEtype string must MIMEtype of the content url string must url on which the content of the file can be retrieved size int must size in bytes of the file stored on the external system hash string must the hash of the remote file in the format usedhash:hashcode_of_file, e.g. sha512:a12355....","title":"s3file artifact JSON object"},{"location":"developer/computation_result/#notifications-artifact-json-object","text":"Each notifications artifact contains at least one summary and unlimited number of notification elemets providing more details Key Value Type Opt / Must Description Comment summary string must summary of all info_element's: e.g. one warning, one error may have a summary \"An error occured.\" E.g.: \"[Error] Backend has detected an error: no result!\" or \"Success!\" notifications array of notification objects opt the more detailed notification objects for this notifications object","title":"notifications artifact JSON object"},{"location":"developer/computation_result/#notification-json-object","text":"Key Value Type Opt / Must Description Comment severity string must One of type string must One of For all chains: {\"system, \"chain\", \"output\"}; for Octave/Matlab: {\"callcheck\", \"interpreter\"}; for C: {\"callcheck\", \"compiler\", \"linker\", \"executable\"}; for Java: {\"callcheck\", \"compiler\", \"executable\"}; for DuMuX: {\"executable\"} If type equals \"system\", whole Result if of interest for a bug report. message string must summary of one message to the user; it should not contain wrong error locations (file, line, col). Together with \"source\"/\"line\" or \"col\" (containing corrected locations) it should give the most interesting info. may be empty string (',' in optional location_part) origin notification origin json object opt If the message can be linked to a part from the ComputationTask, the original position can be found inside only allowed if \"type\" in output notification output json object opt The position and text from either stdout or stderr (see Output ) which caused notification. Notes: There are error messages containing multiple error triggering locations. This leads to multiple info_elements containing same \"message\" and \"output\", but different \"source\" objects. Note: another way would be to specify \"sources\":[{},...] as alternative to \"source\":{}. \"type\": \"fatal\" may be introduced later Compiler output may contain multiple error positions; only the first one should be extracted.","title":"notification JSON object"},{"location":"developer/computation_result/#notification-origin-json-object","text":"Key Value Type Opt / Must Description Comment source string must identifier of part from ComputationTask which has triggered (error/warning/...) message extract string must Part of referenced part. Extracted from message triggering input. begin unsigned int must Offset of extract into ... end unsigned int must ... referenced part: C-like (zero-based). line 1..uint_max must Location of error/warning ... col 1..uint_max opt ... referring to position in triggering part. It is optional, since there are messages containing line info only","title":"notification origin JSON object"},{"location":"developer/computation_result/#notification-output-json-object","text":"Key Value Type Opt / Must Description Comment source string must part of Output , which contained the message extract string must Part of referenced output. Extracted from message triggering input. begin unsigned int must Offset of extract into ... end unsigned int must ... referenced element: C-like (zero-based).","title":"notification output JSON object"},{"location":"developer/computation_result/#leftovers-from-viplab-20","text":"might be converted later, just keep around as inspration Key Value Type Opt / Must Description Comment startTime datetimeString must May be local or universal time. Just after getting a Solution. duration durationString must e.g. \"128ms\" Computation duration time since startTime (increases with each intermediate Result). finishTime datetimeString must, iff status == \"final\" May be local or universal time. Just before posting final Result. CC_versionLong string must CC_version string must chain_version string must technicalInfo struct must technicalInfo/host string must CC host technicalInfo/PID unsigned must CC PID technicalInfo/<key> <val_type> opt <key>: locally unique, <val_type>: arbitrary type For allowing further key/val pairs if there should be a need.","title":"Leftovers from Viplab 2.0"},{"location":"developer/computation_task/","text":"Computation Task JSON Message A computation task is the result of a possibly manipulated computation template . It contains the changes made on the template. Together with the template, a computation task forms a computation that is sent to the backend. In the context of a learning environment, a computation task can be seen as a Solution . Example (informal) Computation Task Message Example { \"template\" : \"11483f23-95bf-424a-98a5-ee5868c85c3e\" , // uuid of corresponding computation template \"arguments\" : { \"__STEPWIDTH__\" : \"0.5\" // parameter values from template, filled out by frontend }, \"metadata\" : { \"comment\" : \"Die war aber schwer!\" , }, \"parts\" : [ { \"identifier\" : \"codeFromStudent\" , // must: identifier of template part that has changed \"content\" : \"dm9pZCBiYXIoKSB7IHByaW50ZigiYmFyIQoiKTsKfQo\" // changed source from user // decoded: void bar() { printf(\\\"bar!\\\\n\\\");\\n}\\n // other fields defining this (text) element must *not* be repeated here. } // unchanged elements needn't be repeated here ] } Explaining the JSON Format Key [--Subkey] Type Opt / Must Description Comment AS template string (UUID) must computation template identifier arguments {PARAM_ID: value, ..., PARAM_ID: value} opt arguments of, e.g., configuration.commandLineArguments extracted by the frontend see computation template metadata struct opt contains information for frontend metadata --comment string opt comment from user implemented in frontend? parts [{...}, {...}, ...] opt array containing modified part objects . Only identifier - and content -attributes are allowed. Only \"modifiable\" or \"template\" parts can be referenced here (see access -attribute). The frontend creates the content for \"template\" parts. See notes . Notes for template parts The frontend will encode parts with access -value \"template\" as JSON messages with the following structure: { \"PARAM_ID1\" : \"value\" , \"PARAM_ID2\" : \"value_2\" , ... \"PARAM_IDn\" : \"value_n\" } PARAM_ID is the reference (key) to a parameter name inside the mustache template. \"value\" is the selected value of the user in the frontend. Parameters: What is input into the Handlebars.js-Template? Parameter guiType Example Returns checkbox Checkbox Example { \"mode\" : \"fixed\" , \"identifier\" : \"__checkbox__\" , \"metadata\" : { \"guiType\" : \"checkbox\" , \"name\" : \"Things I like\" , \"decription\" : \"Select things you like\" }, \"options\" : [ { \"value\" : \"programming\" , \"selected\" : true }, { \"value\" : \"music\" \"selected\" : true }, { \"value\" : \"books\" } ], \"validation\" : \"anyof\" } Checkbox Returns [\"programming\", \"music\"] Array of Strings radio Radio Example { \"mode\" : \"fixed\" , \"identifier\" : \"__radioButton__\" , \"metadata\" : { \"guiType\" : \"radio\" , \"name\" : \"Favorite PL\" , \"decription\" : \"Select your favorite programming language\" , }, \"options\" : [ { \"value\" : \"C\" }, { \"value\" : \"Java\" , \"selected\" : true }, { \"value\" : \"Haskell\" , \"disabled\" : true }, { \"value\" : \"Python\" } ], \"validation\" : \"oneof\" } Radio Returns \"Java\" String dropdown (single) Dropdown (single) Example { \"mode\" : \"fixed\" , \"identifier\" : \"__dropdownSingle__\" , \"metadata\" : { \"guiType\" : \"dropdown\" , \"name\" : \"Fridge\" , \"decription\" : \"How often do look into the fridge a day?\" }, \"options\" : [ { \"value\" : \"Please choose one\" , \"disabled\" : true }, { \"value\" : \"never\" , \"selected\" : true }, { \"value\" : \"Once a day\" }, { \"value\" : \"Twice a day\" }, { \"value\" : \"Three times a day\" }, { \"value\" : \"More than three times a day\" } ], \"validation\" : \"oneof\" } Dropdown (single) Returns \"never\" String dropdown (multiple) Dropdown (multiple) Example { \"mode\" : \"fixed\" , \"identifier\" : \"__dropdownMultiple__\" , \"metadata\" : { \"guiType\" : \"dropdown\" , \"name\" : \"Dance Time\" , \"decription\" : \"To which songs would you dance in the kitchen?\" }, \"options\" : [ { \"value\" : \"Please choose multiple\" , \"disabled\" : true }, { \"value\" : \"Last Christmas\" , \"selected\" : true }, { \"value\" : \"White Christmas\" }, { \"value\" : \"Winter Woderland\" }, { \"value\" : \"Thats Christmas To Me\" , \"selected\" : true }, { \"value\" : \"O Come All Ye Faithful\" , \"disabled\" : true } ], \"validation\" : \"anyof\" } Dropdown (multiple) Result [\"Last Christmas\", \"Thats Christmas To Me\"] Array of Strings toggle Toggle Example { \"mode\" : \"fixed\" , \"identifier\" : \"__toggle__\" , \"metadata\" : { \"guiType\" : \"toggle\" , \"name\" : \"NO!\" , \"decription\" : \"What do you dislike?\" }, \"options\" : [ { \"value\" : \"Spiders\" , \"selected\" : true }, { \"value\" : \"All kinds of Bugs (also the ones living in your Computer)\" }, { \"value\" : \"I never dislike anything!\" } ], \"validation\" : \"anyof\" } Toggle Result [\"Spiders\"] Array of Strings slider (single) Slider (single) Example { \"mode\" : \"any\" , \"identifier\" : \"__sliderSingle__\" , \"metadata\" : { \"guiType\" : \"slider\" , \"name\" : \"Temperature\" , \"vertical\" : false , \"decription\" : \"How hot do you like your coffee? (in degrees Celsius)\" }, \"default\" : [ 75 ], \"min\" : 0 , \"max\" : 90 , \"step\" : 10 , \"validation\" : \"range\" } Slider (single) Result 75 Number slider (multiple) Slider (multiple) Example { \"mode\" : \"any\" , \"identifier\" : \"__sliderMultiple__\" , \"metadata\" : { \"guiType\" : \"slider\" , \"name\" : \"random numbers\" , \"vertical\" : true , \"decription\" : \"Choose three random numbers to be output by the container\" }, \"default\" : [ 25 , 50 , 75 ], \"min\" : 0 , \"max\" : 100 , \"step\" : 5 , \"validation\" : \"range\" } Slider (multiple) Result [25, 50, 75] Array of Numbers input_field Input_field Example { \"mode\" : \"any\" , \"identifier\" : \"__inputText__\" , \"metadata\" : { \"guiType\" : \"input_field\" , \"type\" : \"text\" , \"name\" : \"name\" , \"decription\" : \"Enter your name\" }, \"default\" : [ \"\" ], \"validation\" : \"none\" } Input_field Result \"base64:S2F0aHJ5bg\" If the input_field is of type number: Number Else: Prefixed (\"base64:\") and Base64URL-encoded String - is decoded by Websocket API, before it is sent to Backend editor Editor Example { \"mode\" : \"any\" , \"identifier\" : \"__default__\" , \"metadata\" : { \"guiType\" : \"editor\" , \"name\" : \"code\" , \"decription\" : \"Enter some code\" }, \"default\" : [ \"aW50IG1haW4oaW50IGFyZ2MsIGNoYXIgKiphcmd2KSB7IC8vIFByaW50ICdIZWxsbyBXb3JsZCcgfQ\" ], \"validation\" : \"none\" } Editor Result \"base64:aW50IG1haW4oaW50IGFyZ2MsIGNoYXIgKiphcmd2KSB7IC8vIFByaW50ICdIZWxsbyBXb3JsZCcgfQ\" Prefixed (\"base64:\") and Base64URL-encoded String - is decoded by Websocket API, before it is sent to Backend Evaluation Task The feature of ViPLab to automatically evaluate student code (correction service) is still possible in ViPLab 3.0. The code needed for evaluation is send to the correction server as a JSON message with the same structure as a Computation Task . The only difference is, that here all parts can be replaced, regardless of there access -settings.","title":"Computation Task"},{"location":"developer/computation_task/#computation-task-json-message","text":"A computation task is the result of a possibly manipulated computation template . It contains the changes made on the template. Together with the template, a computation task forms a computation that is sent to the backend. In the context of a learning environment, a computation task can be seen as a Solution .","title":"Computation Task JSON Message"},{"location":"developer/computation_task/#example-informal","text":"Computation Task Message Example { \"template\" : \"11483f23-95bf-424a-98a5-ee5868c85c3e\" , // uuid of corresponding computation template \"arguments\" : { \"__STEPWIDTH__\" : \"0.5\" // parameter values from template, filled out by frontend }, \"metadata\" : { \"comment\" : \"Die war aber schwer!\" , }, \"parts\" : [ { \"identifier\" : \"codeFromStudent\" , // must: identifier of template part that has changed \"content\" : \"dm9pZCBiYXIoKSB7IHByaW50ZigiYmFyIQoiKTsKfQo\" // changed source from user // decoded: void bar() { printf(\\\"bar!\\\\n\\\");\\n}\\n // other fields defining this (text) element must *not* be repeated here. } // unchanged elements needn't be repeated here ] }","title":"Example (informal)"},{"location":"developer/computation_task/#explaining-the-json-format","text":"Key [--Subkey] Type Opt / Must Description Comment AS template string (UUID) must computation template identifier arguments {PARAM_ID: value, ..., PARAM_ID: value} opt arguments of, e.g., configuration.commandLineArguments extracted by the frontend see computation template metadata struct opt contains information for frontend metadata --comment string opt comment from user implemented in frontend? parts [{...}, {...}, ...] opt array containing modified part objects . Only identifier - and content -attributes are allowed. Only \"modifiable\" or \"template\" parts can be referenced here (see access -attribute). The frontend creates the content for \"template\" parts. See notes .","title":"Explaining the JSON Format"},{"location":"developer/computation_task/#notes-for-template-parts","text":"The frontend will encode parts with access -value \"template\" as JSON messages with the following structure: { \"PARAM_ID1\" : \"value\" , \"PARAM_ID2\" : \"value_2\" , ... \"PARAM_IDn\" : \"value_n\" } PARAM_ID is the reference (key) to a parameter name inside the mustache template. \"value\" is the selected value of the user in the frontend.","title":"Notes for template parts"},{"location":"developer/computation_task/#parameters-what-is-input-into-the-handlebarsjs-template","text":"Parameter guiType Example Returns checkbox Checkbox Example { \"mode\" : \"fixed\" , \"identifier\" : \"__checkbox__\" , \"metadata\" : { \"guiType\" : \"checkbox\" , \"name\" : \"Things I like\" , \"decription\" : \"Select things you like\" }, \"options\" : [ { \"value\" : \"programming\" , \"selected\" : true }, { \"value\" : \"music\" \"selected\" : true }, { \"value\" : \"books\" } ], \"validation\" : \"anyof\" } Checkbox Returns [\"programming\", \"music\"] Array of Strings radio Radio Example { \"mode\" : \"fixed\" , \"identifier\" : \"__radioButton__\" , \"metadata\" : { \"guiType\" : \"radio\" , \"name\" : \"Favorite PL\" , \"decription\" : \"Select your favorite programming language\" , }, \"options\" : [ { \"value\" : \"C\" }, { \"value\" : \"Java\" , \"selected\" : true }, { \"value\" : \"Haskell\" , \"disabled\" : true }, { \"value\" : \"Python\" } ], \"validation\" : \"oneof\" } Radio Returns \"Java\" String dropdown (single) Dropdown (single) Example { \"mode\" : \"fixed\" , \"identifier\" : \"__dropdownSingle__\" , \"metadata\" : { \"guiType\" : \"dropdown\" , \"name\" : \"Fridge\" , \"decription\" : \"How often do look into the fridge a day?\" }, \"options\" : [ { \"value\" : \"Please choose one\" , \"disabled\" : true }, { \"value\" : \"never\" , \"selected\" : true }, { \"value\" : \"Once a day\" }, { \"value\" : \"Twice a day\" }, { \"value\" : \"Three times a day\" }, { \"value\" : \"More than three times a day\" } ], \"validation\" : \"oneof\" } Dropdown (single) Returns \"never\" String dropdown (multiple) Dropdown (multiple) Example { \"mode\" : \"fixed\" , \"identifier\" : \"__dropdownMultiple__\" , \"metadata\" : { \"guiType\" : \"dropdown\" , \"name\" : \"Dance Time\" , \"decription\" : \"To which songs would you dance in the kitchen?\" }, \"options\" : [ { \"value\" : \"Please choose multiple\" , \"disabled\" : true }, { \"value\" : \"Last Christmas\" , \"selected\" : true }, { \"value\" : \"White Christmas\" }, { \"value\" : \"Winter Woderland\" }, { \"value\" : \"Thats Christmas To Me\" , \"selected\" : true }, { \"value\" : \"O Come All Ye Faithful\" , \"disabled\" : true } ], \"validation\" : \"anyof\" } Dropdown (multiple) Result [\"Last Christmas\", \"Thats Christmas To Me\"] Array of Strings toggle Toggle Example { \"mode\" : \"fixed\" , \"identifier\" : \"__toggle__\" , \"metadata\" : { \"guiType\" : \"toggle\" , \"name\" : \"NO!\" , \"decription\" : \"What do you dislike?\" }, \"options\" : [ { \"value\" : \"Spiders\" , \"selected\" : true }, { \"value\" : \"All kinds of Bugs (also the ones living in your Computer)\" }, { \"value\" : \"I never dislike anything!\" } ], \"validation\" : \"anyof\" } Toggle Result [\"Spiders\"] Array of Strings slider (single) Slider (single) Example { \"mode\" : \"any\" , \"identifier\" : \"__sliderSingle__\" , \"metadata\" : { \"guiType\" : \"slider\" , \"name\" : \"Temperature\" , \"vertical\" : false , \"decription\" : \"How hot do you like your coffee? (in degrees Celsius)\" }, \"default\" : [ 75 ], \"min\" : 0 , \"max\" : 90 , \"step\" : 10 , \"validation\" : \"range\" } Slider (single) Result 75 Number slider (multiple) Slider (multiple) Example { \"mode\" : \"any\" , \"identifier\" : \"__sliderMultiple__\" , \"metadata\" : { \"guiType\" : \"slider\" , \"name\" : \"random numbers\" , \"vertical\" : true , \"decription\" : \"Choose three random numbers to be output by the container\" }, \"default\" : [ 25 , 50 , 75 ], \"min\" : 0 , \"max\" : 100 , \"step\" : 5 , \"validation\" : \"range\" } Slider (multiple) Result [25, 50, 75] Array of Numbers input_field Input_field Example { \"mode\" : \"any\" , \"identifier\" : \"__inputText__\" , \"metadata\" : { \"guiType\" : \"input_field\" , \"type\" : \"text\" , \"name\" : \"name\" , \"decription\" : \"Enter your name\" }, \"default\" : [ \"\" ], \"validation\" : \"none\" } Input_field Result \"base64:S2F0aHJ5bg\" If the input_field is of type number: Number Else: Prefixed (\"base64:\") and Base64URL-encoded String - is decoded by Websocket API, before it is sent to Backend editor Editor Example { \"mode\" : \"any\" , \"identifier\" : \"__default__\" , \"metadata\" : { \"guiType\" : \"editor\" , \"name\" : \"code\" , \"decription\" : \"Enter some code\" }, \"default\" : [ \"aW50IG1haW4oaW50IGFyZ2MsIGNoYXIgKiphcmd2KSB7IC8vIFByaW50ICdIZWxsbyBXb3JsZCcgfQ\" ], \"validation\" : \"none\" } Editor Result \"base64:aW50IG1haW4oaW50IGFyZ2MsIGNoYXIgKiphcmd2KSB7IC8vIFByaW50ICdIZWxsbyBXb3JsZCcgfQ\" Prefixed (\"base64:\") and Base64URL-encoded String - is decoded by Websocket API, before it is sent to Backend","title":"Parameters: What is input into the Handlebars.js-Template?"},{"location":"developer/computation_task/#evaluation-task","text":"The feature of ViPLab to automatically evaluate student code (correction service) is still possible in ViPLab 3.0. The code needed for evaluation is send to the correction server as a JSON message with the same structure as a Computation Task . The only difference is, that here all parts can be replaced, regardless of there access -settings.","title":"Evaluation Task"},{"location":"developer/computation_template/","text":"Computation Template JSON Message A computation template can be the definition of an Exercise in the context of a learning environment, or a pre-configured research software (stored in a docker image), used to show reproducability of a research work or to reduce complex software environments to specific functionality Examples (informal) Note: // with text following until EOL is a comment, which is not covered by the JSON spec, and should not be contained in message sends in real; but nevertheless it would help, if JSON parsers could just ignore them. C Student Example Computation Template Example using C { \"identifier\" : \"11483f23-95bf-424a-98a5-ee5868c85c3e\" , // uuid, created by a frontend launcher \"version\" : \"3.0.0\" // version of this JSON-spec definition \"metadata\" : // information for frontend { \"displayName\" : \"Aufgabe 1\" , // name of computation template shown in frontend \"description\" : \"Schreiben Sie eine C-Funktion...\" , // short description (could be used // as subtitle, further descriptions in \"parts\"). }, \"environment\" : \"C\" , // important for interpreting configuration \"files\" : // must: at least one array element [ { \"identifier\" : \"22483f42-95bf-984a-98a5-ee9485c85c3e\" , // uuid, for referencing \"path\" : \"code.c\" , // filename on backend \"metadata\" : // information for frontend { \"decription\" : \"Programming exercise to test your knowledge of C\" , \"syntaxHighlighting\" : \"C\" , // optional (default: \"none\") }, \"parts\" : // must: at least one array element [ { \"identifier\" : \"preamble\" , \"access\" : \"visible\" , // it is rendered, but can not be changed \"metadata\" : // what has to be moved to files ? { \"name\" : \"Info: source before your code.\" // name of element in frontend }, \"content\" : \"I2luY2x1ZGUgPHN0ZGlvLmg-Cg\" // source (base64url encoded) // decoded: #include <stdio.h>\\n }, { \"identifier\" : \"codeFromStudent\" , \"access\" : \"modifiable\" , // it can be edited in the frontend \"metadata\" : { \"name\" : \"Fill in your code!\" }, \"content\" : \"dm9pZCBsZWZ0cGFkX2JhcigpIHsgLyogV3JpdGUgY29kZSB0aGF0IHByaW50cyAiYmFyIiBhbmQgYWRkcyB0aGUgcG9zc2liaWxpdHkgdG8gc3BlY2lmeSBhIGZpZWxkLXdpZHRoICovDQoNCn0\" // source (template) // decoded: void leftpad_bar() { /* Write code that prints \"bar\" and adds the possibility to specify a field-width */\\n\\n}\\n }, { \"identifier\" : \"postscript\" , \"access\" : \"visible\" , \"metadata\" : { \"name\" : \"Info: source after your code calling bar() in it.\" }, \"content\" : \"aW50IG1haW4oKSB7IGJhcigpOyByZXR1cm4gMDsgfQ\" // source // decoded: int main() { bar(); return 0; } } ] // parts[] } ], // files[] \"parameters\" : // parameters can be used to supply values at runtime to the configuration [ { \"mode\" : \"fixed\" , // in this section, the parameters can only be of mode fixed \"identifier\" : \"__STEPWIDTH__\" , \"metadata\" : { \"guiType\" : \"dropdown\" , \"name\" : \"fieldwidth\" , \"decription\" : \"Fieldwidth that is used to specify the width of the field of the output. To give an example, if the fieldwidth is 6, the output of bar(6) is padded like this: ' bar'\" , }, \"options\" : [ { \"value\" : \"0.05\" , \"selected\" : true }, { \"value\" : \"0.5\" }, { \"value\" : \"1\" } ], \"validation\" : \"onlyone\" } ], \"configuration\" : { \"compiling.compiler\" : \"gcc\" , // string \"compiling.flags\" : \"-O2 -Wall\" // string \"checking.sources\" : [ \"codeFromStudent\" ], // identifier to parts \"checking.forbiddenCalls\" : \"system execve\" , // forbidden call names separated by WS \"linking.flags\" : \"-lm\" , // string \"running.commandLineArguments\" : \"--stepwidth {{ __STEPWIDTH__ }}\" // mustache template if parameters are used } } Parameters Example Computation Template Example using Container { \"identifier\" : \"11483f23-95bf-424a-98a5-ee5868c85c3f\" , \"version\" : \"3.0.0\" , \"metadata\" : { \"displayName\" : \"Parameters Example\" , \"description\" : \"This is a 'Hello World' example showing the usage of parameters. Please introduce yourself so that the Hello World-Container can print your information...\" , \"viewer\" : [ \"CSV\" , \"ParaView\" , \"Image\" ] }, \"environment\" : \"Container\" , \"files\" : [ { \"identifier\" : \"22483f42-95bf-984a-98a5-ee9485c85c3f\" , \"path\" : \"params.ini\" , \"metadata\" : { \"syntaxHighlighting\" : \"ini\" }, \"parts\" : [ { \"identifier\" : \"f3fc4404-3529-4962-b252-47bc4ddd02a1\" , \"access\" : \"template\" , \"metadata\" : { \"name\" : \"Parameter in part\" }, \"parameters\" : [ { \"mode\" : \"any\" , \"identifier\" : \"__sliderSingle__\" , \"metadata\" : { \"guiType\" : \"slider\" , \"name\" : \"temperature\" , \"vertical\" : false , \"description\" : \"How hot do you like your coffee? (in degrees Celsius) - Tip: Typical Serving Temperature lies between 65 and 70 Degrees\" }, \"default\" : [ 10 ], \"min\" : 0 , \"max\" : 500 , \"step\" : 10 , \"validation\" : \"range\" } ], \"content\" : \"W2NvZmZlZSBwcmVmZXJlbmNlXQpjb2ZmZWVUZW1wZXJhdHVyZT17e19fc2xpZGVyU2luZ2xlX199fQ\" // decoded: // [coffee preference] // coffeeTemperature={{__sliderSingle__}} }, { \"identifier\" : \"ceb051d8-b50c-4814-983a-b9d703cae0c6\" , \"access\" : \"template\" , \"metadata\" : { \"name\" : \"params.ini file part\" }, \"parameters\" : [ { \"mode\" : \"fixed\" , \"identifier\" : \"__checkbox__\" , \"metadata\" : { \"guiType\" : \"checkbox\" , \"name\" : \"Things I like\" , \"description\" : \"Select things you like\" }, \"options\" : [ { \"text\" : \"Programming\" , \"value\" : \"programming\" , \"selected\" : true }, { \"value\" : \"debug\" }, { \"value\" : \"make_plot\" } ], \"validation\" : \"anyof\" }, { \"mode\" : \"fixed\" , \"identifier\" : \"__radioButton__\" , \"metadata\" : { \"guiType\" : \"radio\" , \"name\" : \"Favorite PL\" , \"description\" : \"Select your favorite programming language\" }, \"options\" : [ { \"value\" : \"debug\" }, { \"value\" : \"serial\" , \"selected\" : true }, { \"value\" : \"hpc\" , \"disabled\" : true }, { \"text\" : \"Sssss... Python ...ssssS\" , \"value\" : \"Python\" } ], \"validation\" : \"oneof\" }, { \"mode\" : \"fixed\" , \"identifier\" : \"__dropdownSingle__\" , \"metadata\" : { \"guiType\" : \"dropdown\" , \"name\" : \"Fridge\" , \"description\" : \"How often do look into the fridge a day?\" }, \"options\" : [ { \"value\" : \"Please choose one\" , \"disabled\" : true }, { \"value\" : \"1p\" , \"selected\" : true }, { \"text\" : \"1 a day\" , \"value\" : \"Once a day\" }, { \"value\" : \"1pncmin\" }, { \"value\" : \"2p\" }, { \"value\" : \"2p1c\" } ], \"validation\" : \"oneof\" }, { \"mode\" : \"fixed\" , \"identifier\" : \"__dropdownMultiple__\" , \"metadata\" : { \"guiType\" : \"dropdown\" , \"name\" : \"Dance Time\" , \"description\" : \"To which songs would you dance in the kitchen?\" }, \"options\" : [ { \"value\" : \"Please choose multiple\" , \"disabled\" : true }, { \"text\" : \"Last Christmas (aka the one that drives everybody else crazy)\" , \"value\" : \"Last Christmas\" , \"selected\" : true }, { \"value\" : \"1pnc\" }, { \"value\" : \"1pncmin\" }, { \"value\" : \"2p\" , \"selected\" : true }, { \"value\" : \"2p1c\" , \"disabled\" : true } ], \"validation\" : \"anyof\" }, { \"mode\" : \"fixed\" , \"identifier\" : \"__toggle__\" , \"metadata\" : { \"guiType\" : \"toggle\" , \"name\" : \"NO!\" , \"description\" : \"What do you dislike?\" }, \"options\" : [ { \"value\" : \"verbose\" , \"selected\" : true }, { \"text\" : \"All kinds of Bugs (also the ones living in your Computer)\" , \"value\" : \"All kinds of Bugs\" }, { \"value\" : \"make_plot\" } ], \"validation\" : \"anyof\" }, { \"mode\" : \"any\" , \"identifier\" : \"__sliderMultiple__\" , \"metadata\" : { \"guiType\" : \"slider\" , \"name\" : \"temperature\" , \"vertical\" : true , \"description\" : \"Choose three random numbers to be output by the container\" }, \"default\" : [ 25 , 50 , 75 ], \"min\" : 0 , \"max\" : 100 , \"step\" : 5 , \"validation\" : \"range\" }, { \"mode\" : \"any\" , \"identifier\" : \"__inputTextWOMaxlength__\" , \"metadata\" : { \"guiType\" : \"input_field\" , \"type\" : \"text\" , \"name\" : \"name\" , \"description\" : \"Enter your name\" }, \"default\" : [ \"\" ], \"validation\" : \"pattern\" }, { \"mode\" : \"any\" , \"identifier\" : \"__inputTextWMaxlength__\" , \"metadata\" : { \"guiType\" : \"input_field\" , \"type\" : \"text\" , \"name\" : \"Christmas Wish\" , \"description\" : \"Enter what you wish for at christmas\" }, \"maxlength\" : 200 , \"default\" : [ \"\" ], \"validation\" : \"pattern\" }, { \"mode\" : \"any\" , \"identifier\" : \"__inputNumber__\" , \"metadata\" : { \"guiType\" : \"input_field\" , \"type\" : \"number\" , \"name\" : \"Age\" , \"description\" : \"Enter your current age\" }, \"default\" : [ 10 ], \"min\" : 0 , \"max\" : 500 , \"step\" : 0.1 , \"validation\" : \"range\" } ], \"content\" : \"W2Fib3V0IHlvdV0NCmxpa2VkVGhpbmdzPXt7X19jaGVja2JveF9ffX0NCmZhdm9yaXRlUEw9e3tfX3JhZGlvQnV0dG9uX199fQ0KZnJpZGdlPXt7X19kcm9wZG93blNpbmdsZV9ffX0NCmRhbmNpbmc9e3tfX2Ryb3Bkb3duTXVsdGlwbGVfX319DQpkaXNsaWtlZFRoaW5ncz17e19fdG9nZ2xlX199fQ0KcmFuZG9tTnVtYmVycz17e19fc2xpZGVyTXVsdGlwbGVfX319DQpuYW1lPXt7X19pbnB1dFRleHRXT01heGxlbmd0aF9ffX0NCmNocmlzdG1hc1dpc2g9e3tfX2lucHV0VGV4dFdNYXhsZW5ndGhfX319DQphZ2U9e3tfX2lucHV0TnVtYmVyX199fQ\" // decoded: // [about you] // likedThings={{__checkbox__}} // favoritePL={{__radioButton__}} // fridge={{__dropdownSingle__}} // dancing={{__dropdownMultiple__}} // dislikedThings={{__toggle__}} // randomNumbers={{__sliderMultiple__}} // name={{__inputTextWOMaxlength__}} // christmasWish={{__inputTextWMaxlength__}} // age={{__inputNumber__}} } ] }, { \"identifier\" : \"22483f42-95bf-984a-98a5-ee9485c85c31\" , \"path\" : \"code.json\" , \"metadata\" : { \"syntaxHighlighting\" : \"json\" }, \"parts\" : [ { \"identifier\" : \"f3fc4404-3529-4962-b252-47bc4ddd02a2\" , \"access\" : \"template\" , \"metadata\" : { \"name\" : \"Parameter in part\" }, \"parameters\" : [ { \"mode\" : \"any\" , \"identifier\" : \"__default__\" , \"metadata\" : { \"guiType\" : \"editor\" , \"name\" : \"code\" , \"description\" : \"Enter some code\" }, \"default\" : [ \"aW50IG1haW4oaW50IGFyZ2MsIGNoYXIgKiphcmd2KSB7IA0KLy8gUHJpbnQgJ0hlbGxvIFdvcmxkJyANCn0\" ], // decoded: // { // \"codeSnippet\" : \"{{__default__}}\" // } \"validation\" : \"none\" } ], \"content\" : \"e3t7X19kZWZhdWx0X199fX0\" // decoded: // {{{__default__}}} } ] } ], \"configuration\" : { \"resources.image\" : \"name://viplab/viplab-example-image\" , \"resources.volume\" : \"/data/shared\" , \"resources.memory\" : \"1g\" , \"resources.numCPUs\" : 1 } } Explaining the JSON Format version 3.0.0 Key [--Subkey] Type (a default is marked by italics ) Opt / Must Description Comment AS identifier string (UUID) must the identifier of this computation template can be generated by the frontend launcher version string opt version of the json specification should be given for backwards compatibility metadata struct opt contains information for frontend See metadata json object for details about the object environment one of { \"C\", \"C++\", \"Java\", \"Matlab\", \"Octave\", \"Container\", \"DuMuX\" } must Specifies the environment used for the Computation. It defines language, runtime, libraries and tools files [ {...}, {...}, ... ] must array containing File objects : there has to be at least one element parameters [{...}, {...}, ...] opt Parameters can be used to supply values at runtime to the configuration. Each parameter has a unique identifier (as string) and is a Parameter object . For security reasons free text guiType , i.e., text input field or editor, are not allowed here. The only allowed parameters are those, that have mode set to fixed configuration struct opt/must (depends on environment) Environment specific configurations Different phases can be configured like compiling, checking (for legal function calls in source code), ... configuration --compiling.sources [FILE_ID, FILE_ID, ...] must Array of identifiers of JSON File objects . Explicit compilation (only referenced sources will be compiled). for C, C++, Java ; The frontend should suggest defaults here, e.g. by suited file suffix ('.c', '.cpp', '.java'). name/path (Java) for implicit compiling? check backend? configuration --compiling.compiler string must compiler to be used, e.g. \"gcc\" for C, C++ configuration --compiling.flags string must for C, C++ ; optional for Java CFLAGS for C/C++ ; compile flags for Java e.g. \"gcc\" for C/C++ ; \"-O2\" or \"\" for Java configuration --checking.sources [PART_ID, PART_ID, ...] must if checking should be performed array of identifiers of to be checked sources; given by parts[]{PART_ID} (see below ) for Matlab, Octave, C, Java ; frontend should suggest all \"modifiable\" and \"template\" parts here configuration --checking.allowedCalls string must if checking should be performed for Matlab/Octave : allowed call names separated by WS; only idents (no braces, no func args) for Java : allowed call name expressions separated by WS for Java semantics see Java checking semantics . configuration --checking.forbiddenCalls string must if checking should be performed for C : forbidden call names separated by WS; only idents (no braces, no func args) for Java : forbidden call name expressions separated by WS for C semantics see C checking semantics ); for Java semantics see Java checking semantics . configuration --linking.flags string must LFLAGS for C, C++ ; e.g. \"\" configuration --running.stdinFilename FILE_ID must the file identifier that is passed to Matlab/Octave via standard-in configuration --running.timelimitInSeconds int opt CPU time limit for all environments ; for semantics see Notes to \"timelimitInSeconds\" . configuration --running.commandLineArguments string opt for C, C++, Java : arguments given to main() function; for DuMuX, Container : additional command line args mustache template syntax can be used to transform input values (e.g. of sliders) into CLI arguments (see parameters -attribute) configuration --running.flags string opt flags given to JVM for Java configuration --running.mainClass string opt (if unique) / must (if not unique) class containing \"public static void main(String[] args) {}\" for Java : \"args\" may be another name. If main function is unique, its correct class should be detected automatically. configuration --running.executable string must name of executable to run (as in backend file system) for DuMuX configuration --running.entrypoint string opt executable to run inside the container for Container ; can contain mustache template syntax for injecting PARAM_IDs (see parameters -attribute) configuration --running.intermediateFilesPattern [ REGEX, REGEX, ... ] opt regex-expression in stdout which file is ready to be transferred as intermediate result. The Regex has to return the complete filename as matching group 1 for Container configuration --running.userId int opt user id of the user that writes files inside the container for Container ; needed to set correct permissions configuration --resources.image url must location of the image to be executed for Container . The content can have the following prefixes: file:// stands for a local tar-file on the host viplab is running on (good for local testing) name:// has to be used for an image that is in a publically reachable docker-registry, e.g. dockerhub id:// is for an image-id (sha) of the image (mostly image is already in local image-list and you do not want docker to pull it again - good for local testing) http:// is a \"normal\" url to a tar-file, e.g. a doi or a s3-link configuration --resources.volume string opt path in the container where data is placed for Container we need workaround for kata containers?! configuration --resources.memory string opt ( 64mb ) memory limit for the container for Container configuration --resources.numCPUs int opt number of CPUs for the container for Container default?; kubernetes map to softlimit cpu-shares... configuration --resources.diskSpace int opt Disk space limit for the container for Container metadata JSON object Key Type Opt / Must Description Comment AS displayName string opt name of computation template shown in frontend Makes 'opt' sense for frontend? description string (plain text) opt short description Mostly a few lines. A longer description in different formats can be put in \"elements\" (see below). There is nothing 'below'. Where are descriptions actually used in the frontend? output struct opt Gives information about the output to the Frontend See output json object for details on contained objects output JSON object Key Type Opt / Must Description Comment viewer list containing one or more of { \"Image\", \"ParaView\", \"ViPLabGraphics\", \"CSV\" } opt When given, specific file extension, like \".vtu\" are interpreted by the frontend for displaying results. Otherwise files are only downloadable. csv [ {...}, {...}, ... ] opt Details for displaying csv-files See csv json object for details on contained objects vtk [ {...}, {...}, ... ] opt Details for displaying vtk-files See vtk json object for details on contained objects csv JSON object Note If you have connected CSV-files (meaning the file is generated line-by-line), file n also has to contain all lines that were previously part of file n-1 Caution The first column in the CSV-file always has to be the x-axis! This can not be influenced by the configuration below! Key [--Subkey] Type (a default is marked by italics ) Opt / Must Description Comment AS basename string opt Basename defines connected files: Path of file begins with basename. The file names have to have the following structure: [basename]-[number(s)], e.g. dataovertime-0001 xlabel struct opt Define labels for csv-files xlabel --key string opt key for x-axis given in csv header xlabel --label string opt x-axis label for diagram xlabel --factor string opt Multiply x-values with this factor xlabel --format string opt Format the x-axis values according to format string For information on the avaliable formating take a look at the info given by Plotly ; Example: To format a number to have two decimals, use \"0.2f\" plots struct opt Define datasets: Provide y-axis labels for y-key given in csv For each dataset one diagram is rendered in the result plots --key string opt key for y-axis given in csv header plots --label string opt y-axis label for diagram xlabel --factor string opt Multiply y-values with this factor plots --format string opt Format the y-axis values according to format string For information on the avaliable formating take a look at the info given by Plotly ; Example: To format a number to have two decimals, use \"0.2f\" vtk JSON object Key [--Subkey] Type (a default is marked by italics ) Opt / Must Description Comment AS basename string opt Basename defines connected files: Path of file begins with basename The file names have to have the following structure: [basename]-[number(s)], e.g. case1_single_tracer_matrix-0001 C checking semantics 08.05.2013: Semantics is \"mergeAndInclude\" for both prod systems and devel system (\"element\" unused). \"mergeAndInclude\" (default): Checked will be the merge result of elements after being preprocessed by the C preprocessor, so #include's are allowed and honored. Types have to be defined by the corresponding system headers (e.g. by #include <stdio.h> ) and no predefined standard types should be expected. It's possible to have illegal function calls in source elements (being part of some merge) not being checked (typically teacher code). This means, that during checking it has to and will be looked, in which source element an illegal function call happens, for knowing, if this actually is an error case. \"element\" (unused): Each element has to contain correct C code for itself. In addition to basic types some standard types defined in system headers are predefined (e.g. FILE, size_t). Using types from the outside -- e.g. other elements defining them or #include's in teacher code elements -- does not work. Common for both: no preprocessor commands are allowed in to be checked elements, with only one exception: #include's are allowed in case of \"mergeAndInclude\". The reason for the latter is to give students access to source elements serving as headers - editable for them or not. Functions from system headers could be #include'd, too. The teacher has the responsibility to put unwished system calls like system() and others from libc into \"forbiddenCalls\". Another point of control is to avoid linking with libs, whose functions shouldn't be used (this does not work with libc (automatically linked)). Java checking semantics Matching expressions for use in \"allowedCalls\" and \"forbiddenCalls\" '**' is for pure prefix matching; '*' for more fine-granular matching. Examples of matching expressions: - java.io.* matches all calls to methods in all classes in package, but does not match calls to methods in classes in subpackages; - java.io.** matches all calls to methods in all classes in package, _and_ in all classes in subpackages (if they exist); - java.io.Foo matches all calls to methods in class Foo, _and_ to methods in inner classes; - java.io.Foo.* \" \" \" \" \" \" \" \" , but _not_ to methods in inner classes (eg. to java.io.Foo$Bar.callMe); - java.io.Foo.callMe matches (only) the call to method callMe in Foo; - java.io.Foo$Bar.callMe matches (only) the call to method callMe in inner class Foo$Bar. If used in \"forbiddenCalls\" only (property \"allowedCalls\" missing): - java.io.* forbids all calls to methods in all classes in package, but allows calls to methods in classes in subpackages; - java.io.** forbids all calls to methods in all classes in package, _and_ in all classes in subpackages (if they exist); - java.io.Foo forbids all calls to methods in class Foo, _and_ to methods in inner classes; - java.io.Foo.* \" \" \" \" \" \" \" \" , but _not_ to methods in inner classes (eg. to java.io.Foo$Bar.callMe); - java.io.Foo.callMe forbids (only) the call to method callMe in Foo; - java.io.Foo$Bar.callMe forbids (only) the call to method callMe in inner class Foo$Bar. One or more of these expressions may be given by \"allowedCalls\" and/or \"forbiddenCalls\", separated by WS; e.g. \"forbiddenCalls\": \"java.io.** java.lang.Class\" . An allowed() or forbidden() predicate gives true, - if one of its corresponding matching expressions - an entry in property \"allowedCalls\" resp. \"forbiddenCalls\" - matches, or - if there is no corresponding property given at all. Otherwise it gives false. All calls will be filtered by following composed predicate for getting allowed ones: allowed(call) && ! forbidden(call) <=> ! forbidden(call) && allowed(call) . If only one part is given, this predicate reduces to: allowed(call) resp. ! forbidden(call) . Default for not given part of predicate is - 'no forbidden': ! forbidden(call) == true, and - 'all allowed' : allowed(call) == true. (opposite defaults would render the given part useless). If sets 'allowed' and 'forbidden' - are disjunct -> 'allowed' are allowed and all other forbidden. - have an intersection -> ('allowed' minus intersection) is allowed (all other forbidden). With this logic it is possible to define - a negative list by giving 'forbiddenCalls' only, or - a positive one by giving \"allowedCalls\", or - a mixture of both. Notes to \"timelimitInSeconds\" There is a default CPU time limit (see RLIMIT_CPU of 'man setrlimit') for running or interpreting, which depends on backend configuration. This is good for terminating non-terminating programs, e.g. endless loops. Optional attribute \"timelimitInSeconds\" may lower this default CPU time limit; if it is higher than default, it will be ignored. Setting it to a value as much as possible below default is good for backend response time under high load; especially, if default is configured for performing expensive computations. JSON objects in files An object in array files[] has the following members: Key Type (an enum default is marked by italics ) Opt / Must Description Comment identifier string (UUID) must for later referencing, has to be unique can be autogenerated by frontend path string must path to file Can be absolute (no \"/\") or relative. If relative, the path has to proceed from the value of \"resources.volume\" given in the configuration. Example: absolute - /data/shared/input.txt ; relative - input.txt metadata struct opt contains information for frontend See definition of file metadata parts [{...}, {...}, ...] must array containing part objects . There has to be at least one. file metadata JSON object Key Type (an enum default is marked by italics ) Opt / Must Description Comment syntaxHighlighting string ( text ) opt Mode of the ace editor. List can be found in on github Examples: \"ini\", \"c_cpp\", \"matlab\", \"java\". See also Ace demo description string opt description of the file JSON objects in parts An object in array parts[] has the following members: Key Type (an enum default is marked by italics ) Opt / Must Description Comment AS identifier string must for later referencing, has to be unique can be autogenerated by frontend access one of { \"invisible\", \"visible\", \"modifiable\", \"template\" } must defines the access level of this part for the user see Notes on access levels for more details metadata struct opt contains information mainly for the frontend metadata --name string opt additional description of this part To be shown in the frontend Where? Is it used? parameters array of parameter-objects opt definition of parameters that are injected to content at runtime Any number of parameters can be specified, but the PARAM_ID (identifier) has to be unique. content string must base64url-encoded source code Can contain Handlebars.js expressions with PARAM_IDs (identifiers) if the access type of this part is \"template\". Notes on access levels in parts Four access levels can be specified inside a part: invisible : The content is not shown to a user, i.e., student or re-user of a software. This can be used to hide irrelevant source code from the user, to focus on the important parts, etc... visible : The content is shown to a user, but can not be changed by him/her. modifiable : The content is shown to a user and can be changed. This comprise functions students should implement or input files of a research software that can be changed by a re-user. template : The content is shown to a user, but can not be changed. Additionally, GUI elements like input fields, sliders, buttons, etc. that are specified within the metadata can be set by the user and the template is then filled with these parameter values. This access-level can be used to simplify complex research software configurations for the re-user. JSON object Parameter A parameter-object, has the following members: Key [--Subkey] Type (a default is marked by italics ) Opt / Must Description Comment mode one of { \"any\", \"fixed\" } must specifies type of the parameter used to define the type of validation that is performed identifier string must unique id for this parameter This id must be valid mustach template variable. Example: \" __BINARY__ \" fixed-type parameter JSON object A fixed-type PARAM-object, like __checkbox__ , has the following members: Key [--Subkey] Type (a default is marked by italics ) Opt / Must Description Comment metadata Object must JSON object containing information how to render this parameter See definition of fixed-type JSON object Parameter-Metadata options array of objects must for gui_type \"checkbox\", \"radio\", \"dropdown\", \"toggle\" specifies the allowed values See fixed-type options JSON object for details on contained objects validation one of { \"oneof\", \"minone\", \"anyof\" } must See Parameter validation semantics for details fixed-type JSON object Parameter-Metadata A metadata-object, has the following members: Key [--Subkey] Type (a default is marked by italics ) Opt / Must Description Comment guiType one of { \"checkbox\", \"radio\", \"dropdown\", \"toggle\" } must specifies how the frontend renders the parameter name string must Label for the parameter frontend feature description string must description of the parameter frontend feature fixed-type options JSON object Key [--Subkey] Type (a default is marked by italics ) Opt / Must Description Comment value string must specifies one avaliable value Example: { \"value\" : \"verbose\" } text string opt Text shown besides or as dropdown of the value disabled boolean opt Shows disabled options in frontend Example: { \"value\" : \"Please choose multiple\", \"disabled\" : true } selected boolean opt specifies defaults value/values for frontend the strings have to be part of values ; for \"toogle\" given values mean true description string must description of the parameter frontend feature any-type parameter JSON object A any-type PARAM-object, like __sliderMultiple__ , has the following members: Key [--Subkey] Type (a default is marked by italics ) Opt / Must Description Comment metadata Object must JSON object containing information how to render this parameter See definition of any-type JSON object Parameter-Metadata default array of number(s) or base64url-encoded string(s) opt the default value(s) shown in frontend min number opt minimal allowed value for slider, or input_field with type number max number opt maximal allowed value for slider, or input_field with type number step number opt defines together with min and max attributes a finite set of allowed values for slider, or input_field with type number maxlength number opt Specifies for gui_type \"input_field\" the length of the input validation one of { \"range\", \"pattern\", \"none\" } must See Parameter validation semantics for details pattern string opt A regex pattern for validation any-type JSON object Parameter-Metadata A metadata-object, has the following members: Key [--Subkey] Type (a default is marked by italics ) Opt / Must Description Comment guiType one of { \"editor\" , \"input_field\", \"slider\"} must specifies how the frontend renders the parameter type one of { \"number\", \"text\" } opt Type of the input field name string must Label for the parameter frontend feature vertical boolean opt ( false ) Specifies for gui_type \"slider\" whether it is rendered horizontal or vertical Parameter Validation Semantics Four types of validation are implemented at the moment: oneof : Only one value can be chosen. The value has to be included in options and disabled for the value has to be set to false (is false by default, so disabled can also be missing). minone : One or more values can be chosen. The values have to be included in options and disabled for the value s has to be set to false (is false by default, so disabled can also be missing). anyof : All of the chosen values have to be included in options and disabled for the value s has to be set to false (is false by default, so disabled can also be missing). range : A numerical value is checked whether is is between min and max . If step is given a finite number of possible values is computed and the value has to be within this set. pattern : A regex pattern that the text value has to fulfill. none : If no validation is necessary, because there are no restraints on the value.","title":"Computation Template"},{"location":"developer/computation_template/#computation-template-json-message","text":"A computation template can be the definition of an Exercise in the context of a learning environment, or a pre-configured research software (stored in a docker image), used to show reproducability of a research work or to reduce complex software environments to specific functionality","title":"Computation Template JSON Message"},{"location":"developer/computation_template/#examples-informal","text":"Note: // with text following until EOL is a comment, which is not covered by the JSON spec, and should not be contained in message sends in real; but nevertheless it would help, if JSON parsers could just ignore them.","title":"Examples (informal)"},{"location":"developer/computation_template/#c-student-example","text":"Computation Template Example using C { \"identifier\" : \"11483f23-95bf-424a-98a5-ee5868c85c3e\" , // uuid, created by a frontend launcher \"version\" : \"3.0.0\" // version of this JSON-spec definition \"metadata\" : // information for frontend { \"displayName\" : \"Aufgabe 1\" , // name of computation template shown in frontend \"description\" : \"Schreiben Sie eine C-Funktion...\" , // short description (could be used // as subtitle, further descriptions in \"parts\"). }, \"environment\" : \"C\" , // important for interpreting configuration \"files\" : // must: at least one array element [ { \"identifier\" : \"22483f42-95bf-984a-98a5-ee9485c85c3e\" , // uuid, for referencing \"path\" : \"code.c\" , // filename on backend \"metadata\" : // information for frontend { \"decription\" : \"Programming exercise to test your knowledge of C\" , \"syntaxHighlighting\" : \"C\" , // optional (default: \"none\") }, \"parts\" : // must: at least one array element [ { \"identifier\" : \"preamble\" , \"access\" : \"visible\" , // it is rendered, but can not be changed \"metadata\" : // what has to be moved to files ? { \"name\" : \"Info: source before your code.\" // name of element in frontend }, \"content\" : \"I2luY2x1ZGUgPHN0ZGlvLmg-Cg\" // source (base64url encoded) // decoded: #include <stdio.h>\\n }, { \"identifier\" : \"codeFromStudent\" , \"access\" : \"modifiable\" , // it can be edited in the frontend \"metadata\" : { \"name\" : \"Fill in your code!\" }, \"content\" : \"dm9pZCBsZWZ0cGFkX2JhcigpIHsgLyogV3JpdGUgY29kZSB0aGF0IHByaW50cyAiYmFyIiBhbmQgYWRkcyB0aGUgcG9zc2liaWxpdHkgdG8gc3BlY2lmeSBhIGZpZWxkLXdpZHRoICovDQoNCn0\" // source (template) // decoded: void leftpad_bar() { /* Write code that prints \"bar\" and adds the possibility to specify a field-width */\\n\\n}\\n }, { \"identifier\" : \"postscript\" , \"access\" : \"visible\" , \"metadata\" : { \"name\" : \"Info: source after your code calling bar() in it.\" }, \"content\" : \"aW50IG1haW4oKSB7IGJhcigpOyByZXR1cm4gMDsgfQ\" // source // decoded: int main() { bar(); return 0; } } ] // parts[] } ], // files[] \"parameters\" : // parameters can be used to supply values at runtime to the configuration [ { \"mode\" : \"fixed\" , // in this section, the parameters can only be of mode fixed \"identifier\" : \"__STEPWIDTH__\" , \"metadata\" : { \"guiType\" : \"dropdown\" , \"name\" : \"fieldwidth\" , \"decription\" : \"Fieldwidth that is used to specify the width of the field of the output. To give an example, if the fieldwidth is 6, the output of bar(6) is padded like this: ' bar'\" , }, \"options\" : [ { \"value\" : \"0.05\" , \"selected\" : true }, { \"value\" : \"0.5\" }, { \"value\" : \"1\" } ], \"validation\" : \"onlyone\" } ], \"configuration\" : { \"compiling.compiler\" : \"gcc\" , // string \"compiling.flags\" : \"-O2 -Wall\" // string \"checking.sources\" : [ \"codeFromStudent\" ], // identifier to parts \"checking.forbiddenCalls\" : \"system execve\" , // forbidden call names separated by WS \"linking.flags\" : \"-lm\" , // string \"running.commandLineArguments\" : \"--stepwidth {{ __STEPWIDTH__ }}\" // mustache template if parameters are used } }","title":"C Student Example"},{"location":"developer/computation_template/#parameters-example","text":"Computation Template Example using Container { \"identifier\" : \"11483f23-95bf-424a-98a5-ee5868c85c3f\" , \"version\" : \"3.0.0\" , \"metadata\" : { \"displayName\" : \"Parameters Example\" , \"description\" : \"This is a 'Hello World' example showing the usage of parameters. Please introduce yourself so that the Hello World-Container can print your information...\" , \"viewer\" : [ \"CSV\" , \"ParaView\" , \"Image\" ] }, \"environment\" : \"Container\" , \"files\" : [ { \"identifier\" : \"22483f42-95bf-984a-98a5-ee9485c85c3f\" , \"path\" : \"params.ini\" , \"metadata\" : { \"syntaxHighlighting\" : \"ini\" }, \"parts\" : [ { \"identifier\" : \"f3fc4404-3529-4962-b252-47bc4ddd02a1\" , \"access\" : \"template\" , \"metadata\" : { \"name\" : \"Parameter in part\" }, \"parameters\" : [ { \"mode\" : \"any\" , \"identifier\" : \"__sliderSingle__\" , \"metadata\" : { \"guiType\" : \"slider\" , \"name\" : \"temperature\" , \"vertical\" : false , \"description\" : \"How hot do you like your coffee? (in degrees Celsius) - Tip: Typical Serving Temperature lies between 65 and 70 Degrees\" }, \"default\" : [ 10 ], \"min\" : 0 , \"max\" : 500 , \"step\" : 10 , \"validation\" : \"range\" } ], \"content\" : \"W2NvZmZlZSBwcmVmZXJlbmNlXQpjb2ZmZWVUZW1wZXJhdHVyZT17e19fc2xpZGVyU2luZ2xlX199fQ\" // decoded: // [coffee preference] // coffeeTemperature={{__sliderSingle__}} }, { \"identifier\" : \"ceb051d8-b50c-4814-983a-b9d703cae0c6\" , \"access\" : \"template\" , \"metadata\" : { \"name\" : \"params.ini file part\" }, \"parameters\" : [ { \"mode\" : \"fixed\" , \"identifier\" : \"__checkbox__\" , \"metadata\" : { \"guiType\" : \"checkbox\" , \"name\" : \"Things I like\" , \"description\" : \"Select things you like\" }, \"options\" : [ { \"text\" : \"Programming\" , \"value\" : \"programming\" , \"selected\" : true }, { \"value\" : \"debug\" }, { \"value\" : \"make_plot\" } ], \"validation\" : \"anyof\" }, { \"mode\" : \"fixed\" , \"identifier\" : \"__radioButton__\" , \"metadata\" : { \"guiType\" : \"radio\" , \"name\" : \"Favorite PL\" , \"description\" : \"Select your favorite programming language\" }, \"options\" : [ { \"value\" : \"debug\" }, { \"value\" : \"serial\" , \"selected\" : true }, { \"value\" : \"hpc\" , \"disabled\" : true }, { \"text\" : \"Sssss... Python ...ssssS\" , \"value\" : \"Python\" } ], \"validation\" : \"oneof\" }, { \"mode\" : \"fixed\" , \"identifier\" : \"__dropdownSingle__\" , \"metadata\" : { \"guiType\" : \"dropdown\" , \"name\" : \"Fridge\" , \"description\" : \"How often do look into the fridge a day?\" }, \"options\" : [ { \"value\" : \"Please choose one\" , \"disabled\" : true }, { \"value\" : \"1p\" , \"selected\" : true }, { \"text\" : \"1 a day\" , \"value\" : \"Once a day\" }, { \"value\" : \"1pncmin\" }, { \"value\" : \"2p\" }, { \"value\" : \"2p1c\" } ], \"validation\" : \"oneof\" }, { \"mode\" : \"fixed\" , \"identifier\" : \"__dropdownMultiple__\" , \"metadata\" : { \"guiType\" : \"dropdown\" , \"name\" : \"Dance Time\" , \"description\" : \"To which songs would you dance in the kitchen?\" }, \"options\" : [ { \"value\" : \"Please choose multiple\" , \"disabled\" : true }, { \"text\" : \"Last Christmas (aka the one that drives everybody else crazy)\" , \"value\" : \"Last Christmas\" , \"selected\" : true }, { \"value\" : \"1pnc\" }, { \"value\" : \"1pncmin\" }, { \"value\" : \"2p\" , \"selected\" : true }, { \"value\" : \"2p1c\" , \"disabled\" : true } ], \"validation\" : \"anyof\" }, { \"mode\" : \"fixed\" , \"identifier\" : \"__toggle__\" , \"metadata\" : { \"guiType\" : \"toggle\" , \"name\" : \"NO!\" , \"description\" : \"What do you dislike?\" }, \"options\" : [ { \"value\" : \"verbose\" , \"selected\" : true }, { \"text\" : \"All kinds of Bugs (also the ones living in your Computer)\" , \"value\" : \"All kinds of Bugs\" }, { \"value\" : \"make_plot\" } ], \"validation\" : \"anyof\" }, { \"mode\" : \"any\" , \"identifier\" : \"__sliderMultiple__\" , \"metadata\" : { \"guiType\" : \"slider\" , \"name\" : \"temperature\" , \"vertical\" : true , \"description\" : \"Choose three random numbers to be output by the container\" }, \"default\" : [ 25 , 50 , 75 ], \"min\" : 0 , \"max\" : 100 , \"step\" : 5 , \"validation\" : \"range\" }, { \"mode\" : \"any\" , \"identifier\" : \"__inputTextWOMaxlength__\" , \"metadata\" : { \"guiType\" : \"input_field\" , \"type\" : \"text\" , \"name\" : \"name\" , \"description\" : \"Enter your name\" }, \"default\" : [ \"\" ], \"validation\" : \"pattern\" }, { \"mode\" : \"any\" , \"identifier\" : \"__inputTextWMaxlength__\" , \"metadata\" : { \"guiType\" : \"input_field\" , \"type\" : \"text\" , \"name\" : \"Christmas Wish\" , \"description\" : \"Enter what you wish for at christmas\" }, \"maxlength\" : 200 , \"default\" : [ \"\" ], \"validation\" : \"pattern\" }, { \"mode\" : \"any\" , \"identifier\" : \"__inputNumber__\" , \"metadata\" : { \"guiType\" : \"input_field\" , \"type\" : \"number\" , \"name\" : \"Age\" , \"description\" : \"Enter your current age\" }, \"default\" : [ 10 ], \"min\" : 0 , \"max\" : 500 , \"step\" : 0.1 , \"validation\" : \"range\" } ], \"content\" : \"W2Fib3V0IHlvdV0NCmxpa2VkVGhpbmdzPXt7X19jaGVja2JveF9ffX0NCmZhdm9yaXRlUEw9e3tfX3JhZGlvQnV0dG9uX199fQ0KZnJpZGdlPXt7X19kcm9wZG93blNpbmdsZV9ffX0NCmRhbmNpbmc9e3tfX2Ryb3Bkb3duTXVsdGlwbGVfX319DQpkaXNsaWtlZFRoaW5ncz17e19fdG9nZ2xlX199fQ0KcmFuZG9tTnVtYmVycz17e19fc2xpZGVyTXVsdGlwbGVfX319DQpuYW1lPXt7X19pbnB1dFRleHRXT01heGxlbmd0aF9ffX0NCmNocmlzdG1hc1dpc2g9e3tfX2lucHV0VGV4dFdNYXhsZW5ndGhfX319DQphZ2U9e3tfX2lucHV0TnVtYmVyX199fQ\" // decoded: // [about you] // likedThings={{__checkbox__}} // favoritePL={{__radioButton__}} // fridge={{__dropdownSingle__}} // dancing={{__dropdownMultiple__}} // dislikedThings={{__toggle__}} // randomNumbers={{__sliderMultiple__}} // name={{__inputTextWOMaxlength__}} // christmasWish={{__inputTextWMaxlength__}} // age={{__inputNumber__}} } ] }, { \"identifier\" : \"22483f42-95bf-984a-98a5-ee9485c85c31\" , \"path\" : \"code.json\" , \"metadata\" : { \"syntaxHighlighting\" : \"json\" }, \"parts\" : [ { \"identifier\" : \"f3fc4404-3529-4962-b252-47bc4ddd02a2\" , \"access\" : \"template\" , \"metadata\" : { \"name\" : \"Parameter in part\" }, \"parameters\" : [ { \"mode\" : \"any\" , \"identifier\" : \"__default__\" , \"metadata\" : { \"guiType\" : \"editor\" , \"name\" : \"code\" , \"description\" : \"Enter some code\" }, \"default\" : [ \"aW50IG1haW4oaW50IGFyZ2MsIGNoYXIgKiphcmd2KSB7IA0KLy8gUHJpbnQgJ0hlbGxvIFdvcmxkJyANCn0\" ], // decoded: // { // \"codeSnippet\" : \"{{__default__}}\" // } \"validation\" : \"none\" } ], \"content\" : \"e3t7X19kZWZhdWx0X199fX0\" // decoded: // {{{__default__}}} } ] } ], \"configuration\" : { \"resources.image\" : \"name://viplab/viplab-example-image\" , \"resources.volume\" : \"/data/shared\" , \"resources.memory\" : \"1g\" , \"resources.numCPUs\" : 1 } }","title":"Parameters Example"},{"location":"developer/computation_template/#explaining-the-json-format","text":"version 3.0.0 Key [--Subkey] Type (a default is marked by italics ) Opt / Must Description Comment AS identifier string (UUID) must the identifier of this computation template can be generated by the frontend launcher version string opt version of the json specification should be given for backwards compatibility metadata struct opt contains information for frontend See metadata json object for details about the object environment one of { \"C\", \"C++\", \"Java\", \"Matlab\", \"Octave\", \"Container\", \"DuMuX\" } must Specifies the environment used for the Computation. It defines language, runtime, libraries and tools files [ {...}, {...}, ... ] must array containing File objects : there has to be at least one element parameters [{...}, {...}, ...] opt Parameters can be used to supply values at runtime to the configuration. Each parameter has a unique identifier (as string) and is a Parameter object . For security reasons free text guiType , i.e., text input field or editor, are not allowed here. The only allowed parameters are those, that have mode set to fixed configuration struct opt/must (depends on environment) Environment specific configurations Different phases can be configured like compiling, checking (for legal function calls in source code), ... configuration --compiling.sources [FILE_ID, FILE_ID, ...] must Array of identifiers of JSON File objects . Explicit compilation (only referenced sources will be compiled). for C, C++, Java ; The frontend should suggest defaults here, e.g. by suited file suffix ('.c', '.cpp', '.java'). name/path (Java) for implicit compiling? check backend? configuration --compiling.compiler string must compiler to be used, e.g. \"gcc\" for C, C++ configuration --compiling.flags string must for C, C++ ; optional for Java CFLAGS for C/C++ ; compile flags for Java e.g. \"gcc\" for C/C++ ; \"-O2\" or \"\" for Java configuration --checking.sources [PART_ID, PART_ID, ...] must if checking should be performed array of identifiers of to be checked sources; given by parts[]{PART_ID} (see below ) for Matlab, Octave, C, Java ; frontend should suggest all \"modifiable\" and \"template\" parts here configuration --checking.allowedCalls string must if checking should be performed for Matlab/Octave : allowed call names separated by WS; only idents (no braces, no func args) for Java : allowed call name expressions separated by WS for Java semantics see Java checking semantics . configuration --checking.forbiddenCalls string must if checking should be performed for C : forbidden call names separated by WS; only idents (no braces, no func args) for Java : forbidden call name expressions separated by WS for C semantics see C checking semantics ); for Java semantics see Java checking semantics . configuration --linking.flags string must LFLAGS for C, C++ ; e.g. \"\" configuration --running.stdinFilename FILE_ID must the file identifier that is passed to Matlab/Octave via standard-in configuration --running.timelimitInSeconds int opt CPU time limit for all environments ; for semantics see Notes to \"timelimitInSeconds\" . configuration --running.commandLineArguments string opt for C, C++, Java : arguments given to main() function; for DuMuX, Container : additional command line args mustache template syntax can be used to transform input values (e.g. of sliders) into CLI arguments (see parameters -attribute) configuration --running.flags string opt flags given to JVM for Java configuration --running.mainClass string opt (if unique) / must (if not unique) class containing \"public static void main(String[] args) {}\" for Java : \"args\" may be another name. If main function is unique, its correct class should be detected automatically. configuration --running.executable string must name of executable to run (as in backend file system) for DuMuX configuration --running.entrypoint string opt executable to run inside the container for Container ; can contain mustache template syntax for injecting PARAM_IDs (see parameters -attribute) configuration --running.intermediateFilesPattern [ REGEX, REGEX, ... ] opt regex-expression in stdout which file is ready to be transferred as intermediate result. The Regex has to return the complete filename as matching group 1 for Container configuration --running.userId int opt user id of the user that writes files inside the container for Container ; needed to set correct permissions configuration --resources.image url must location of the image to be executed for Container . The content can have the following prefixes: file:// stands for a local tar-file on the host viplab is running on (good for local testing) name:// has to be used for an image that is in a publically reachable docker-registry, e.g. dockerhub id:// is for an image-id (sha) of the image (mostly image is already in local image-list and you do not want docker to pull it again - good for local testing) http:// is a \"normal\" url to a tar-file, e.g. a doi or a s3-link configuration --resources.volume string opt path in the container where data is placed for Container we need workaround for kata containers?! configuration --resources.memory string opt ( 64mb ) memory limit for the container for Container configuration --resources.numCPUs int opt number of CPUs for the container for Container default?; kubernetes map to softlimit cpu-shares... configuration --resources.diskSpace int opt Disk space limit for the container for Container","title":"Explaining the JSON Format"},{"location":"developer/computation_template/#metadata-json-object","text":"Key Type Opt / Must Description Comment AS displayName string opt name of computation template shown in frontend Makes 'opt' sense for frontend? description string (plain text) opt short description Mostly a few lines. A longer description in different formats can be put in \"elements\" (see below). There is nothing 'below'. Where are descriptions actually used in the frontend? output struct opt Gives information about the output to the Frontend See output json object for details on contained objects","title":"metadata JSON object"},{"location":"developer/computation_template/#output-json-object","text":"Key Type Opt / Must Description Comment viewer list containing one or more of { \"Image\", \"ParaView\", \"ViPLabGraphics\", \"CSV\" } opt When given, specific file extension, like \".vtu\" are interpreted by the frontend for displaying results. Otherwise files are only downloadable. csv [ {...}, {...}, ... ] opt Details for displaying csv-files See csv json object for details on contained objects vtk [ {...}, {...}, ... ] opt Details for displaying vtk-files See vtk json object for details on contained objects","title":"output JSON object"},{"location":"developer/computation_template/#csv-json-object","text":"Note If you have connected CSV-files (meaning the file is generated line-by-line), file n also has to contain all lines that were previously part of file n-1 Caution The first column in the CSV-file always has to be the x-axis! This can not be influenced by the configuration below! Key [--Subkey] Type (a default is marked by italics ) Opt / Must Description Comment AS basename string opt Basename defines connected files: Path of file begins with basename. The file names have to have the following structure: [basename]-[number(s)], e.g. dataovertime-0001 xlabel struct opt Define labels for csv-files xlabel --key string opt key for x-axis given in csv header xlabel --label string opt x-axis label for diagram xlabel --factor string opt Multiply x-values with this factor xlabel --format string opt Format the x-axis values according to format string For information on the avaliable formating take a look at the info given by Plotly ; Example: To format a number to have two decimals, use \"0.2f\" plots struct opt Define datasets: Provide y-axis labels for y-key given in csv For each dataset one diagram is rendered in the result plots --key string opt key for y-axis given in csv header plots --label string opt y-axis label for diagram xlabel --factor string opt Multiply y-values with this factor plots --format string opt Format the y-axis values according to format string For information on the avaliable formating take a look at the info given by Plotly ; Example: To format a number to have two decimals, use \"0.2f\"","title":"csv JSON object"},{"location":"developer/computation_template/#vtk-json-object","text":"Key [--Subkey] Type (a default is marked by italics ) Opt / Must Description Comment AS basename string opt Basename defines connected files: Path of file begins with basename The file names have to have the following structure: [basename]-[number(s)], e.g. case1_single_tracer_matrix-0001","title":"vtk JSON object"},{"location":"developer/computation_template/#c-checking-semantics","text":"08.05.2013: Semantics is \"mergeAndInclude\" for both prod systems and devel system (\"element\" unused). \"mergeAndInclude\" (default): Checked will be the merge result of elements after being preprocessed by the C preprocessor, so #include's are allowed and honored. Types have to be defined by the corresponding system headers (e.g. by #include <stdio.h> ) and no predefined standard types should be expected. It's possible to have illegal function calls in source elements (being part of some merge) not being checked (typically teacher code). This means, that during checking it has to and will be looked, in which source element an illegal function call happens, for knowing, if this actually is an error case. \"element\" (unused): Each element has to contain correct C code for itself. In addition to basic types some standard types defined in system headers are predefined (e.g. FILE, size_t). Using types from the outside -- e.g. other elements defining them or #include's in teacher code elements -- does not work. Common for both: no preprocessor commands are allowed in to be checked elements, with only one exception: #include's are allowed in case of \"mergeAndInclude\". The reason for the latter is to give students access to source elements serving as headers - editable for them or not. Functions from system headers could be #include'd, too. The teacher has the responsibility to put unwished system calls like system() and others from libc into \"forbiddenCalls\". Another point of control is to avoid linking with libs, whose functions shouldn't be used (this does not work with libc (automatically linked)).","title":"C checking semantics"},{"location":"developer/computation_template/#java-checking-semantics","text":"Matching expressions for use in \"allowedCalls\" and \"forbiddenCalls\" '**' is for pure prefix matching; '*' for more fine-granular matching. Examples of matching expressions: - java.io.* matches all calls to methods in all classes in package, but does not match calls to methods in classes in subpackages; - java.io.** matches all calls to methods in all classes in package, _and_ in all classes in subpackages (if they exist); - java.io.Foo matches all calls to methods in class Foo, _and_ to methods in inner classes; - java.io.Foo.* \" \" \" \" \" \" \" \" , but _not_ to methods in inner classes (eg. to java.io.Foo$Bar.callMe); - java.io.Foo.callMe matches (only) the call to method callMe in Foo; - java.io.Foo$Bar.callMe matches (only) the call to method callMe in inner class Foo$Bar. If used in \"forbiddenCalls\" only (property \"allowedCalls\" missing): - java.io.* forbids all calls to methods in all classes in package, but allows calls to methods in classes in subpackages; - java.io.** forbids all calls to methods in all classes in package, _and_ in all classes in subpackages (if they exist); - java.io.Foo forbids all calls to methods in class Foo, _and_ to methods in inner classes; - java.io.Foo.* \" \" \" \" \" \" \" \" , but _not_ to methods in inner classes (eg. to java.io.Foo$Bar.callMe); - java.io.Foo.callMe forbids (only) the call to method callMe in Foo; - java.io.Foo$Bar.callMe forbids (only) the call to method callMe in inner class Foo$Bar. One or more of these expressions may be given by \"allowedCalls\" and/or \"forbiddenCalls\", separated by WS; e.g. \"forbiddenCalls\": \"java.io.** java.lang.Class\" . An allowed() or forbidden() predicate gives true, - if one of its corresponding matching expressions - an entry in property \"allowedCalls\" resp. \"forbiddenCalls\" - matches, or - if there is no corresponding property given at all. Otherwise it gives false. All calls will be filtered by following composed predicate for getting allowed ones: allowed(call) && ! forbidden(call) <=> ! forbidden(call) && allowed(call) . If only one part is given, this predicate reduces to: allowed(call) resp. ! forbidden(call) . Default for not given part of predicate is - 'no forbidden': ! forbidden(call) == true, and - 'all allowed' : allowed(call) == true. (opposite defaults would render the given part useless). If sets 'allowed' and 'forbidden' - are disjunct -> 'allowed' are allowed and all other forbidden. - have an intersection -> ('allowed' minus intersection) is allowed (all other forbidden). With this logic it is possible to define - a negative list by giving 'forbiddenCalls' only, or - a positive one by giving \"allowedCalls\", or - a mixture of both.","title":"Java checking semantics"},{"location":"developer/computation_template/#notes-to-timelimitinseconds","text":"There is a default CPU time limit (see RLIMIT_CPU of 'man setrlimit') for running or interpreting, which depends on backend configuration. This is good for terminating non-terminating programs, e.g. endless loops. Optional attribute \"timelimitInSeconds\" may lower this default CPU time limit; if it is higher than default, it will be ignored. Setting it to a value as much as possible below default is good for backend response time under high load; especially, if default is configured for performing expensive computations.","title":"Notes to \"timelimitInSeconds\""},{"location":"developer/computation_template/#json-objects-in-files","text":"An object in array files[] has the following members: Key Type (an enum default is marked by italics ) Opt / Must Description Comment identifier string (UUID) must for later referencing, has to be unique can be autogenerated by frontend path string must path to file Can be absolute (no \"/\") or relative. If relative, the path has to proceed from the value of \"resources.volume\" given in the configuration. Example: absolute - /data/shared/input.txt ; relative - input.txt metadata struct opt contains information for frontend See definition of file metadata parts [{...}, {...}, ...] must array containing part objects . There has to be at least one.","title":"JSON objects in files"},{"location":"developer/computation_template/#file-metadata-json-object","text":"Key Type (an enum default is marked by italics ) Opt / Must Description Comment syntaxHighlighting string ( text ) opt Mode of the ace editor. List can be found in on github Examples: \"ini\", \"c_cpp\", \"matlab\", \"java\". See also Ace demo description string opt description of the file","title":"file metadata JSON object"},{"location":"developer/computation_template/#json-objects-in-parts","text":"An object in array parts[] has the following members: Key Type (an enum default is marked by italics ) Opt / Must Description Comment AS identifier string must for later referencing, has to be unique can be autogenerated by frontend access one of { \"invisible\", \"visible\", \"modifiable\", \"template\" } must defines the access level of this part for the user see Notes on access levels for more details metadata struct opt contains information mainly for the frontend metadata --name string opt additional description of this part To be shown in the frontend Where? Is it used? parameters array of parameter-objects opt definition of parameters that are injected to content at runtime Any number of parameters can be specified, but the PARAM_ID (identifier) has to be unique. content string must base64url-encoded source code Can contain Handlebars.js expressions with PARAM_IDs (identifiers) if the access type of this part is \"template\".","title":"JSON objects in parts"},{"location":"developer/computation_template/#notes-on-access-levels-in-parts","text":"Four access levels can be specified inside a part: invisible : The content is not shown to a user, i.e., student or re-user of a software. This can be used to hide irrelevant source code from the user, to focus on the important parts, etc... visible : The content is shown to a user, but can not be changed by him/her. modifiable : The content is shown to a user and can be changed. This comprise functions students should implement or input files of a research software that can be changed by a re-user. template : The content is shown to a user, but can not be changed. Additionally, GUI elements like input fields, sliders, buttons, etc. that are specified within the metadata can be set by the user and the template is then filled with these parameter values. This access-level can be used to simplify complex research software configurations for the re-user.","title":"Notes on access levels in parts"},{"location":"developer/computation_template/#json-object-parameter","text":"A parameter-object, has the following members: Key [--Subkey] Type (a default is marked by italics ) Opt / Must Description Comment mode one of { \"any\", \"fixed\" } must specifies type of the parameter used to define the type of validation that is performed identifier string must unique id for this parameter This id must be valid mustach template variable. Example: \" __BINARY__ \"","title":"JSON object Parameter"},{"location":"developer/computation_template/#fixed-type-parameter-json-object","text":"A fixed-type PARAM-object, like __checkbox__ , has the following members: Key [--Subkey] Type (a default is marked by italics ) Opt / Must Description Comment metadata Object must JSON object containing information how to render this parameter See definition of fixed-type JSON object Parameter-Metadata options array of objects must for gui_type \"checkbox\", \"radio\", \"dropdown\", \"toggle\" specifies the allowed values See fixed-type options JSON object for details on contained objects validation one of { \"oneof\", \"minone\", \"anyof\" } must See Parameter validation semantics for details","title":"fixed-type parameter JSON object"},{"location":"developer/computation_template/#fixed-type-json-object-parameter-metadata","text":"A metadata-object, has the following members: Key [--Subkey] Type (a default is marked by italics ) Opt / Must Description Comment guiType one of { \"checkbox\", \"radio\", \"dropdown\", \"toggle\" } must specifies how the frontend renders the parameter name string must Label for the parameter frontend feature description string must description of the parameter frontend feature","title":"fixed-type JSON object Parameter-Metadata"},{"location":"developer/computation_template/#fixed-type-options-json-object","text":"Key [--Subkey] Type (a default is marked by italics ) Opt / Must Description Comment value string must specifies one avaliable value Example: { \"value\" : \"verbose\" } text string opt Text shown besides or as dropdown of the value disabled boolean opt Shows disabled options in frontend Example: { \"value\" : \"Please choose multiple\", \"disabled\" : true } selected boolean opt specifies defaults value/values for frontend the strings have to be part of values ; for \"toogle\" given values mean true description string must description of the parameter frontend feature","title":"fixed-type options JSON object"},{"location":"developer/computation_template/#any-type-parameter-json-object","text":"A any-type PARAM-object, like __sliderMultiple__ , has the following members: Key [--Subkey] Type (a default is marked by italics ) Opt / Must Description Comment metadata Object must JSON object containing information how to render this parameter See definition of any-type JSON object Parameter-Metadata default array of number(s) or base64url-encoded string(s) opt the default value(s) shown in frontend min number opt minimal allowed value for slider, or input_field with type number max number opt maximal allowed value for slider, or input_field with type number step number opt defines together with min and max attributes a finite set of allowed values for slider, or input_field with type number maxlength number opt Specifies for gui_type \"input_field\" the length of the input validation one of { \"range\", \"pattern\", \"none\" } must See Parameter validation semantics for details pattern string opt A regex pattern for validation","title":"any-type parameter JSON object"},{"location":"developer/computation_template/#any-type-json-object-parameter-metadata","text":"A metadata-object, has the following members: Key [--Subkey] Type (a default is marked by italics ) Opt / Must Description Comment guiType one of { \"editor\" , \"input_field\", \"slider\"} must specifies how the frontend renders the parameter type one of { \"number\", \"text\" } opt Type of the input field name string must Label for the parameter frontend feature vertical boolean opt ( false ) Specifies for gui_type \"slider\" whether it is rendered horizontal or vertical","title":"any-type JSON object Parameter-Metadata"},{"location":"developer/computation_template/#parameter-validation-semantics","text":"Four types of validation are implemented at the moment: oneof : Only one value can be chosen. The value has to be included in options and disabled for the value has to be set to false (is false by default, so disabled can also be missing). minone : One or more values can be chosen. The values have to be included in options and disabled for the value s has to be set to false (is false by default, so disabled can also be missing). anyof : All of the chosen values have to be included in options and disabled for the value s has to be set to false (is false by default, so disabled can also be missing). range : A numerical value is checked whether is is between min and max . If step is given a finite number of possible values is computed and the value has to be within this set. pattern : A regex pattern that the text value has to fulfill. none : If no validation is necessary, because there are no restraints on the value.","title":"Parameter Validation Semantics"},{"location":"developer/result/","text":"Result JSON Message To inform frontend about computations in-preparation. Example (informal) Result Message Example { \"type\" : \"result\" , \"content\" : { \"result\" : { \"artifacts\" : [ { \"identifier\" : \"506d791e-18e0-4eb6-b68a-0850e250f63d\" , \"type\" : \"file\" , \"MIMEtype\" : \"application/octet-stream\" , \"content\" : \"W2ludHJvZHVjdGlvbl0NCm5hbWU9S2F0Cg\" , \"path\" : \"input.ini\" } ], \"computation\" : \"0def42c2-8bde-478c-94c3-a1bd278861ed\" , \"identifier\" : \"7620aba7-a345-4858-9a14-50c1ad46689c\" , \"output\" : { \"stderr\" : \"\" , \"stdout\" : \"SGVsbG8sIBtbMDszNW0gS2F0IBtbMG0KCg\" }, \"status\" : \"final\" , \"timestamp\" : \"2022-08-05T09:13:25Z\" } } } Result JSON Object Key Value Type Opt / Must Description Comment type string must Type of the message Set to 'result' content object must Contains a Computation Result JSON Message","title":"Result"},{"location":"developer/result/#result-json-message","text":"To inform frontend about computations in-preparation.","title":"Result JSON Message"},{"location":"developer/result/#example-informal","text":"Result Message Example { \"type\" : \"result\" , \"content\" : { \"result\" : { \"artifacts\" : [ { \"identifier\" : \"506d791e-18e0-4eb6-b68a-0850e250f63d\" , \"type\" : \"file\" , \"MIMEtype\" : \"application/octet-stream\" , \"content\" : \"W2ludHJvZHVjdGlvbl0NCm5hbWU9S2F0Cg\" , \"path\" : \"input.ini\" } ], \"computation\" : \"0def42c2-8bde-478c-94c3-a1bd278861ed\" , \"identifier\" : \"7620aba7-a345-4858-9a14-50c1ad46689c\" , \"output\" : { \"stderr\" : \"\" , \"stdout\" : \"SGVsbG8sIBtbMDszNW0gS2F0IBtbMG0KCg\" }, \"status\" : \"final\" , \"timestamp\" : \"2022-08-05T09:13:25Z\" } } }","title":"Example (informal)"},{"location":"developer/result/#result-json-object","text":"Key Value Type Opt / Must Description Comment type string must Type of the message Set to 'result' content object must Contains a Computation Result JSON Message","title":"Result JSON Object"},{"location":"developer/system_status/","text":"System Status JSON Message To inform frontend about computations in-preparation. Example (informal) System Status Message Example of Type 'info' { \"type\" : \"system-status\" , \"content\" : { \"identifier\" : \"86165eea-14df-4a76-805a-09b21441cbf7\" , \"version\" : \"3.0.0\" , \"computation\" : \"4598393-95bf-409a-98a5-ee375982c3e\" , // uuid of corresponding computation \"status\" : \"info\" , // warning and error, \"timestamp\" : \"2022-04-21T18:21Z\" , // creation time of this message in ISO-8601 \"message\" : \"Docker container is starting\" } } System Status JSON Object Key Value Type Opt / Must Description Comment identifier string (uuid) must Unique System Status ID version string must Version of the json specification used. The major version must match the version of the ComputationTask computation string (uuid) must Identifier of the computation that is currently processed status One of must \"info\": normal status update \"warning\": An unexpected condition was detected during programming \"error\": An error occured during computation If the status is \"error\", the progress bar in the GUI is canceled and the computation can be run again using the run-button timestamp ISO-8601 datetimeString must Timestamp when this status message is generated. Need for ordering of status messages message string must Describes current state of computation For displaying messages in the progress bar in the GUI to keep the user updated","title":"System Status"},{"location":"developer/system_status/#system-status-json-message","text":"To inform frontend about computations in-preparation.","title":"System Status JSON Message"},{"location":"developer/system_status/#example-informal","text":"System Status Message Example of Type 'info' { \"type\" : \"system-status\" , \"content\" : { \"identifier\" : \"86165eea-14df-4a76-805a-09b21441cbf7\" , \"version\" : \"3.0.0\" , \"computation\" : \"4598393-95bf-409a-98a5-ee375982c3e\" , // uuid of corresponding computation \"status\" : \"info\" , // warning and error, \"timestamp\" : \"2022-04-21T18:21Z\" , // creation time of this message in ISO-8601 \"message\" : \"Docker container is starting\" } }","title":"Example (informal)"},{"location":"developer/system_status/#system-status-json-object","text":"Key Value Type Opt / Must Description Comment identifier string (uuid) must Unique System Status ID version string must Version of the json specification used. The major version must match the version of the ComputationTask computation string (uuid) must Identifier of the computation that is currently processed status One of must \"info\": normal status update \"warning\": An unexpected condition was detected during programming \"error\": An error occured during computation If the status is \"error\", the progress bar in the GUI is canceled and the computation can be run again using the run-button timestamp ISO-8601 datetimeString must Timestamp when this status message is generated. Need for ordering of status messages message string must Describes current state of computation For displaying messages in the progress bar in the GUI to keep the user updated","title":"System Status JSON Object"},{"location":"history/","text":"History Some History about the development of ViPLab. February 2019 - September 2022 Further development funded by Deutsche Forschungs\u00adgemeinschaft ( DFG ) in the context of the SusI Project . Title 2 Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Title 3 Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Title 4 Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Title 5 Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.","title":"History"},{"location":"history/#history","text":"Some History about the development of ViPLab.","title":"History"},{"location":"images/test/","text":"Test This is a Test file, to see if the automatic push action works","title":"Test"},{"location":"images/test/#test","text":"This is a Test file, to see if the automatic push action works","title":"Test"},{"location":"images/versioning/","text":"JSON Object Versioning Rules Status: proposed Deciders: Leon Kiefer, Per Pascal Seeland Date: 2020-05-14 Technical Story: https://github.com/VirtualProgrammingLab/documentation/issues/1 Context and Problem Statement The ViPLab Projects defines a set of JSON-objects, which are used in the different components of the project. Since ViPLab itself does not store any data, these objects have to be stored by third party systems. These will be, depending on the context they are used in either LMS (like ILIAS) or data repositories (like dataverse). There needs to be a way to identify the version of the different objects stored by the third party system to allow e.g. upgrading/migrating the different components. Decision Drivers Provide a way to identify the version of the objects and also provide a path for e.g. upgrading the API endpoints used by those systems. Considered Options Version all endpoints, but not the objects Version all objects, but not the endpoints Version parts of the objects and all of the endpoints. Version all objects and all of the endpoints. Decision Outcome It has been decided to version all long living objects, and all endpoints. The reason for requiring all objects to have version tags is for consistency reasons. Endpoints will only accept objects versions of one major version. Breaking changes will require to define a new version. Incremental updates, which only extend the object are allowed. All systems are expected to handle these incremental updates gracefully. This means that a version 3.1.x message returned by the api must be accept by a 3.0.x client. The additional information contained by the api may be discarded. The same rules apply when a 3.1.x client talks to a 3.0.x api. The api will process the message according to the 3.0.x rules and extra information might be discarded. The client has to determine the correct endpoint versions to use. When the client will use a ComputationTemplate with version 3.x.x the corresponding websocket api will be ws://example.com/v3/computation. All other messages used in any further communication between the websocket-api and the client are also expected to be version 3.x.x. There is no possiblity to mix different versions. If a client wants to use a v4 api, he has to reconnect to the correct endpoint at ws://example.com/v4/computation The objects have been devided into three groups: - Long living object: ComputationTemplate, ComputationTask and ComputationResult - Wrappers: Computation - Message Types: CreateComputation and Result All long living objects are expected to be stored by clients and have version attribute on their top level of the json object, making it easy to get the information. Wrappers only exist during the communication between the client and the api and thus will not contain any version information, as it can be derived from the version of the api version they are being used with. Their only functionality is to group long living objects during a request. Messages Types are the messages used for the communication of the client with the websocket api. Like the wrappers they belong to a specific endpoint version and are also not versioned. Positive Consequences Providing version information allows api and the client to be updated independently. It also allows the objects being held by the client to be easily identified without the need to either store this information somewhere external, where is might get lost or require some method to identify it based on the attributes available. Negative Consequences The version needs to stored on all objects, which requires additional space and bandwidth. Also this information needs to be processed in the endpoints. But this in neglactable considered to the need of upgrading different systems of different third party users at once. Pros and Cons of the Options Versioning either only the endpoints would still cause the issue, that a client needs to keep track of which implicit version an object has, to make sure he picks the right endpoint. This might also lead to the fact, that one might try to send the data to the wrong endpoint, since it is not known where it should belong. Only versioning the endpoints would require to add a lot of version identification cold on the api side, which should be avoided. Between the last to options, the only difference is, that the actions wrappers are not being versioned. This tradeoff has been made due to the fact, that they should never be stored somewhere and that they are considered stable for one api version. Adding actions or changing the wrappers itself will cause a upgrade of the api version. Links","title":"JSON Object Versioning Rules"},{"location":"images/versioning/#json-object-versioning-rules","text":"Status: proposed Deciders: Leon Kiefer, Per Pascal Seeland Date: 2020-05-14 Technical Story: https://github.com/VirtualProgrammingLab/documentation/issues/1","title":"JSON Object Versioning Rules"},{"location":"images/versioning/#context-and-problem-statement","text":"The ViPLab Projects defines a set of JSON-objects, which are used in the different components of the project. Since ViPLab itself does not store any data, these objects have to be stored by third party systems. These will be, depending on the context they are used in either LMS (like ILIAS) or data repositories (like dataverse). There needs to be a way to identify the version of the different objects stored by the third party system to allow e.g. upgrading/migrating the different components.","title":"Context and Problem Statement"},{"location":"images/versioning/#decision-drivers","text":"Provide a way to identify the version of the objects and also provide a path for e.g. upgrading the API endpoints used by those systems.","title":"Decision Drivers"},{"location":"images/versioning/#considered-options","text":"Version all endpoints, but not the objects Version all objects, but not the endpoints Version parts of the objects and all of the endpoints. Version all objects and all of the endpoints.","title":"Considered Options"},{"location":"images/versioning/#decision-outcome","text":"It has been decided to version all long living objects, and all endpoints. The reason for requiring all objects to have version tags is for consistency reasons. Endpoints will only accept objects versions of one major version. Breaking changes will require to define a new version. Incremental updates, which only extend the object are allowed. All systems are expected to handle these incremental updates gracefully. This means that a version 3.1.x message returned by the api must be accept by a 3.0.x client. The additional information contained by the api may be discarded. The same rules apply when a 3.1.x client talks to a 3.0.x api. The api will process the message according to the 3.0.x rules and extra information might be discarded. The client has to determine the correct endpoint versions to use. When the client will use a ComputationTemplate with version 3.x.x the corresponding websocket api will be ws://example.com/v3/computation. All other messages used in any further communication between the websocket-api and the client are also expected to be version 3.x.x. There is no possiblity to mix different versions. If a client wants to use a v4 api, he has to reconnect to the correct endpoint at ws://example.com/v4/computation The objects have been devided into three groups: - Long living object: ComputationTemplate, ComputationTask and ComputationResult - Wrappers: Computation - Message Types: CreateComputation and Result All long living objects are expected to be stored by clients and have version attribute on their top level of the json object, making it easy to get the information. Wrappers only exist during the communication between the client and the api and thus will not contain any version information, as it can be derived from the version of the api version they are being used with. Their only functionality is to group long living objects during a request. Messages Types are the messages used for the communication of the client with the websocket api. Like the wrappers they belong to a specific endpoint version and are also not versioned.","title":"Decision Outcome"},{"location":"images/versioning/#positive-consequences","text":"Providing version information allows api and the client to be updated independently. It also allows the objects being held by the client to be easily identified without the need to either store this information somewhere external, where is might get lost or require some method to identify it based on the attributes available.","title":"Positive Consequences"},{"location":"images/versioning/#negative-consequences","text":"The version needs to stored on all objects, which requires additional space and bandwidth. Also this information needs to be processed in the endpoints. But this in neglactable considered to the need of upgrading different systems of different third party users at once.","title":"Negative Consequences"},{"location":"images/versioning/#pros-and-cons-of-the-options","text":"Versioning either only the endpoints would still cause the issue, that a client needs to keep track of which implicit version an object has, to make sure he picks the right endpoint. This might also lead to the fact, that one might try to send the data to the wrong endpoint, since it is not known where it should belong. Only versioning the endpoints would require to add a lot of version identification cold on the api side, which should be avoided. Between the last to options, the only difference is, that the actions wrappers are not being versioned. This tradeoff has been made due to the fact, that they should never be stored somewhere and that they are considered stable for one api version. Adding actions or changing the wrappers itself will cause a upgrade of the api version.","title":"Pros and Cons of the Options"},{"location":"images/versioning/#links","text":"","title":"Links"},{"location":"user/","text":"User Guide You are a scientist that wants to pubicize reseach software? Click here to find a tutorial on how to do that: Tutorial You are using the Frontend to generate a Computation Template, but there are validation errors? Click here to see the most commom validation errors and how to resolve them: Common Validation Errors You want to inspect and try out software that was uploaded to a research data management system? Click here, to learn more about the ViPLab Frontend: ViPLab Frontend You are using ViPLab in ILIAS and need an introduction? Click here to find a description on how to create exercises using ViPlab in ILIAS: ViPLab in ILIAS You want to use ViPLab in DaRUS and need an introduction? Click here to find a description on how to create computation templates and reproduce results using ViPlab in DaRUS: ViPLab in DaRUS","title":"User Guide"},{"location":"user/#user-guide","text":"You are a scientist that wants to pubicize reseach software? Click here to find a tutorial on how to do that: Tutorial You are using the Frontend to generate a Computation Template, but there are validation errors? Click here to see the most commom validation errors and how to resolve them: Common Validation Errors You want to inspect and try out software that was uploaded to a research data management system? Click here, to learn more about the ViPLab Frontend: ViPLab Frontend You are using ViPLab in ILIAS and need an introduction? Click here to find a description on how to create exercises using ViPlab in ILIAS: ViPLab in ILIAS You want to use ViPLab in DaRUS and need an introduction? Click here to find a description on how to create computation templates and reproduce results using ViPlab in DaRUS: ViPLab in DaRUS","title":"User Guide"},{"location":"user/darus/","text":"ViPLab in DaRUS This is how you can use ViPLab in DaRUS... Creating a Computation Template in a Dataset Create a Computation Template in DaRUS Reproduce a Result using ViPLab in DaRUS Inspect a Computation Template in DaRUS","title":"ViPLab In DaRUS"},{"location":"user/darus/#viplab-in-darus","text":"This is how you can use ViPLab in DaRUS...","title":"ViPLab in DaRUS"},{"location":"user/darus/#creating-a-computation-template-in-a-dataset","text":"Create a Computation Template in DaRUS","title":"Creating a Computation Template in a Dataset"},{"location":"user/darus/#reproduce-a-result-using-viplab-in-darus","text":"Inspect a Computation Template in DaRUS","title":"Reproduce a Result using ViPLab in DaRUS"},{"location":"user/frontend/","text":"ViPLab Frontend This Page will give you an Overview over the ViPLab Frontend Overview ViPLab Frontend Parameters Parameters: As Form ViPLab Frontend - Parameters As Form Parameters: As File ViPLab Frontend - Parameters As File Results Stdout / Stderr Tab ViPLab Frontend - Stdout Files Tab ViPLab Frontend - Files Tab Text ViPLab Frontend - Text Images ViPLab Frontend - Images ViPLab Graphics ViPLab Frontend - ViPLab Graphics CSVs ViPLab Frontend - CSVs VTKs ViPLab Frontend - VTKs Downloads Tab ViPLab Frontend - Downloads","title":"Frontend"},{"location":"user/frontend/#viplab-frontend","text":"This Page will give you an Overview over the ViPLab Frontend","title":"ViPLab Frontend"},{"location":"user/frontend/#overview","text":"ViPLab Frontend","title":"Overview"},{"location":"user/frontend/#parameters","text":"","title":"Parameters"},{"location":"user/frontend/#parameters-as-form","text":"ViPLab Frontend - Parameters As Form","title":"Parameters: As Form"},{"location":"user/frontend/#parameters-as-file","text":"ViPLab Frontend - Parameters As File","title":"Parameters: As File"},{"location":"user/frontend/#results","text":"","title":"Results"},{"location":"user/frontend/#stdout-stderr-tab","text":"ViPLab Frontend - Stdout","title":"Stdout / Stderr Tab"},{"location":"user/frontend/#files-tab","text":"ViPLab Frontend - Files Tab","title":"Files Tab"},{"location":"user/frontend/#text","text":"ViPLab Frontend - Text","title":"Text"},{"location":"user/frontend/#images","text":"ViPLab Frontend - Images","title":"Images"},{"location":"user/frontend/#viplab-graphics","text":"ViPLab Frontend - ViPLab Graphics","title":"ViPLab Graphics"},{"location":"user/frontend/#csvs","text":"ViPLab Frontend - CSVs","title":"CSVs"},{"location":"user/frontend/#vtks","text":"ViPLab Frontend - VTKs","title":"VTKs"},{"location":"user/frontend/#downloads-tab","text":"ViPLab Frontend - Downloads","title":"Downloads Tab"},{"location":"user/ilias/","text":"ViPLab in ILIAS TODO...","title":"ViPLab In ILIAS"},{"location":"user/ilias/#viplab-in-ilias","text":"TODO...","title":"ViPLab in ILIAS"},{"location":"user/tutorial/","text":"Tutorial Situation You have done some research and want to make the code you created available to other scientists, so they can take a better look at your results. For this, ViPLab was integrated into your institutions management system for research data (see Chapter on Integration ) Steps Create a Docker Container of your Research Software, that can be used by ViPLab Write a Computation Template See the Result in the ViPLab Frontend Easy Example For this Tutorial we have created an easy example code , that just outputs information that was passed to the script using an INI-file and a C-file. For the last seven lines, some example output is copied inside the docker container, such that they are sent back as part of the result. The python script looks like this: run.py import configparser import shutil import os cwd = os . getcwd () config = configparser . ConfigParser ( allow_no_value = True ) config_file = cwd + '/data/shared/params.ini' config . read ( config_file ) print ( \"Your name is \\033 [0;35m\" , config [ 'about you' ][ 'name' ], \" \\033 [0m\" ) print ( \"Your current age is\" , config [ 'about you' ][ 'age' ]) print ( \"Your Christmas Wish is:\" , config [ 'about you' ][ 'christmasWish' ]) print ( \"How hot do you like to drink your Coffee?\" , config [ 'coffee preference' ][ 'coffeeTemperature' ]) print ( \"You like: \\033 [0;32m\" , config [ 'about you' ][ 'likedThings' ], \" \\033 [0m\" ) print ( \"Your favorite Programming Language is\" , config [ 'about you' ][ 'favoritePL' ]) print ( \"Your look in the frige:\" , config [ 'about you' ][ 'fridge' ]) print ( \"You would dance in the kitchen to:\" , config [ 'about you' ][ 'dancing' ]) print ( \"You dislike: \\033 [0;31m\" , config [ 'about you' ][ 'dislikedThings' ], \" \\033 [0m\" ) print ( \"Your three random numbers are:\" , config [ 'about you' ][ 'randomNumbers' ]) print ( \"You are an earthling?\" , config [ 'about you' ][ 'earthling' ]) print ( \"Muuuuh:\" , config [ 'about you' ][ 'muh' ]) code_file = cwd + '/data/shared/code.c' f = open ( code_file , \"r\" ) codeSnippet = f . read () print ( \"The Code you entered:\" ) print ( codeSnippet ) f . close () if config [ 'about you' ][ 'earthling' ] == 'true' : shutil . copyfile ( cwd + \"/data/output/earth.vtp\" , cwd + \"/data/shared/earth.vtp\" ) if config [ 'about you' ][ 'muh' ] == 'true' : shutil . copyfile ( cwd + \"/data/output/cow.vtp\" , cwd + \"/data/shared/cow.vtp\" ) shutil . copyfile ( cwd + \"/data/output/coffee-temp.csv\" , cwd + \"/data/shared/coffee-temp.csv\" ) shutil . copyfile ( cwd + \"/data/output/coffee-consumption-00000.csv\" , cwd + \"/data/shared/coffee-consumption-00000.csv\" ) shutil . copyfile ( cwd + \"/data/output/coffee-consumption-00001.csv\" , cwd + \"/data/shared/coffee-consumption-00001.csv\" ) shutil . copyfile ( cwd + \"/data/output/coffee-consumption-00002.csv\" , cwd + \"/data/shared/coffee-consumption-00002.csv\" ) shutil . copyfile ( cwd + \"/data/output/coffee-consumption-00003.csv\" , cwd + \"/data/shared/coffee-consumption-00003.csv\" ) shutil . copyfile ( cwd + \"/data/output/coffee.jpg\" , cwd + \"/data/shared/image-coffee.jpg\" ) shutil . copyfile ( cwd + \"/data/output/dance.png\" , cwd + \"/data/shared/image-dance.png\" ) shutil . copyfile ( cwd + \"/data/output/uris.txt\" , cwd + \"/data/shared/uris.txt\" ) shutil . copyfile ( cwd + \"/data/shared/params.ini\" , cwd + \"/data/shared/input.ini\" ) shutil . copyfile ( cwd + \"/data/shared/code.c\" , cwd + \"/data/shared/input.c\" ) An example for the input-file called params.ini could look like this: params.ini [coffee preference] coffeeTemperature = 75 [about you] likedThings = programming,music,books favoritePL = Java fridge = never dancing = Last Christmas dislikedThings = Spiders randomNumbers = 25,50,75 name = Kathryn christmasWish = COFFEE! In that nebula! age = 36 earthling = false muh = true Additionally the the input-file called code.c could look like this: code.c int main ( int argc , char ** argv ) { // Print 'Hello World' } Tip Remember to move to the correct directory using cd [path-to-directory]/viplab-example-docker , meaning the freshly cloned example-repository ! To try out how the script works, run run.py : Calling... python run.py ... will result in the following output on the console: Your name is Kathryn Your current age is 36 Your Christmas Wish is: COFFEE! In that nebula! How hot do you like to drink your Coffee? 75 You like: programming,music,books Your favorite Programming Language is Java Your look in the frige: never You would dance in the kitchen to: Last Christmas You dislike: Spiders Your three random numbers are: 25,50,75 You are an earthling? false Muuuuh: true The Code you entered: int main(int argc, char **argv) { // Print 'Hello World' } 1. Create a Docker Container of your Research Software, that can be used by ViPLab If you are not familliar with Docker, follow this link to the official website to find the right Download for your system and take a look at the docs: Docker Website . There is also a first introduction to Docker available, with a few explainations and an image to try out. To create and runs your first Docker sample application, you can follow this Tutorial . After you set up Docker, you can start writing a Dockerfile for your research software. The file is placed in the same folder as your code. For the example code above, the Dockerfile would look like this: Dockerfile FROM python:slim COPY *.py /data/bin/ COPY earth.vtp /data/output/earth.vtp COPY cow.vtp /data/output/cow.vtp COPY coffee-temp.csv /data/output/coffee-temp.csv COPY coffee-consumption-00000.csv /data/output/coffee-consumption-00000.csv COPY coffee-consumption-00001.csv /data/output/coffee-consumption-00001.csv COPY coffee-consumption-00002.csv /data/output/coffee-consumption-00002.csv COPY coffee-consumption-00003.csv /data/output/coffee-consumption-00003.csv COPY coffee.jpg /data/output/coffee.jpg COPY dance.png /data/output/dance.png COPY uris.txt /data/output/uris.txt CMD [ \"python\" , \"/data/bin/run.py\" ] Explaination of the Dockerfile First the latest Ubuntu-Docker-Image is selected as a starting point. After this, our files are copied to specific folders inside the container. Then run.py is being executed. After creating the file, open a terminal and go to the directory where your files are located, if you haven't done so, yet. To build the container image, run the following command: docker build -t viplab/viplab-example-image . After the build is finished, you can now start the container using... Tip If you are on Windows, please use Powershell to execute the run command docker run -v ${PWD}/shared:/data/shared -it viplab/viplab-example-image ... after which you will see the output shown in section Easy Example . 2. Write a Computation Template To execute the software using ViPLab, a so called Computation Template is needed. It is a JSON-file in which you not only define, how your software is executed, but also how the result will be displayed and generally what a user will see and what can be modified by him or her before executing your software. To write a Computation Template you have to make several considerations. First, as the example is run using Docker, you have to set the environment to Container. Then you have to define how the application is run in the configuration -section of the json. Here, you set the image to execute. Additionally, other configuration-parameters for Docker can be set. Define how to run the application { ... \"environment\" : \"Container\" , ... \"configuration\" : { \"resources.image\" : \"name://viplab/viplab-example-image\" , \"resources.volume\" : \"/data/shared\" , \"resources.memory\" : \"1g\" , \"resources.numCPUs\" : 1 } } You can also use the Frontend to set these values: ViPLab Frontend showing the Configuration of the Computation Template Before defining the input, let's set how the results will be displayed in the output -object inside the metadata -section. Using the array viewer , you can set whether CSV-files, ParaView-files, ViPLabGraphics and Images should be displayed in the result, or if they should only be downloadable. As the result of our Container contains Images, CSVs and ParaView-files, the respective values are set in the array. Further, connected result files can be defined with CSV- and ParaView-files. In this example, there are connected CSV-files, so the csv -object is added additionally. The CSV-files contain the mean of cups of coffee per day (x) over the last few years for women (y0) and men (y1), as an example, you can see the content of coffee-consumption-0003.csv: coffee-consuption-0003.csv year,women,men 2019,16,4 2020,12,3 2021,8,2 2022,6,1 In each file one data-point is added, e.g. coffee-consumption-0000.csv contains the data for 2019, coffee-consumption-0001.csv contains the data for 2019 and 2020 and so on. As you can see, the example-files start with the same basename \"coffee-consumption\", that is added to the object. Now labels, factor and format for the x-axis can be set. As there are two y-values, one for women and one for men, we decide that two plots should be displayed. They are defined and configured using the plots -array. The described output-configuration can be seen below: Define how the result will be displayed { ... \"metadata\" : { \"displayName\" : \"Parameters Example\" , \"description\" : \"This is a 'Hello World' example showing the usage of parameters. Please introduce yourself so that the Hello World-Container can print your information...\" , \"output\" : { \"viewer\" : [ \"CSV\" , \"ParaView\" , \"Image\" ], \"csv\" : [ { \"basename\" : \"coffee-consumption\" , \"xlabel\" : { \"key\" : \"year\" , \"label\" : \"Time in years\" , \"format\" : \".0d\" }, \"plots\" : [ { \"key\" : \"women\" , \"label\" : \"Cups of Coffee per Woman\" }, { \"key\" : \"men\" , \"label\" : \"Cups of Coffee per Man\" } ] } ] } } ... } This is how you can define the output using the Frontend: ViPLab Frontend showing the Output-Configuration of the Computation Template For the Template, you need all the input for your application: Commandline arguments and input-files. Using the input-files, you can also let the users make changes to code. Files can consist of multiple parts. In a part, you can also show code to the user, that can't be modified, to give the user more information, by setting the \"access\" to \"visible\". Code can be modified by setting \"access\" to \"modifiable\", or hidden by \"invisible\". If you want the user to input their changes by using form-elements, for example such that non-programmers can also try out your application, this can be done by setting \"access\" to \"template\". Then you can choose form-elements for value-selection, just as you can do it for commandline arguments. As an example: For the selection of numbers, you could use an input-field of type number or a slider. To select multiple text-values, you can use either checkbox or a dropdown and to give the user more freedom, you can also choose an input-field with type text or an editor for generating the necessary input. To input the user changes into your program, the \"content\" of the parts can be set as a Handlebars.js template. For the easy example, this feature is used to generate both input files: params.ini and code.c . In this case, params.ini was split into two parts that is later merged to one file internally by ViPLab. Using a handlebars expression, one can replace parts of the template with user input, when it is executed. In this case {{__sliderSingle__}} is replaced by the input from the user. params.ini Part 1 as Handlebars.js-Template [coffee preference] coffeeTemperature = {{__sliderSingle__}} The second part of the params.ini -Template is more complicated, as the input contains lists. For more detailed information on each handlebars functionality visit the link above. For example using each , one can iterate over an array, if enables one to make conditionals and @last helps you to refer to the last item of an array. To illustrate this a bit better, let's take a look at the line likedThings={{#each __checkbox__}}{{#if @last}}{{.}}{{else}}{{.}}, {{/if}}{{/each}} inside the template. The likedThings can have multiple values and as seen above, it has to be a list of items separated by a comma: likedThings=programming,music,books . In this example, we decided to supply a few values to the users using a checkbox, such that they can select from a limited number of items. This also prevents the user from entering incorrect or dangerous (as in malicious) input. As explained in Computation Task , the output of a checkbox-element consists of an array of strings. This array needs to be converted to a comma-separated list. params.ini Part 2 as Handlebars.js-Template [about you] likedThings = {{#each __checkbox__}}{{#if @last}}{{.}}{{else}}{{.}}, {{/if}}{{/each}} favoritePL = {{__radioButton__}} fridge = {{__dropdownSingle__}} dancing = {{#each __dropdownMultiple__}}{{#if @last}}{{.}}{{else}}{{.}}, {{/if}}{{/each}} dislikedThings = {{#each __toggle__}}{{#if @last}}{{.}}{{else}}{{.}}, {{/if}}{{/each}} randomNumbers = {{#each __sliderMultiple__}}{{#if @last}}{{.}}{{else}}{{.}}, {{/if}}{{/each}} name = {{{__inputTextWOMaxlength__}}} christmasWish = {{__inputTextWMaxlength__}} age = {{__inputNumber__}} earthling = {{__earth__}} muh = {{__cow__}} code.c as Handlebars.js-Template {{{__default__}}} All these Handlebars-templates need to be added the the content of the parts as Base64url-encoded strings. All of this, of course can be done by just writing the JSON using a text-editor, but the ViPLab Frontend can also be used for this. For this, there is the feature of a GUI Creator integrated in the Frontend. To add files, parts of files, commandline arguments and specific GUI elements to set parameters, you have to drag and drop them from the left panel to the middle. By seleting on one component on the left by clicking and holding it, the middle displays colors where you can drop the component (green for dropable and red for not dropable). ViPLab Frontend showing the Dragging and Dropping of Components By clicking on the added components in the middle, you can configure them on the right. On the left you can also see, which components can now also be added. ViPLab Frontend showing the Modification of Components After adding a part to the first file, as seen in the last GIF, you can further configure it and add content to it, as previously described above. ViPLab Frontend showing the Modification of Parts Repeat these steps with the remaining components. This will then result in the following: ViPLab Frontend showing the finished Computation Template After finishing the template, you can validate, preview and download the Computation Template: ViPLab Frontend showing the Validation and Preview of the Computation Template Here, you can see the Copmutation Template as JSON, asking for the input of the user: Computation Template of the Example { \"identifier\" : \"11483f23-95bf-424a-98a5-ee5868c85c3f\" , \"version\" : \"3.0.0\" , \"metadata\" : { \"displayName\" : \"Parameters Example\" , \"description\" : \"This is a 'Hello World' example showing the usage of parameters. Please introduce yourself so that the Hello World-Container can print your information...\" , \"output\" : { \"viewer\" : [ \"CSV\" , \"ParaView\" , \"Image\" ], \"csv\" : [ { \"basename\" : \"coffee-consumption\" , \"xlabel\" : { \"key\" : \"year\" , \"label\" : \"Time in years\" , \"format\" : \".0d\" }, \"plots\" : [ { \"key\" : \"women\" , \"label\" : \"Cups of Coffee per Woman\" }, { \"key\" : \"men\" , \"label\" : \"Cups of Coffee per Man\" } ] } ] } }, \"environment\" : \"Container\" , \"files\" : [ { \"identifier\" : \"22483f42-95bf-984a-98a5-ee9485c85c3f\" , \"path\" : \"params.ini\" , \"metadata\" : { \"syntaxHighlighting\" : \"ini\" }, \"parts\" : [ { \"identifier\" : \"f3fc4404-3529-4962-b252-47bc4ddd02a1\" , \"access\" : \"template\" , \"metadata\" : { \"name\" : \"Parameter in part\" }, \"parameters\" : [ { \"mode\" : \"any\" , \"identifier\" : \"__sliderSingle__\" , \"metadata\" : { \"guiType\" : \"slider\" , \"name\" : \"Temperature\" , \"vertical\" : false , \"description\" : \"How hot do you like your coffee? (in degrees Celsius) - Tip: Typical Serving Temperature lies between 65 and 70 Degrees\" }, \"default\" : [ 75 ], \"min\" : 0 , \"max\" : 90 , \"step\" : 5 , \"validation\" : \"range\" } ], \"content\" : \"W2NvZmZlZSBwcmVmZXJlbmNlXQpjb2ZmZWVUZW1wZXJhdHVyZT17e19fc2xpZGVyU2luZ2xlX199fQ\" }, { \"identifier\" : \"ceb051d8-b50c-4814-983a-b9d703cae0c6\" , \"access\" : \"template\" , \"metadata\" : { \"name\" : \"params.ini file part\" }, \"parameters\" : [ { \"mode\" : \"fixed\" , \"identifier\" : \"__checkbox__\" , \"metadata\" : { \"guiType\" : \"checkbox\" , \"name\" : \"Things I like\" , \"description\" : \"Select things you like\" }, \"options\" : [ { \"text\" : \"Programming\" , \"value\" : \"programming\" , \"selected\" : true }, { \"value\" : \"music\" }, { \"value\" : \"books\" } ], \"validation\" : \"minone\" }, { \"mode\" : \"fixed\" , \"identifier\" : \"__radioButton__\" , \"metadata\" : { \"guiType\" : \"radio\" , \"name\" : \"Favorite PL\" , \"description\" : \"Select your favorite programming language\" }, \"options\" : [ { \"value\" : \"C\" }, { \"value\" : \"Java\" , \"selected\" : true }, { \"value\" : \"Haskell\" , \"disabled\" : true }, { \"text\" : \"Sssss... Python ...ssssS\" , \"value\" : \"Python\" } ], \"validation\" : \"oneof\" }, { \"mode\" : \"fixed\" , \"identifier\" : \"__dropdownSingle__\" , \"metadata\" : { \"guiType\" : \"dropdown\" , \"name\" : \"Fridge\" , \"description\" : \"How often do look into the fridge a day?\" }, \"options\" : [ { \"value\" : \"Please choose one\" , \"disabled\" : true }, { \"value\" : \"never\" , \"selected\" : true }, { \"text\" : \"1 a day\" , \"value\" : \"Once a day\" }, { \"value\" : \"Twice a day\" }, { \"value\" : \"Three times a day\" }, { \"value\" : \"More than three times a day\" } ], \"validation\" : \"oneof\" }, { \"mode\" : \"fixed\" , \"identifier\" : \"__dropdownMultiple__\" , \"metadata\" : { \"guiType\" : \"dropdown\" , \"name\" : \"Dance Time\" , \"description\" : \"To which songs would you dance in the kitchen?\" }, \"multiple\" : true , \"options\" : [ { \"value\" : \"Please choose multiple\" , \"disabled\" : true }, { \"text\" : \"Last Christmas (aka the one that drives everybody else crazy)\" , \"value\" : \"Last Christmas\" , \"selected\" : true }, { \"value\" : \"White Christmas\" }, { \"value\" : \"Winter Woderland\" }, { \"value\" : \"Thats Christmas To Me\" , \"selected\" : true }, { \"value\" : \"O Come All Ye Faithful\" , \"disabled\" : true } ], \"validation\" : \"anyof\" }, { \"mode\" : \"fixed\" , \"identifier\" : \"__toggle__\" , \"metadata\" : { \"guiType\" : \"toggle\" , \"name\" : \"NO!\" , \"description\" : \"What do you dislike?\" }, \"options\" : [ { \"value\" : \"Spiders\" , \"selected\" : true }, { \"text\" : \"All kinds of Bugs (also the ones living in your Computer)\" , \"value\" : \"All kinds of Bugs\" }, { \"value\" : \"I never dislike anything!\" } ], \"validation\" : \"anyof\" }, { \"mode\" : \"any\" , \"identifier\" : \"__sliderMultiple__\" , \"metadata\" : { \"guiType\" : \"slider\" , \"name\" : \"random numbers\" , \"vertical\" : true , \"description\" : \"Choose three random numbers to be output by the container\" }, \"default\" : [ 25 , 50 , 75 ], \"min\" : 0 , \"max\" : 100 , \"step\" : 5 , \"validation\" : \"range\" }, { \"mode\" : \"any\" , \"identifier\" : \"__inputTextWOMaxlength__\" , \"metadata\" : { \"guiType\" : \"input_field\" , \"type\" : \"text\" , \"name\" : \"name\" , \"description\" : \"Enter your name\" }, \"default\" : [ \"\" ], \"validation\" : \"none\" }, { \"mode\" : \"any\" , \"identifier\" : \"__inputTextWMaxlength__\" , \"metadata\" : { \"guiType\" : \"input_field\" , \"type\" : \"text\" , \"name\" : \"Christmas Wish\" , \"description\" : \"Enter what you wish for at christmas\" }, \"maxlength\" : 200 , \"default\" : [ \"\" ], \"validation\" : \"pattern\" , \"pattern\" : \"^[A-z_! ]+$\" }, { \"mode\" : \"any\" , \"identifier\" : \"__inputNumber__\" , \"metadata\" : { \"guiType\" : \"input_field\" , \"type\" : \"number\" , \"name\" : \"Age\" , \"description\" : \"Enter your current age\" }, \"default\" : [ 25 ], \"min\" : 0 , \"max\" : 100 , \"step\" : 1 , \"validation\" : \"range\" }, { \"mode\" : \"fixed\" , \"identifier\" : \"__earth__\" , \"metadata\" : { \"guiType\" : \"radio\" , \"name\" : \"Earthling\" , \"description\" : \"Are you an earthling?\" }, \"options\" : [ { \"text\" : \"Earthling\" , \"value\" : \"true\" , \"selected\" : true }, { \"text\" : \"Alien\" , \"value\" : \"false\" } ], \"validation\" : \"oneof\" }, { \"mode\" : \"fixed\" , \"identifier\" : \"__cow__\" , \"metadata\" : { \"guiType\" : \"radio\" , \"name\" : \"Muuuuh like a Cow\" , \"description\" : \"Select if you muuuuuuh!\" }, \"options\" : [ { \"text\" : \"Muh\" , \"value\" : \"true\" , \"selected\" : true }, { \"text\" : \"Kikirikiii\" , \"value\" : \"false\" } ], \"validation\" : \"oneof\" } ], \"content\" : \"W2Fib3V0IHlvdV0NCmxpa2VkVGhpbmdzPXt7I2VhY2ggX19jaGVja2JveF9ffX17eyNpZiBAbGFzdH19e3sufX17e2Vsc2V9fXt7Ln19LCB7ey9pZn19e3svZWFjaH19DQpmYXZvcml0ZVBMPXt7X19yYWRpb0J1dHRvbl9ffX0NCmZyaWRnZT17e19fZHJvcGRvd25TaW5nbGVfX319DQpkYW5jaW5nPXt7I2VhY2ggX19kcm9wZG93bk11bHRpcGxlX199fXt7I2lmIEBsYXN0fX17ey59fXt7ZWxzZX19e3sufX0sIHt7L2lmfX17ey9lYWNofX0NCmRpc2xpa2VkVGhpbmdzPXt7I2VhY2ggX190b2dnbGVfX319e3sjaWYgQGxhc3R9fXt7Ln19e3tlbHNlfX17ey59fSwge3svaWZ9fXt7L2VhY2h9fQ0KcmFuZG9tTnVtYmVycz17eyNlYWNoIF9fc2xpZGVyTXVsdGlwbGVfX319e3sjaWYgQGxhc3R9fXt7Ln19e3tlbHNlfX17ey59fSwge3svaWZ9fXt7L2VhY2h9fQ0KbmFtZT17e3tfX2lucHV0VGV4dFdPTWF4bGVuZ3RoX199fX0NCmNocmlzdG1hc1dpc2g9e3tfX2lucHV0VGV4dFdNYXhsZW5ndGhfX319DQphZ2U9e3tfX2lucHV0TnVtYmVyX199fQ0KZWFydGhsaW5nPXt7X19lYXJ0aF9ffX0NCm11aD17e19fY293X199fQ\" } ] }, { \"identifier\" : \"22483f42-95bf-984a-98a5-ee9485c85c31\" , \"path\" : \"code.c\" , \"metadata\" : { \"syntaxHighlighting\" : \"c_cpp\" }, \"parts\" : [ { \"identifier\" : \"f3fc4404-3529-4962-b252-47bc4ddd02a2\" , \"access\" : \"template\" , \"metadata\" : { \"name\" : \"Parameter in part\" }, \"parameters\" : [ { \"mode\" : \"any\" , \"identifier\" : \"__default__\" , \"metadata\" : { \"guiType\" : \"editor\" , \"name\" : \"code\" , \"description\" : \"Enter some code\" }, \"default\" : [ \"aW50IG1haW4oaW50IGFyZ2MsIGNoYXIgKiphcmd2KSB7IA0KLy8gUHJpbnQgJ0hlbGxvIFdvcmxkJyANCn0\" ], \"validation\" : \"none\" } ], \"content\" : \"e3t7X19kZWZhdWx0X199fX0\" } ] } ], \"configuration\" : { \"resources.image\" : \"name://viplab/viplab-example-image\" , \"resources.volume\" : \"/data/shared\" , \"resources.memory\" : \"1g\" , \"resources.numCPUs\" : 1 } } For more details on the structure of the Computation Template, take a look at the Developer Guide . 3. See the Result in the ViPLab Frontend Using the above created Computation Template, the Frontend will look like this: ViPLab Frontend showing the Example After clicking the Play-Button, the Container will be executed by the Frontend and the Result will be returned, as seen in the Images below: Result after Running the Example using ViPLab Result - Stdout Result - Stderr Result - Files Result - Download Links ViPLab Frontend showing the Stdout ViPLab Frontend showing the Stderr ViPLab Frontend showing the Files ViPLab Frontend showing the Download Links","title":"Tutorial"},{"location":"user/tutorial/#tutorial","text":"","title":"Tutorial"},{"location":"user/tutorial/#situation","text":"You have done some research and want to make the code you created available to other scientists, so they can take a better look at your results. For this, ViPLab was integrated into your institutions management system for research data (see Chapter on Integration )","title":"Situation"},{"location":"user/tutorial/#steps","text":"Create a Docker Container of your Research Software, that can be used by ViPLab Write a Computation Template See the Result in the ViPLab Frontend","title":"Steps"},{"location":"user/tutorial/#easy-example","text":"For this Tutorial we have created an easy example code , that just outputs information that was passed to the script using an INI-file and a C-file. For the last seven lines, some example output is copied inside the docker container, such that they are sent back as part of the result. The python script looks like this: run.py import configparser import shutil import os cwd = os . getcwd () config = configparser . ConfigParser ( allow_no_value = True ) config_file = cwd + '/data/shared/params.ini' config . read ( config_file ) print ( \"Your name is \\033 [0;35m\" , config [ 'about you' ][ 'name' ], \" \\033 [0m\" ) print ( \"Your current age is\" , config [ 'about you' ][ 'age' ]) print ( \"Your Christmas Wish is:\" , config [ 'about you' ][ 'christmasWish' ]) print ( \"How hot do you like to drink your Coffee?\" , config [ 'coffee preference' ][ 'coffeeTemperature' ]) print ( \"You like: \\033 [0;32m\" , config [ 'about you' ][ 'likedThings' ], \" \\033 [0m\" ) print ( \"Your favorite Programming Language is\" , config [ 'about you' ][ 'favoritePL' ]) print ( \"Your look in the frige:\" , config [ 'about you' ][ 'fridge' ]) print ( \"You would dance in the kitchen to:\" , config [ 'about you' ][ 'dancing' ]) print ( \"You dislike: \\033 [0;31m\" , config [ 'about you' ][ 'dislikedThings' ], \" \\033 [0m\" ) print ( \"Your three random numbers are:\" , config [ 'about you' ][ 'randomNumbers' ]) print ( \"You are an earthling?\" , config [ 'about you' ][ 'earthling' ]) print ( \"Muuuuh:\" , config [ 'about you' ][ 'muh' ]) code_file = cwd + '/data/shared/code.c' f = open ( code_file , \"r\" ) codeSnippet = f . read () print ( \"The Code you entered:\" ) print ( codeSnippet ) f . close () if config [ 'about you' ][ 'earthling' ] == 'true' : shutil . copyfile ( cwd + \"/data/output/earth.vtp\" , cwd + \"/data/shared/earth.vtp\" ) if config [ 'about you' ][ 'muh' ] == 'true' : shutil . copyfile ( cwd + \"/data/output/cow.vtp\" , cwd + \"/data/shared/cow.vtp\" ) shutil . copyfile ( cwd + \"/data/output/coffee-temp.csv\" , cwd + \"/data/shared/coffee-temp.csv\" ) shutil . copyfile ( cwd + \"/data/output/coffee-consumption-00000.csv\" , cwd + \"/data/shared/coffee-consumption-00000.csv\" ) shutil . copyfile ( cwd + \"/data/output/coffee-consumption-00001.csv\" , cwd + \"/data/shared/coffee-consumption-00001.csv\" ) shutil . copyfile ( cwd + \"/data/output/coffee-consumption-00002.csv\" , cwd + \"/data/shared/coffee-consumption-00002.csv\" ) shutil . copyfile ( cwd + \"/data/output/coffee-consumption-00003.csv\" , cwd + \"/data/shared/coffee-consumption-00003.csv\" ) shutil . copyfile ( cwd + \"/data/output/coffee.jpg\" , cwd + \"/data/shared/image-coffee.jpg\" ) shutil . copyfile ( cwd + \"/data/output/dance.png\" , cwd + \"/data/shared/image-dance.png\" ) shutil . copyfile ( cwd + \"/data/output/uris.txt\" , cwd + \"/data/shared/uris.txt\" ) shutil . copyfile ( cwd + \"/data/shared/params.ini\" , cwd + \"/data/shared/input.ini\" ) shutil . copyfile ( cwd + \"/data/shared/code.c\" , cwd + \"/data/shared/input.c\" ) An example for the input-file called params.ini could look like this: params.ini [coffee preference] coffeeTemperature = 75 [about you] likedThings = programming,music,books favoritePL = Java fridge = never dancing = Last Christmas dislikedThings = Spiders randomNumbers = 25,50,75 name = Kathryn christmasWish = COFFEE! In that nebula! age = 36 earthling = false muh = true Additionally the the input-file called code.c could look like this: code.c int main ( int argc , char ** argv ) { // Print 'Hello World' } Tip Remember to move to the correct directory using cd [path-to-directory]/viplab-example-docker , meaning the freshly cloned example-repository ! To try out how the script works, run run.py : Calling... python run.py ... will result in the following output on the console: Your name is Kathryn Your current age is 36 Your Christmas Wish is: COFFEE! In that nebula! How hot do you like to drink your Coffee? 75 You like: programming,music,books Your favorite Programming Language is Java Your look in the frige: never You would dance in the kitchen to: Last Christmas You dislike: Spiders Your three random numbers are: 25,50,75 You are an earthling? false Muuuuh: true The Code you entered: int main(int argc, char **argv) { // Print 'Hello World' }","title":"Easy Example"},{"location":"user/tutorial/#1-create-a-docker-container-of-your-research-software-that-can-be-used-by-viplab","text":"If you are not familliar with Docker, follow this link to the official website to find the right Download for your system and take a look at the docs: Docker Website . There is also a first introduction to Docker available, with a few explainations and an image to try out. To create and runs your first Docker sample application, you can follow this Tutorial . After you set up Docker, you can start writing a Dockerfile for your research software. The file is placed in the same folder as your code. For the example code above, the Dockerfile would look like this: Dockerfile FROM python:slim COPY *.py /data/bin/ COPY earth.vtp /data/output/earth.vtp COPY cow.vtp /data/output/cow.vtp COPY coffee-temp.csv /data/output/coffee-temp.csv COPY coffee-consumption-00000.csv /data/output/coffee-consumption-00000.csv COPY coffee-consumption-00001.csv /data/output/coffee-consumption-00001.csv COPY coffee-consumption-00002.csv /data/output/coffee-consumption-00002.csv COPY coffee-consumption-00003.csv /data/output/coffee-consumption-00003.csv COPY coffee.jpg /data/output/coffee.jpg COPY dance.png /data/output/dance.png COPY uris.txt /data/output/uris.txt CMD [ \"python\" , \"/data/bin/run.py\" ] Explaination of the Dockerfile First the latest Ubuntu-Docker-Image is selected as a starting point. After this, our files are copied to specific folders inside the container. Then run.py is being executed. After creating the file, open a terminal and go to the directory where your files are located, if you haven't done so, yet. To build the container image, run the following command: docker build -t viplab/viplab-example-image . After the build is finished, you can now start the container using... Tip If you are on Windows, please use Powershell to execute the run command docker run -v ${PWD}/shared:/data/shared -it viplab/viplab-example-image ... after which you will see the output shown in section Easy Example .","title":"1. Create a Docker Container of your Research Software, that can be used by ViPLab"},{"location":"user/tutorial/#2-write-a-computation-template","text":"To execute the software using ViPLab, a so called Computation Template is needed. It is a JSON-file in which you not only define, how your software is executed, but also how the result will be displayed and generally what a user will see and what can be modified by him or her before executing your software. To write a Computation Template you have to make several considerations. First, as the example is run using Docker, you have to set the environment to Container. Then you have to define how the application is run in the configuration -section of the json. Here, you set the image to execute. Additionally, other configuration-parameters for Docker can be set. Define how to run the application { ... \"environment\" : \"Container\" , ... \"configuration\" : { \"resources.image\" : \"name://viplab/viplab-example-image\" , \"resources.volume\" : \"/data/shared\" , \"resources.memory\" : \"1g\" , \"resources.numCPUs\" : 1 } } You can also use the Frontend to set these values: ViPLab Frontend showing the Configuration of the Computation Template Before defining the input, let's set how the results will be displayed in the output -object inside the metadata -section. Using the array viewer , you can set whether CSV-files, ParaView-files, ViPLabGraphics and Images should be displayed in the result, or if they should only be downloadable. As the result of our Container contains Images, CSVs and ParaView-files, the respective values are set in the array. Further, connected result files can be defined with CSV- and ParaView-files. In this example, there are connected CSV-files, so the csv -object is added additionally. The CSV-files contain the mean of cups of coffee per day (x) over the last few years for women (y0) and men (y1), as an example, you can see the content of coffee-consumption-0003.csv: coffee-consuption-0003.csv year,women,men 2019,16,4 2020,12,3 2021,8,2 2022,6,1 In each file one data-point is added, e.g. coffee-consumption-0000.csv contains the data for 2019, coffee-consumption-0001.csv contains the data for 2019 and 2020 and so on. As you can see, the example-files start with the same basename \"coffee-consumption\", that is added to the object. Now labels, factor and format for the x-axis can be set. As there are two y-values, one for women and one for men, we decide that two plots should be displayed. They are defined and configured using the plots -array. The described output-configuration can be seen below: Define how the result will be displayed { ... \"metadata\" : { \"displayName\" : \"Parameters Example\" , \"description\" : \"This is a 'Hello World' example showing the usage of parameters. Please introduce yourself so that the Hello World-Container can print your information...\" , \"output\" : { \"viewer\" : [ \"CSV\" , \"ParaView\" , \"Image\" ], \"csv\" : [ { \"basename\" : \"coffee-consumption\" , \"xlabel\" : { \"key\" : \"year\" , \"label\" : \"Time in years\" , \"format\" : \".0d\" }, \"plots\" : [ { \"key\" : \"women\" , \"label\" : \"Cups of Coffee per Woman\" }, { \"key\" : \"men\" , \"label\" : \"Cups of Coffee per Man\" } ] } ] } } ... } This is how you can define the output using the Frontend: ViPLab Frontend showing the Output-Configuration of the Computation Template For the Template, you need all the input for your application: Commandline arguments and input-files. Using the input-files, you can also let the users make changes to code. Files can consist of multiple parts. In a part, you can also show code to the user, that can't be modified, to give the user more information, by setting the \"access\" to \"visible\". Code can be modified by setting \"access\" to \"modifiable\", or hidden by \"invisible\". If you want the user to input their changes by using form-elements, for example such that non-programmers can also try out your application, this can be done by setting \"access\" to \"template\". Then you can choose form-elements for value-selection, just as you can do it for commandline arguments. As an example: For the selection of numbers, you could use an input-field of type number or a slider. To select multiple text-values, you can use either checkbox or a dropdown and to give the user more freedom, you can also choose an input-field with type text or an editor for generating the necessary input. To input the user changes into your program, the \"content\" of the parts can be set as a Handlebars.js template. For the easy example, this feature is used to generate both input files: params.ini and code.c . In this case, params.ini was split into two parts that is later merged to one file internally by ViPLab. Using a handlebars expression, one can replace parts of the template with user input, when it is executed. In this case {{__sliderSingle__}} is replaced by the input from the user. params.ini Part 1 as Handlebars.js-Template [coffee preference] coffeeTemperature = {{__sliderSingle__}} The second part of the params.ini -Template is more complicated, as the input contains lists. For more detailed information on each handlebars functionality visit the link above. For example using each , one can iterate over an array, if enables one to make conditionals and @last helps you to refer to the last item of an array. To illustrate this a bit better, let's take a look at the line likedThings={{#each __checkbox__}}{{#if @last}}{{.}}{{else}}{{.}}, {{/if}}{{/each}} inside the template. The likedThings can have multiple values and as seen above, it has to be a list of items separated by a comma: likedThings=programming,music,books . In this example, we decided to supply a few values to the users using a checkbox, such that they can select from a limited number of items. This also prevents the user from entering incorrect or dangerous (as in malicious) input. As explained in Computation Task , the output of a checkbox-element consists of an array of strings. This array needs to be converted to a comma-separated list. params.ini Part 2 as Handlebars.js-Template [about you] likedThings = {{#each __checkbox__}}{{#if @last}}{{.}}{{else}}{{.}}, {{/if}}{{/each}} favoritePL = {{__radioButton__}} fridge = {{__dropdownSingle__}} dancing = {{#each __dropdownMultiple__}}{{#if @last}}{{.}}{{else}}{{.}}, {{/if}}{{/each}} dislikedThings = {{#each __toggle__}}{{#if @last}}{{.}}{{else}}{{.}}, {{/if}}{{/each}} randomNumbers = {{#each __sliderMultiple__}}{{#if @last}}{{.}}{{else}}{{.}}, {{/if}}{{/each}} name = {{{__inputTextWOMaxlength__}}} christmasWish = {{__inputTextWMaxlength__}} age = {{__inputNumber__}} earthling = {{__earth__}} muh = {{__cow__}} code.c as Handlebars.js-Template {{{__default__}}} All these Handlebars-templates need to be added the the content of the parts as Base64url-encoded strings. All of this, of course can be done by just writing the JSON using a text-editor, but the ViPLab Frontend can also be used for this. For this, there is the feature of a GUI Creator integrated in the Frontend. To add files, parts of files, commandline arguments and specific GUI elements to set parameters, you have to drag and drop them from the left panel to the middle. By seleting on one component on the left by clicking and holding it, the middle displays colors where you can drop the component (green for dropable and red for not dropable). ViPLab Frontend showing the Dragging and Dropping of Components By clicking on the added components in the middle, you can configure them on the right. On the left you can also see, which components can now also be added. ViPLab Frontend showing the Modification of Components After adding a part to the first file, as seen in the last GIF, you can further configure it and add content to it, as previously described above. ViPLab Frontend showing the Modification of Parts Repeat these steps with the remaining components. This will then result in the following: ViPLab Frontend showing the finished Computation Template After finishing the template, you can validate, preview and download the Computation Template: ViPLab Frontend showing the Validation and Preview of the Computation Template Here, you can see the Copmutation Template as JSON, asking for the input of the user: Computation Template of the Example { \"identifier\" : \"11483f23-95bf-424a-98a5-ee5868c85c3f\" , \"version\" : \"3.0.0\" , \"metadata\" : { \"displayName\" : \"Parameters Example\" , \"description\" : \"This is a 'Hello World' example showing the usage of parameters. Please introduce yourself so that the Hello World-Container can print your information...\" , \"output\" : { \"viewer\" : [ \"CSV\" , \"ParaView\" , \"Image\" ], \"csv\" : [ { \"basename\" : \"coffee-consumption\" , \"xlabel\" : { \"key\" : \"year\" , \"label\" : \"Time in years\" , \"format\" : \".0d\" }, \"plots\" : [ { \"key\" : \"women\" , \"label\" : \"Cups of Coffee per Woman\" }, { \"key\" : \"men\" , \"label\" : \"Cups of Coffee per Man\" } ] } ] } }, \"environment\" : \"Container\" , \"files\" : [ { \"identifier\" : \"22483f42-95bf-984a-98a5-ee9485c85c3f\" , \"path\" : \"params.ini\" , \"metadata\" : { \"syntaxHighlighting\" : \"ini\" }, \"parts\" : [ { \"identifier\" : \"f3fc4404-3529-4962-b252-47bc4ddd02a1\" , \"access\" : \"template\" , \"metadata\" : { \"name\" : \"Parameter in part\" }, \"parameters\" : [ { \"mode\" : \"any\" , \"identifier\" : \"__sliderSingle__\" , \"metadata\" : { \"guiType\" : \"slider\" , \"name\" : \"Temperature\" , \"vertical\" : false , \"description\" : \"How hot do you like your coffee? (in degrees Celsius) - Tip: Typical Serving Temperature lies between 65 and 70 Degrees\" }, \"default\" : [ 75 ], \"min\" : 0 , \"max\" : 90 , \"step\" : 5 , \"validation\" : \"range\" } ], \"content\" : \"W2NvZmZlZSBwcmVmZXJlbmNlXQpjb2ZmZWVUZW1wZXJhdHVyZT17e19fc2xpZGVyU2luZ2xlX199fQ\" }, { \"identifier\" : \"ceb051d8-b50c-4814-983a-b9d703cae0c6\" , \"access\" : \"template\" , \"metadata\" : { \"name\" : \"params.ini file part\" }, \"parameters\" : [ { \"mode\" : \"fixed\" , \"identifier\" : \"__checkbox__\" , \"metadata\" : { \"guiType\" : \"checkbox\" , \"name\" : \"Things I like\" , \"description\" : \"Select things you like\" }, \"options\" : [ { \"text\" : \"Programming\" , \"value\" : \"programming\" , \"selected\" : true }, { \"value\" : \"music\" }, { \"value\" : \"books\" } ], \"validation\" : \"minone\" }, { \"mode\" : \"fixed\" , \"identifier\" : \"__radioButton__\" , \"metadata\" : { \"guiType\" : \"radio\" , \"name\" : \"Favorite PL\" , \"description\" : \"Select your favorite programming language\" }, \"options\" : [ { \"value\" : \"C\" }, { \"value\" : \"Java\" , \"selected\" : true }, { \"value\" : \"Haskell\" , \"disabled\" : true }, { \"text\" : \"Sssss... Python ...ssssS\" , \"value\" : \"Python\" } ], \"validation\" : \"oneof\" }, { \"mode\" : \"fixed\" , \"identifier\" : \"__dropdownSingle__\" , \"metadata\" : { \"guiType\" : \"dropdown\" , \"name\" : \"Fridge\" , \"description\" : \"How often do look into the fridge a day?\" }, \"options\" : [ { \"value\" : \"Please choose one\" , \"disabled\" : true }, { \"value\" : \"never\" , \"selected\" : true }, { \"text\" : \"1 a day\" , \"value\" : \"Once a day\" }, { \"value\" : \"Twice a day\" }, { \"value\" : \"Three times a day\" }, { \"value\" : \"More than three times a day\" } ], \"validation\" : \"oneof\" }, { \"mode\" : \"fixed\" , \"identifier\" : \"__dropdownMultiple__\" , \"metadata\" : { \"guiType\" : \"dropdown\" , \"name\" : \"Dance Time\" , \"description\" : \"To which songs would you dance in the kitchen?\" }, \"multiple\" : true , \"options\" : [ { \"value\" : \"Please choose multiple\" , \"disabled\" : true }, { \"text\" : \"Last Christmas (aka the one that drives everybody else crazy)\" , \"value\" : \"Last Christmas\" , \"selected\" : true }, { \"value\" : \"White Christmas\" }, { \"value\" : \"Winter Woderland\" }, { \"value\" : \"Thats Christmas To Me\" , \"selected\" : true }, { \"value\" : \"O Come All Ye Faithful\" , \"disabled\" : true } ], \"validation\" : \"anyof\" }, { \"mode\" : \"fixed\" , \"identifier\" : \"__toggle__\" , \"metadata\" : { \"guiType\" : \"toggle\" , \"name\" : \"NO!\" , \"description\" : \"What do you dislike?\" }, \"options\" : [ { \"value\" : \"Spiders\" , \"selected\" : true }, { \"text\" : \"All kinds of Bugs (also the ones living in your Computer)\" , \"value\" : \"All kinds of Bugs\" }, { \"value\" : \"I never dislike anything!\" } ], \"validation\" : \"anyof\" }, { \"mode\" : \"any\" , \"identifier\" : \"__sliderMultiple__\" , \"metadata\" : { \"guiType\" : \"slider\" , \"name\" : \"random numbers\" , \"vertical\" : true , \"description\" : \"Choose three random numbers to be output by the container\" }, \"default\" : [ 25 , 50 , 75 ], \"min\" : 0 , \"max\" : 100 , \"step\" : 5 , \"validation\" : \"range\" }, { \"mode\" : \"any\" , \"identifier\" : \"__inputTextWOMaxlength__\" , \"metadata\" : { \"guiType\" : \"input_field\" , \"type\" : \"text\" , \"name\" : \"name\" , \"description\" : \"Enter your name\" }, \"default\" : [ \"\" ], \"validation\" : \"none\" }, { \"mode\" : \"any\" , \"identifier\" : \"__inputTextWMaxlength__\" , \"metadata\" : { \"guiType\" : \"input_field\" , \"type\" : \"text\" , \"name\" : \"Christmas Wish\" , \"description\" : \"Enter what you wish for at christmas\" }, \"maxlength\" : 200 , \"default\" : [ \"\" ], \"validation\" : \"pattern\" , \"pattern\" : \"^[A-z_! ]+$\" }, { \"mode\" : \"any\" , \"identifier\" : \"__inputNumber__\" , \"metadata\" : { \"guiType\" : \"input_field\" , \"type\" : \"number\" , \"name\" : \"Age\" , \"description\" : \"Enter your current age\" }, \"default\" : [ 25 ], \"min\" : 0 , \"max\" : 100 , \"step\" : 1 , \"validation\" : \"range\" }, { \"mode\" : \"fixed\" , \"identifier\" : \"__earth__\" , \"metadata\" : { \"guiType\" : \"radio\" , \"name\" : \"Earthling\" , \"description\" : \"Are you an earthling?\" }, \"options\" : [ { \"text\" : \"Earthling\" , \"value\" : \"true\" , \"selected\" : true }, { \"text\" : \"Alien\" , \"value\" : \"false\" } ], \"validation\" : \"oneof\" }, { \"mode\" : \"fixed\" , \"identifier\" : \"__cow__\" , \"metadata\" : { \"guiType\" : \"radio\" , \"name\" : \"Muuuuh like a Cow\" , \"description\" : \"Select if you muuuuuuh!\" }, \"options\" : [ { \"text\" : \"Muh\" , \"value\" : \"true\" , \"selected\" : true }, { \"text\" : \"Kikirikiii\" , \"value\" : \"false\" } ], \"validation\" : \"oneof\" } ], \"content\" : \"W2Fib3V0IHlvdV0NCmxpa2VkVGhpbmdzPXt7I2VhY2ggX19jaGVja2JveF9ffX17eyNpZiBAbGFzdH19e3sufX17e2Vsc2V9fXt7Ln19LCB7ey9pZn19e3svZWFjaH19DQpmYXZvcml0ZVBMPXt7X19yYWRpb0J1dHRvbl9ffX0NCmZyaWRnZT17e19fZHJvcGRvd25TaW5nbGVfX319DQpkYW5jaW5nPXt7I2VhY2ggX19kcm9wZG93bk11bHRpcGxlX199fXt7I2lmIEBsYXN0fX17ey59fXt7ZWxzZX19e3sufX0sIHt7L2lmfX17ey9lYWNofX0NCmRpc2xpa2VkVGhpbmdzPXt7I2VhY2ggX190b2dnbGVfX319e3sjaWYgQGxhc3R9fXt7Ln19e3tlbHNlfX17ey59fSwge3svaWZ9fXt7L2VhY2h9fQ0KcmFuZG9tTnVtYmVycz17eyNlYWNoIF9fc2xpZGVyTXVsdGlwbGVfX319e3sjaWYgQGxhc3R9fXt7Ln19e3tlbHNlfX17ey59fSwge3svaWZ9fXt7L2VhY2h9fQ0KbmFtZT17e3tfX2lucHV0VGV4dFdPTWF4bGVuZ3RoX199fX0NCmNocmlzdG1hc1dpc2g9e3tfX2lucHV0VGV4dFdNYXhsZW5ndGhfX319DQphZ2U9e3tfX2lucHV0TnVtYmVyX199fQ0KZWFydGhsaW5nPXt7X19lYXJ0aF9ffX0NCm11aD17e19fY293X199fQ\" } ] }, { \"identifier\" : \"22483f42-95bf-984a-98a5-ee9485c85c31\" , \"path\" : \"code.c\" , \"metadata\" : { \"syntaxHighlighting\" : \"c_cpp\" }, \"parts\" : [ { \"identifier\" : \"f3fc4404-3529-4962-b252-47bc4ddd02a2\" , \"access\" : \"template\" , \"metadata\" : { \"name\" : \"Parameter in part\" }, \"parameters\" : [ { \"mode\" : \"any\" , \"identifier\" : \"__default__\" , \"metadata\" : { \"guiType\" : \"editor\" , \"name\" : \"code\" , \"description\" : \"Enter some code\" }, \"default\" : [ \"aW50IG1haW4oaW50IGFyZ2MsIGNoYXIgKiphcmd2KSB7IA0KLy8gUHJpbnQgJ0hlbGxvIFdvcmxkJyANCn0\" ], \"validation\" : \"none\" } ], \"content\" : \"e3t7X19kZWZhdWx0X199fX0\" } ] } ], \"configuration\" : { \"resources.image\" : \"name://viplab/viplab-example-image\" , \"resources.volume\" : \"/data/shared\" , \"resources.memory\" : \"1g\" , \"resources.numCPUs\" : 1 } } For more details on the structure of the Computation Template, take a look at the Developer Guide .","title":"2. Write a Computation Template"},{"location":"user/tutorial/#3-see-the-result-in-the-viplab-frontend","text":"Using the above created Computation Template, the Frontend will look like this: ViPLab Frontend showing the Example After clicking the Play-Button, the Container will be executed by the Frontend and the Result will be returned, as seen in the Images below: Result after Running the Example using ViPLab Result - Stdout Result - Stderr Result - Files Result - Download Links ViPLab Frontend showing the Stdout ViPLab Frontend showing the Stderr ViPLab Frontend showing the Files ViPLab Frontend showing the Download Links","title":"3. See the Result in the ViPLab Frontend"},{"location":"user/validation/","text":"Common Validation Errors Required Element is Missing Error Solution Error [ { \"keyword\": \"required\", \"dataPath\": \".configuration\", \"schemaPath\": \"#/properties/configuration/required\", \"params\": { \"missingProperty\": \"resources.image\" }, \"message\": \"should have required property 'resources.image'\" } ] Success Click on the outer part (if empty - anywhere in the middle section; if there is files oder commandline arguements - click right next to them) in the middle section to open the Configuration of the Template Enter your Docker-Image Given Docker-Image has no URI-Schema Error Solution Error [ { \"keyword\": \"format\", \"dataPath\": \".configuration['resources.image']\", \"schemaPath\": \"#/properties/configuration/properties/resources.image/format\", \"params\": { \"format\": \"uri\" }, \"message\": \"should match format \\\"uri\\\"\" } ] Success Click on the outer part (if empty - anywhere in the middle section; if there is files oder commandline arguements - click right next to them) in the middle section to open the Configuration of the Template 2. Enter your Docker-Image and make sure that is a URI File Path is not correct Error Solution Error [ { \"keyword\": \"pattern\", \"dataPath\": \".files[0].path\", \"schemaPath\": \"#/properties/files/items/properties/path/pattern\", \"params\": { \"pattern\": \"^([A-z0-9-_+]+/?)*([A-z0-9]+([.]([A-z]+))?)$\" }, \"message\": \"should match pattern \\\"^([A-z0-9-_+]+/?)*([A-z0-9]+([.]([A-z]+))?)$\\\"\" } ] Success Click on file in the middle section to open file configuration on the left To select the correct file right away, take a look at the \"dataPath\" in the Error-Message The number given behind \"files\" in the brackets + 1 is the file you have to click Modify the value of \"Path to File\" to match a relative path File has no Part(s) Error Solution Error [ { \"keyword\": \"minItems\", \"dataPath\": \".files[0].parts\", \"schemaPath\": \"#/properties/files/items/properties/parts/minItems\", \"params\": { \"limit\": 1 }, \"message\": \"should NOT have fewer than 1 items\" } ] Success Drag-and-Drop one or more part-items from the left to the middle-section Drop the part onto the file, that contains no part yet Missing Commandline Arguments Error Solution Error [ { \"keyword\": \"minItems\", \"dataPath\": \".parameters\", \"schemaPath\": \"#/properties/parameters/minItems\", \"params\": { \"limit\": 1 }, \"message\": \"should NOT have fewer than 1 items\" } ] Success Drag-and-Drop one or more of the parameter-items from the left to the middle-section Choose one of: checkbox radio dropdown toggle Drop the items onto the empty commandline argument-item Missing Parameters Error Solution Error [ { \"keyword\": \"minItems\", \"dataPath\": \".files[0].parts[0].parameters\", \"schemaPath\": \"#/properties/files/items/properties/parts/items/then/properties/parameters/minItems\", \"params\": { \"limit\": 1 }, \"message\": \"should NOT have fewer than 1 items\" } ] Success Click on the part in the middle-section specified by the Error-Message Take a look at the \"dataPath\" in the message Choose the file + 1 and inside the file, part + 1 Drag-and-Drop one of the parameter-items from the left to the specified part in the middle-section Choose one of: checkbox radio dropdown toggle input_field editor slider Drop the item onto the empty part-item After selecting the item to drop, the area(s) where it can be dropped will light up in green Missing Values to specify input_field Error Solution Error [ { \"keyword\": \"additionalProperties\", \"dataPath\": \"[2].metadata\", \"schemaPath\": \"#/items/allOf/1/then/oneOf/0/properties/metadata/additionalProperties\", \"params\": { \"additionalProperty\": \"type\" }, \"message\": \"should NOT have additional properties\" }, { \"keyword\": \"enum\", \"dataPath\": \"[2].metadata.type\", \"schemaPath\": \"#/items/allOf/1/then/oneOf/1/properties/metadata/properties/type/enum\", \"params\": { \"allowedValues\": [ \"text\", \"number\" ] }, \"message\": \"should be equal to one of the allowed values\" }, { \"keyword\": \"additionalProperties\", \"dataPath\": \"[2].metadata\", \"schemaPath\": \"#/items/allOf/1/then/oneOf/2/properties/metadata/additionalProperties\", \"params\": { \"additionalProperty\": \"type\" }, \"message\": \"should NOT have additional properties\" }, { \"keyword\": \"oneOf\", \"dataPath\": \"[2]\", \"schemaPath\": \"#/items/allOf/1/then/oneOf\", \"params\": { \"passingSchemas\": null }, \"message\": \"should match exactly one schema in oneOf\" } ] Success In this case, an input_field was added to a part and it was not configured correctly. That results in the JSON-Schema not matching. Click on the newly added input_field in the middle section On the left in the Configuration-Tab, select a \"Field Type\" to either be \"number\" or \"text\" If you choose \"number\", this will likely result in more Validation-Errors until you fill in all necessary values: \"Default Value\" \"Minimum Value\" \"Maximum Value\" \"Step Size\"","title":"Common Validation Errors"},{"location":"user/validation/#common-validation-errors","text":"","title":"Common Validation Errors"},{"location":"user/validation/#required-element-is-missing","text":"Error Solution Error [ { \"keyword\": \"required\", \"dataPath\": \".configuration\", \"schemaPath\": \"#/properties/configuration/required\", \"params\": { \"missingProperty\": \"resources.image\" }, \"message\": \"should have required property 'resources.image'\" } ] Success Click on the outer part (if empty - anywhere in the middle section; if there is files oder commandline arguements - click right next to them) in the middle section to open the Configuration of the Template Enter your Docker-Image","title":"Required Element is Missing"},{"location":"user/validation/#given-docker-image-has-no-uri-schema","text":"Error Solution Error [ { \"keyword\": \"format\", \"dataPath\": \".configuration['resources.image']\", \"schemaPath\": \"#/properties/configuration/properties/resources.image/format\", \"params\": { \"format\": \"uri\" }, \"message\": \"should match format \\\"uri\\\"\" } ] Success Click on the outer part (if empty - anywhere in the middle section; if there is files oder commandline arguements - click right next to them) in the middle section to open the Configuration of the Template 2. Enter your Docker-Image and make sure that is a URI","title":"Given Docker-Image has no URI-Schema"},{"location":"user/validation/#file-path-is-not-correct","text":"Error Solution Error [ { \"keyword\": \"pattern\", \"dataPath\": \".files[0].path\", \"schemaPath\": \"#/properties/files/items/properties/path/pattern\", \"params\": { \"pattern\": \"^([A-z0-9-_+]+/?)*([A-z0-9]+([.]([A-z]+))?)$\" }, \"message\": \"should match pattern \\\"^([A-z0-9-_+]+/?)*([A-z0-9]+([.]([A-z]+))?)$\\\"\" } ] Success Click on file in the middle section to open file configuration on the left To select the correct file right away, take a look at the \"dataPath\" in the Error-Message The number given behind \"files\" in the brackets + 1 is the file you have to click Modify the value of \"Path to File\" to match a relative path","title":"File Path is not correct"},{"location":"user/validation/#file-has-no-parts","text":"Error Solution Error [ { \"keyword\": \"minItems\", \"dataPath\": \".files[0].parts\", \"schemaPath\": \"#/properties/files/items/properties/parts/minItems\", \"params\": { \"limit\": 1 }, \"message\": \"should NOT have fewer than 1 items\" } ] Success Drag-and-Drop one or more part-items from the left to the middle-section Drop the part onto the file, that contains no part yet","title":"File has no Part(s)"},{"location":"user/validation/#missing-commandline-arguments","text":"Error Solution Error [ { \"keyword\": \"minItems\", \"dataPath\": \".parameters\", \"schemaPath\": \"#/properties/parameters/minItems\", \"params\": { \"limit\": 1 }, \"message\": \"should NOT have fewer than 1 items\" } ] Success Drag-and-Drop one or more of the parameter-items from the left to the middle-section Choose one of: checkbox radio dropdown toggle Drop the items onto the empty commandline argument-item","title":"Missing Commandline Arguments"},{"location":"user/validation/#missing-parameters","text":"Error Solution Error [ { \"keyword\": \"minItems\", \"dataPath\": \".files[0].parts[0].parameters\", \"schemaPath\": \"#/properties/files/items/properties/parts/items/then/properties/parameters/minItems\", \"params\": { \"limit\": 1 }, \"message\": \"should NOT have fewer than 1 items\" } ] Success Click on the part in the middle-section specified by the Error-Message Take a look at the \"dataPath\" in the message Choose the file + 1 and inside the file, part + 1 Drag-and-Drop one of the parameter-items from the left to the specified part in the middle-section Choose one of: checkbox radio dropdown toggle input_field editor slider Drop the item onto the empty part-item After selecting the item to drop, the area(s) where it can be dropped will light up in green","title":"Missing Parameters"},{"location":"user/validation/#missing-values-to-specify-input_field","text":"Error Solution Error [ { \"keyword\": \"additionalProperties\", \"dataPath\": \"[2].metadata\", \"schemaPath\": \"#/items/allOf/1/then/oneOf/0/properties/metadata/additionalProperties\", \"params\": { \"additionalProperty\": \"type\" }, \"message\": \"should NOT have additional properties\" }, { \"keyword\": \"enum\", \"dataPath\": \"[2].metadata.type\", \"schemaPath\": \"#/items/allOf/1/then/oneOf/1/properties/metadata/properties/type/enum\", \"params\": { \"allowedValues\": [ \"text\", \"number\" ] }, \"message\": \"should be equal to one of the allowed values\" }, { \"keyword\": \"additionalProperties\", \"dataPath\": \"[2].metadata\", \"schemaPath\": \"#/items/allOf/1/then/oneOf/2/properties/metadata/additionalProperties\", \"params\": { \"additionalProperty\": \"type\" }, \"message\": \"should NOT have additional properties\" }, { \"keyword\": \"oneOf\", \"dataPath\": \"[2]\", \"schemaPath\": \"#/items/allOf/1/then/oneOf\", \"params\": { \"passingSchemas\": null }, \"message\": \"should match exactly one schema in oneOf\" } ] Success In this case, an input_field was added to a part and it was not configured correctly. That results in the JSON-Schema not matching. Click on the newly added input_field in the middle section On the left in the Configuration-Tab, select a \"Field Type\" to either be \"number\" or \"text\" If you choose \"number\", this will likely result in more Validation-Errors until you fill in all necessary values: \"Default Value\" \"Minimum Value\" \"Maximum Value\" \"Step Size\"","title":"Missing Values to specify input_field"}]}