{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Viplab documentation The documentation contains three main parts: The old ECS documenation The ECS2 documenation The ViPLab documenation The ViPLab 3.0 documenation mkdoc command mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Welcome to the Viplab documentation"},{"location":"#welcome-to-the-viplab-documentation","text":"The documentation contains three main parts: The old ECS documenation The ECS2 documenation The ViPLab documenation The ViPLab 3.0 documenation","title":"Welcome to the Viplab documentation"},{"location":"#mkdoc-command","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"mkdoc command"},{"location":"ecs2/","text":"Core ECS HTTP Header Application specific headers X-EcsAuthId:: Has to be a valid participant id. In a standard ECS configuration this HTTP header will be attached by the authentication process running on the proxy server. X-EcsReceiverCommunities:: Has to be a valid community id/ids or community name/names. Adresses all participants joined the comimunity/communities. You are able to note multiple communities, either by name or by id, spaced by comma. Only allowed by POST . X-EcsReceiverMemberships:: Has to be a valid membership id/ids. Adresses all listed memberships. You are able to note multiple membersips spaced by comma. Only allowed by POST . X-EcsSender:: Beschreibt bei einem GET auf eine Message/Queue Ressource den Absender der Nachricht in Form seiner Membership-ID. Wird ausschlie\u00dflich vom ECS gesetzt/beschrieben. Gleichzeitig setzt der ECS X-EcsReceiverCommunities auf die entsprechende Community des Senders. Falls der Absender Teinehmer mehrerer Communities ist, bezeichnet X-!EcsSender eine Liste von Membership-IDs, entsprechend enth\u00e4lt auch X-EcsReceiverCommunities eine korrespondierende Liste an Communities. X-EcsQueryStrings:: Used to provide [[#querystrings|querystrings]]. HTTP standard header Accept:: Content-Types that are acceptable. Content-Type:: The mime type of the body of the request (used with POST and PUT requests). If-None-Match:: Allows a 304 Not Modified to be returned if content is unchanged. Cookie:: An HTTP cookie previously sent by the server with Set-Cookie. Content-Type:: The mime type of this content. ETag:: An identifier for a specific version of a resource. Location:: Used in redirection, or when a new resource has been created. Set-Cookie:: An HTTP cookie. Addressing == In order to communicate to each other you have to provide a unique address. These addresses can either be a so called membership id or a community id or community name. === Membership IDs === These are unique ids in the scope of an ECS. They establish a relationship between a participant and a community: +------------+ 1 N +-----------+ N 1 +-----------+ < > |participants|------------|memberships|------------|communities| < > +------------+ +-----------+ +-----------+ Therefore a participant can be associated to different communities. Every participant can inquire his membership ids by calling the [[#memberships|memberships]] ressource. Community names and ids === A community can be referenced by his community id (cid) or his community name. If you address a community you implicit address all members of the community. This applies also to the sender joining the receiver community if the sender has set his ''community_selfrouting'' flag (default off), otherwise the sender will be implicitly excluded from the receiver list. Every participant can inquire his communities memberships by calling the [[#memberships|memberships]] ressource. Create a ressource === If you want to POST to a ressource you have to provide either a X-EcsReceiverMemberships or X-EcsReceiverCommunities header or both together. If you want to address a single membership or a dedicated number of memberships you have to set the {{{X-EcsReceiverMemberships}}} header. This header can have a list of values, e.g. {{{ X-EcsReceiverMemberships: 3,6,47 }}} If you want to address a community you have to set the {{{X-EcsReceiverCommunities}}} header. This header can have a list of values, e.g. {{{ X-EcsReceiverCommunities: SWS,23,25 }}} === Get a ressource === If you GET a ressource then the ECS set the X-EcsSender and the X-EcsReceiverCommunities header to show you from whom and where your received message comes. If there is a list of X-EcsReceiverCommunities values than there is also a list of corresponding X-EcsSender values, i.e. the sending participant is member of multiple communities and addressed his message to multiple communities also, e.g. {{{ X-EcsSender: 3,19 X-EcsReceiverCommunities: UnisBW,SUV }}} This means that this message is addressed to you through two communities (UnisBW, SUV) and the sender has the membership id 3 in UnisBW and 19 in SUV. == Participants == === Community selfrouting === If community selfrouting is activated at the participant (administration area) you can decide if you also want to receive the message which you send to an appropriate community, i.e. you get an event notification (if events on this resource is activated) and you get it listed by its [[#list-ressource|list resource]] and could access it through its [[#queue-ressource|queue resource]]. Of course, as sender of the message you can always access it by its [[#message-resource|message resource]]. === Authentication === All participants have to be authenticated in order to use ECS services. A participant is deemed to be authenticated if the X-EcsAuthId header is set and the ECS knows it. The real authentication take place ''in front of'' the ECS, normally at the Webserver (Proxy). But this depends on configuration/installation of ECS: +-----------+ . < > | ECS | /_\\ < > | (RAILS) | | < > +-----------+ | < > |Rack Module| | < > | (optional)| | < > +-----------+ | Message < > | Webserver | | Flow < > | (Proxy) | | < > +-----------+ | < > | | < > +-----------+ | < > |Participant| | < > +-----------+ Basic Auth ([[/nginx]], [[/apache]]) X.509 certificates ([[/nginx]], [[/apache]]) === Anonymous participants === The creation of a new anonymous participant automatically takes place by every call to an ECS ressource if the calling participant didn't set X-EcsAuthId or Cookie header, by setting a \"Set-Cookie:\" header in the response. On subsequent calls the participant has to provide this cookie in a \"Cookie\" header in order to be identified as the previously calling participant. Additionally those participants were automatically joined to the public community. Further their lifetime will be limited and all ressources will be silently deleted after this lifetime becomes zero. With succesional accesses to ECS this lifetime will be refreshed. For general cookie handling see also [[http://en.wikipedia.org/wiki/HTTP_cookie|HTTP cookie]]. See also [[/examples|examples]]. == Ressource access restrictions == Of course this is best done on webserver. [[/nginx]], [[/apache]] < > < > < > == System Ressources == These are default ressources provided by any ECS installation. < > === Events queue === [[http://freeit.de/documents/ecsa/index.html#events_resource|see central documentation place]] < > === Memberships === [[http://freeit.de/documents/ecsa/index.html#memberships_resource|see central documentation place]] === Authorization through One Touch Tokens === [[http://freeit.de/documents/ecsa/index.html#auths_resource|see central documentation place]] < > == Anwendungsspezifische Ressourcen == Alle Ressourcen die explizit f\u00fcr eine Anwendung bereitgestellt werden sollen, m\u00fcssen vorab beim ECS konfiguriert werden. Dabei stellt der ECS drei Typen von Ressourcen zur Verf\u00fcgung: Message Ressource Listen Ressource Queue Ressource Allgemein steht hinter dem Ressourcenbegriff ein abstraktes Konzept. Ressourcen sind: eindeutig identifizierbar (im HTTP Kontext durch URIs) haben eine oder mehrere Repr\u00e4sentationen (z.B. JSON, XML, Text, ...) F\u00fcr den Ressourcen Begriff ist es unerheblich, wie ihre Repr\u00e4sentation zustande kommt. Ob dies durch eine statische Datei oder durch ein Skript (dynamisch) geschieht ist vollkommen egal. Einer URI/Ressource ist dies von aussen nicht anzusehen (black box) und soll es auch nicht sein (API, Entkopplung). Eine Bewertung einer Ressource aufgrund ''innerer'' Vorg\u00e4nge und Gegebenheiten ist somit ebenfalls unerheblich, ja sogar unzul\u00e4ssig. F\u00fcr alle weiteren Betrachtungen soll folgendes gelten: POST: Liefert {{{201}}} bei erfolgreichem anlegen der Ressource. Bei Fehlern wird generell immer ein {{{4XX}}} oder {{{5XX}}} Status Code zur\u00fcckgegeben. Bei nichtvorhandensein der Ressource ein {{{404}}} Status. Bei Conditional-GET gibt {{{304}}} (Not Modified) an, dass sich die Ressource nicht ge\u00e4ndert hat. Entsprechende Ressource existiert und Operation ist erfolgreich, andernfalls Fehlermeldungen wie vorstehend beschrieben. < > === Ressourcenstruktur === {{{ / / / / /details / / / / / / /receivers / / / /details / / /fifo / / /lifo }}} < > < > === Message Resource === In einer Message Resource k\u00f6nnen Nachrichten f\u00fcr einen bestimmten Empf\u00e4nger abgelegt werden. Der Empf\u00e4nger kann diese Nachrichten ebenfalls \u00fcber diese Ressource abholen. Eine Message Ressource kann so konfiguriert werden, dass die in ihr abgelegten Nachrichten \"persistent\" gehalten werden, um so neuhinzukommenden Participanten gegebenenfalls zum Abruf zur Verf\u00fcgung zu stehen (siehe [[#postrouting|Postrouting]]). Dies erlaubt den Aufbau einfacher und verteilt genutzter Objektdatenbanken. ''GET'': Liefert Nachricht und gibt \"200\" Status Code. < > ''DELETE'': L\u00f6scht Nachricht und gibt \"200\" Status Code. Im Body wird die Repr\u00e4sentation der gel\u00f6schten Ressource zur\u00fcckgegeben.< > ''PUT'': Erneuert Nachricht und gibt \"200\" Status Code. < > ''POST'': unzul\u00e4ssig (\"405\" Method Not Allowed Statuscode). Ressourcenstruktur: /<projectnamespace>/<name>/<id> < > Bsp. einer Message-Ressource: http://isblab.rus.uni-stuttgart.de/numlab/exercises/33 < > < > < > ==== Subresource \"details\" ==== You can ask for detailed (meta) information of a posted message. Only the original sender or a receiver can do that: GET: / / / /details You will get back something like this: { < > \"receivers\": [ < > { < > \"itsyou\": false, < > \"mid\": 1, < > \"cid\": 2 < > \"pid\": 19, < > }, < > { < > \"itsyou\": false, < > \"mid\": 4, < > \"cid\": 3 < > \"pid\": 29, < > } < > ], < > \"senders\": [ < > { < > \"mid\": 5 < > }, < > { < > \"mid\": 7 < > } < > ], < > \"url\": \"courselinks/10\", < > \"content_type\": \"application/json\" < > \"owner\": { < > \"pid\": 3, < > \"itsyou\": true < > } < > } < > The \"receivers\" and \"senders\" have corresponding arrays: The first array entry in \"senders\" has been addressed the first array entry of \"receivers\" and so on. === Listen Ressource === ''GET'': Liefert URI Nachrichten-Liste und \"200\" Status Code. Wenn Liste leer (leerer HTTP-Body, \"Content-Length: 0\") trotzdem \"200\" Statuscode. < > ''DELETE'': unzulaessig (\"405\" Method Not Allowed Statuscode). < > ''PUT'': unzulaessig (\"405\" Method Not Allowed Statuscode). < > ''POST'': Legt neue Message-Ressource an. Ressourcenstruktur: /<projectnamespace>/<name> < > Bsp. einer Listen-Ressource: http://isblab.rus.uni-stuttgart.de/numlab/exercises < > The returned Content-Type will be text/uri-list . The URI list will be represented by [[http://www.rfc-ref.org/RFC-TEXTS/3986/chapter5.html|relative references]]. URIs are specified in [[http://www.rfc-ref.org/RFC-TEXTS/3986|RFC3986]]. ==== Subresource \"details\" ==== Now it's possible to ask for detailed (meta) information of a list resource. All querystrings supported my normal list resources could be used. Only the original sender can do that: GET: / / /details You will get back something like this: [ < > { < > \"senders\": [ < > <<BR>> ` ],`<<BR>> ` \"receivers\": [`<<BR>> < > ], < > \"url\": \"courselinks/35\", < > \"content_type\": \"text/plain\", < > \"owner\": { < > \"pid\": 3, < > \"itsyou\": true < > } < > }, < > { < > \"senders\": [ < > { < > \"mid\": 2 < > } < > ], < > \"receivers\": [ < > { < > \"mid\": 19, < > \"cid\": 2, < > \"pid\": 19, < > \"itsyou\": false < > } < > ], < > \"url\": \"courselinks/36\", < > \"content_type\": \"text/plain\", < > \"owner\": { < > \"pid\": 3, < > \"itsyou\": true < > } < > }, < > { < > \"senders\": [ < > { < > \"mid\": 2 < > } < > ], < > \"receivers\": [ < > { < > \"mid\": 19, < > \"cid\": 2, < > \"pid\": 19, < > \"itsyou\": false < > } < > ], < > \"url\": \"courselinks/37\", < > \"content_type\": \"text/plain\", < > \"owner\": { < > \"pid\": 3, < > \"itsyou\": true < > } < > } < > ] < > The first element of the returned array of the details list subresource probably needs some explanation. Both senders and receivers are empty lists. This mean that the appropriate message isn't any more addressed to any participant. This further implies that all participants which had been addressed in the past have been received the message from their message queue. But why don't has been deleted the message then from the ECS ? Because the resource has been configured to be \"postrouted\". If that has not been the matter, ECS would has been removed the message. < > ==== Querystrings ==== To affect the returned representation you could assign the following querystrings to {{{X-EcsQueryStrings}}} header variable: '''receiver'''< > It's possible to filter the returned index from a list resource to only those items to which the calling participant was formerly an addressed receiver:< > curl .... -H 'X-EcsQueryStrings: receiver=true' -X GET https://server/<namespace>/<name> < > This is also the default, therefore it could be omited. '''sender'''< > It's possible to filter the returned index from a list resource to only those items to which the calling participant is the original sender:< > curl .... -H 'X-EcsQueryStrings: sender=true' -X GET https://server/<namespace>/<name> '''all'''< > It's possible to filter the returned index from a list resource to show all messages either as addressed receiver or as original sender:< > curl .... -H 'X-EcsQueryStrings: all=true' -X GET https://server/<namespace>/<name> Using the {{{X-EcsQueryStrings}}} header variable is the recommended way to use querystrings. If you have to assign multiple querystrings please delimit the querystrings by comma (,). Of course you can also specify the querystring by appending it to the end of the resource url, e.g. curl .... -X GET https://server/<namespace>/<name>?all=true < > < > < > === Queue Resource === Die Queue Resource ist als Subressource einer Listen Ressource realisiert und kann entweder im ''lifo'' oder ''fifo'' Mode angesprochen werden: ''GET'': Liefert erste (fifo) oder letzte (lifo) Message-Ressource zur\u00fcck. Gibt \"200\" Status Code zur\u00fcck auch wenn keine Nachricht in Queue (leerer HTTP-Body, \"Content-Length: 0\"). < > ''DELETE'': unzulaessig (\"405\" Method Not Allowed Statuscode). < > ''POST'': Liefert erste (fifo) oder letzte (lifo) Message-Ressource zur\u00fcck und l\u00f6scht diese. Gibt \"200\" Status Code zur\u00fcck auch wenn keine Nachricht in Queue (leerer HTTP-Body, \"Content-Length: 0\"). < > ''PUT'': unzulaessig (\"405\" Method Not Allowed Statuscode). Ressourcenstruktur: /<projectnamespace>/<name>/fifo oder /<projectnamespace>/<name>/lifo < > Bsp. einer Queue-Ressource: http://isblab.rus.uni-stuttgart.de/numlab/solutions/fifo < > === Postrouting === If a resource has set his ''postroute'' flag, then all new participants will get postrouted this resources e.g. if you have posted some messages to a community named ''testcommunity'' and later joins a new participant to this community, it will get postrouted the former posted messages. < > == Participant Cluster == Nachfolgend wird beschrieben, wie der ECS einen Cluster \u00fcber eine beliebige Anzahl von Participants bildet, diesen Cluster zur Benutzung bereitstellt und wie dieser angesprochen wird. === Cluster-Bildung === Zun\u00e4chst eine Grafik zur Verdeutlichung der Topologie: +---------+ +---------+ +---------+ < > | Partic. | | Partic. | | Partic. | < > | A | | B | | C | < > +---------+ +---------+ +---------+ < > | | | < > | | | < > +-----------------------------------+ < > | ECS | < > +-----------------------------------+ < > | < > | < > +-----------------------------------+ < > | virtueller Participant (Cluster) | < > +--------+--------+--------+--------+ < > | Cluster| Cluster| Cluster| Cluster| < > | Partic.| Partic.| Partic.| Partic.| < > | 1 | 2 | 3 | n | < > +--------+--------+--------+--------+ Der ECS registriert einen virtuellen Participanten d.h. es wird nur ein Zertifikat (Cluster-Zertifikat) generiert und ausgegeben. Dieses eine Zertifikat wird f\u00fcr alle Participanten benutzt, die den gew\u00fcnschten Cluster bilden sollen. Das reduziert zum einen die Zertifikatsverwaltung (generieren, ausgeben, erneuern, ...) und zum anderen l\u00e4\u00dft sich der Cluster vollkommen transparent skalieren, indem man einfach einen weiteren Cluster-Participanten mit dem Cluster-Zertifikat konfiguriert. Dazu sind keine Registrierungen oder Konfigurationen am ECS notwendig. Nachrichten an den Cluster werden \u00fcber eine Queue-Ressource geschickt. Die Adressierung des Clusters erfolgt einfach \u00fcber den virtuellen Participanten. Jeder Cluster-Participant besorgt sich durch ein {{{DELETE}}} auf die Queue-Ressource eine neue Nachricht zur Bearbeitung. Dieses Abholen einer neuen Nachricht l\u00e4uft innerhalb des Clusters konkurrierend unter allen Cluster-Participanten ab (message dispatching). {{{#!wiki comment/dotted @stephan: virtuell heisst scheinbar. Dahinter steckt nat\u00fcrlich keinerlei extra Instanz. Also keine zus\u00e4tzliche Middleware oder sonstiges. Der Cluster wird alleinig durch Verwendung eines gemeinsamen Zertifikats gebildet. @stephan: Es ist eben gerade keine \u00c4nderung im \"Backend\" notwendig. Die Cluster-Participants (Computation-Clients) k\u00f6nnen so bleiben wie sie sind, benutzen aber dasselbe Zertifikat und werden vom ECS dadurch als ein einziger Participant gesehen. Dies bezeichne ich als \"virtuellen\" Participant. }}} === Cluster-Broadcasting === Da die Cluster-Participanten selbst nicht direkt/einzeln adressiert werden k\u00f6nnen aber man trotzdem einzelne Cluster-Participanten ansprechen m\u00f6chte, bedient man sich dem sogenannten \"broadcasting\". Dazu wird eine Message-Ressource (im weiteren als Broadcast-Ressource bezeichnet) verwendet, in die ein Participant eine Nachricht schreibt. Aus dem Cluster heraus wird dann folgenderma\u00dfen auf diese Ressource zugegriffen: 1. Jeder Cluster-Participant pr\u00fcft die Broadcast-Ressource, ob dort eine neue Nachricht eingetroffen ist. Ist dies der Fall wird die Nachricht idempotent aus der Broadcast-Ressource ausgelesen und \u00fcberpr\u00fcft, ob diese f\u00fcr den jeweiligen Cluster-Participanten gedacht ist. Wenn ja verarbeitet der Cluster-Participant die Nachricht. 2. Der ECS wird die Nachrichten in der Broadcast-Ressource nach voreingestellter Zeitdauer l\u00f6schen (garbage collection). < > < > == Filter Plugins == Messages k\u00f6nnen \u00fcber zur Laufzeit hinzuf\u00fcgbare Filter-Plugins manipuliert werden. Ein Filter-Plugin (zuk\u00fcnftig als Filter bezeichnet) kann 5 unterschiedlichen Filter-Queues zugeordnet werden, die jeweils durch eine bestimmte HTTP Operation getriggert werden. Die Filter-Queues werden dabei auf das Dateisystem unterhalb des jeweiligen Basisverzeichnisses der Anwendung abgebildet. Dabei richtet sich die Verzeichnisstruktur nach der Ressourcen-URL ({{{/ / }}} bzw. {{{/ / / }}}): {{{show}}} Filter-Queue. Wird getriggert, sobald eine Queue/Message-Ressource abgerufen wird (GET): < > Filter-Queue Pfad: {{{app/controllers/ /filter/ /show}}} {{{index}}} Filter-Queue. Wird getriggert, sobald eine Listen-Ressource abgerufen wird (GET): < > Filter-Queue Pfad: {{{app/controllers/ /filter/ /index}}} {{{create}}} Filter-Queue. Wird getriggert, sobald eine Listen-Ressource aufgerufen wird (POST): < > Filter-Queue Pfad: {{{app/controllers/ /filter/ /create}}} {{{update}}} Filter-Queue. Wird getriggert, sobald eine Queue/Message-Ressource aufgerufen wird (PUT): < > Filter-Queue Pfad: {{{app/controllers/ /filter/ /update}}} {{{delete}}} Filter-Queue. Wird getriggert, sobald eine Queue/Message-Ressource aufgerufen wird (DELETE): < > Filter-Queue Pfad: {{{app/controllers/ /filter/ /delete}}} Es k\u00f6nnen beliebig viele Filter in den jeweiligen Filter-Queues abgelegt werden, wobei alle Filter entsprechend ihrer lexikalischen Sortierreihenfolge nacheinander aufgerufen werden: unfiltered +-------+ +-------+ +-------+ filtered < > ---------->| 1-fil |-->| 2-fil |...| n-fil |---------> < > message +-------+ +-------+ +-------+ message Wird ein Filter in die entsprechende Filter-Queue (Verzeichnis im Dateisystem) kopiert, wird dieser automatisch zur Laufzeit dem ECS hinzugef\u00fcgt. Es ist keine Konfiguration oder gar ein Neustart des ECS notwenig (zero configuration; convention over configuration). === Filter Template === Der Filter mu\u00df als Ruby Modul vorliegen und folgenden Aufbau besitzen: {{{ modul BeliebigerModulname def self.start # hier kommt der eigentliche Filter end end }}} Nat\u00fcrlich kann \u00fcber die Startmethode des Moduls auch eine entsprechende Klasse f\u00fcr eine objektorientierte Filterimplementierung angesto\u00dfen werden. Generell darf zur Realisierung des Filters auf die komplette Ruby Funktionalit\u00e4t zur\u00fcckgegriffen werden. Als API zum ECS wird durch die Konstante {{{FILTER_API}}} ein entsprechendes Objekt bereitgestellt, mit dessen Hilfe auf die notwendigen ECS Objekte zugegriffen werden kann. Momentan sind dies: {{{FILTER_API.params}}} \u00dcber diesen Hash kann unter anderem auf den Querystring des HTTP Aufrufs zugegriffen werden: {{{ http://ecs.rus.uni-stuttgart.de/numlab/exercises/23?properties=name,description ... elements = FILTER_API.params[\"elements\"].split(\",\") ... }}} {{{FILTER_API.record}}} Dieses Objekt erlaubt unter anderem den Zugriff auf die zu filternde Message: {{{ message = FILTER_API.record.body }}} == Transportprotokoll und Anwendungsprotokoll == Als Transport-/Anwendungsprotokoll dient HTTP 1.1 . == Beispiele == Wie man den ECS konkret nutzt und als Client bedient, wird anhand einiger einfacher [[/examples|Beispiele]] erl\u00e4utert.","title":"Core ECS"},{"location":"ecs2/#core-ecs","text":"","title":"Core ECS"},{"location":"ecs2/#http-header","text":"","title":"HTTP Header"},{"location":"ecs2/#application-specific-headers","text":"X-EcsAuthId:: Has to be a valid participant id. In a standard ECS configuration this HTTP header will be attached by the authentication process running on the proxy server. X-EcsReceiverCommunities:: Has to be a valid community id/ids or community name/names. Adresses all participants joined the comimunity/communities. You are able to note multiple communities, either by name or by id, spaced by comma. Only allowed by POST . X-EcsReceiverMemberships:: Has to be a valid membership id/ids. Adresses all listed memberships. You are able to note multiple membersips spaced by comma. Only allowed by POST . X-EcsSender:: Beschreibt bei einem GET auf eine Message/Queue Ressource den Absender der Nachricht in Form seiner Membership-ID. Wird ausschlie\u00dflich vom ECS gesetzt/beschrieben. Gleichzeitig setzt der ECS X-EcsReceiverCommunities auf die entsprechende Community des Senders. Falls der Absender Teinehmer mehrerer Communities ist, bezeichnet X-!EcsSender eine Liste von Membership-IDs, entsprechend enth\u00e4lt auch X-EcsReceiverCommunities eine korrespondierende Liste an Communities. X-EcsQueryStrings:: Used to provide [[#querystrings|querystrings]].","title":"Application specific headers"},{"location":"ecs2/#http-standard-header","text":"Accept:: Content-Types that are acceptable. Content-Type:: The mime type of the body of the request (used with POST and PUT requests). If-None-Match:: Allows a 304 Not Modified to be returned if content is unchanged. Cookie:: An HTTP cookie previously sent by the server with Set-Cookie. Content-Type:: The mime type of this content. ETag:: An identifier for a specific version of a resource. Location:: Used in redirection, or when a new resource has been created. Set-Cookie:: An HTTP cookie.","title":"HTTP standard header"},{"location":"ecs2/#addressing","text":"In order to communicate to each other you have to provide a unique address. These addresses can either be a so called membership id or a community id or community name. === Membership IDs === These are unique ids in the scope of an ECS. They establish a relationship between a participant and a community: +------------+ 1 N +-----------+ N 1 +-----------+ < > |participants|------------|memberships|------------|communities| < > +------------+ +-----------+ +-----------+ Therefore a participant can be associated to different communities. Every participant can inquire his membership ids by calling the [[#memberships|memberships]] ressource.","title":"Addressing =="},{"location":"ecs2/#community-names-and-ids","text":"A community can be referenced by his community id (cid) or his community name. If you address a community you implicit address all members of the community. This applies also to the sender joining the receiver community if the sender has set his ''community_selfrouting'' flag (default off), otherwise the sender will be implicitly excluded from the receiver list. Every participant can inquire his communities memberships by calling the [[#memberships|memberships]] ressource.","title":"Community names and ids ==="},{"location":"ecs2/#create-a-ressource","text":"If you want to POST to a ressource you have to provide either a X-EcsReceiverMemberships or X-EcsReceiverCommunities header or both together. If you want to address a single membership or a dedicated number of memberships you have to set the {{{X-EcsReceiverMemberships}}} header. This header can have a list of values, e.g. {{{ X-EcsReceiverMemberships: 3,6,47 }}} If you want to address a community you have to set the {{{X-EcsReceiverCommunities}}} header. This header can have a list of values, e.g. {{{ X-EcsReceiverCommunities: SWS,23,25 }}} === Get a ressource === If you GET a ressource then the ECS set the X-EcsSender and the X-EcsReceiverCommunities header to show you from whom and where your received message comes. If there is a list of X-EcsReceiverCommunities values than there is also a list of corresponding X-EcsSender values, i.e. the sending participant is member of multiple communities and addressed his message to multiple communities also, e.g. {{{ X-EcsSender: 3,19 X-EcsReceiverCommunities: UnisBW,SUV }}} This means that this message is addressed to you through two communities (UnisBW, SUV) and the sender has the membership id 3 in UnisBW and 19 in SUV. == Participants == === Community selfrouting === If community selfrouting is activated at the participant (administration area) you can decide if you also want to receive the message which you send to an appropriate community, i.e. you get an event notification (if events on this resource is activated) and you get it listed by its [[#list-ressource|list resource]] and could access it through its [[#queue-ressource|queue resource]]. Of course, as sender of the message you can always access it by its [[#message-resource|message resource]]. === Authentication === All participants have to be authenticated in order to use ECS services. A participant is deemed to be authenticated if the X-EcsAuthId header is set and the ECS knows it. The real authentication take place ''in front of'' the ECS, normally at the Webserver (Proxy). But this depends on configuration/installation of ECS: +-----------+ . < > | ECS | /_\\ < > | (RAILS) | | < > +-----------+ | < > |Rack Module| | < > | (optional)| | < > +-----------+ | Message < > | Webserver | | Flow < > | (Proxy) | | < > +-----------+ | < > | | < > +-----------+ | < > |Participant| | < > +-----------+ Basic Auth ([[/nginx]], [[/apache]]) X.509 certificates ([[/nginx]], [[/apache]]) === Anonymous participants === The creation of a new anonymous participant automatically takes place by every call to an ECS ressource if the calling participant didn't set X-EcsAuthId or Cookie header, by setting a \"Set-Cookie:\" header in the response. On subsequent calls the participant has to provide this cookie in a \"Cookie\" header in order to be identified as the previously calling participant. Additionally those participants were automatically joined to the public community. Further their lifetime will be limited and all ressources will be silently deleted after this lifetime becomes zero. With succesional accesses to ECS this lifetime will be refreshed. For general cookie handling see also [[http://en.wikipedia.org/wiki/HTTP_cookie|HTTP cookie]]. See also [[/examples|examples]]. == Ressource access restrictions == Of course this is best done on webserver. [[/nginx]], [[/apache]] < > < > < > == System Ressources == These are default ressources provided by any ECS installation. < > === Events queue === [[http://freeit.de/documents/ecsa/index.html#events_resource|see central documentation place]] < > === Memberships === [[http://freeit.de/documents/ecsa/index.html#memberships_resource|see central documentation place]] === Authorization through One Touch Tokens === [[http://freeit.de/documents/ecsa/index.html#auths_resource|see central documentation place]] < > == Anwendungsspezifische Ressourcen == Alle Ressourcen die explizit f\u00fcr eine Anwendung bereitgestellt werden sollen, m\u00fcssen vorab beim ECS konfiguriert werden. Dabei stellt der ECS drei Typen von Ressourcen zur Verf\u00fcgung: Message Ressource Listen Ressource Queue Ressource Allgemein steht hinter dem Ressourcenbegriff ein abstraktes Konzept. Ressourcen sind: eindeutig identifizierbar (im HTTP Kontext durch URIs) haben eine oder mehrere Repr\u00e4sentationen (z.B. JSON, XML, Text, ...) F\u00fcr den Ressourcen Begriff ist es unerheblich, wie ihre Repr\u00e4sentation zustande kommt. Ob dies durch eine statische Datei oder durch ein Skript (dynamisch) geschieht ist vollkommen egal. Einer URI/Ressource ist dies von aussen nicht anzusehen (black box) und soll es auch nicht sein (API, Entkopplung). Eine Bewertung einer Ressource aufgrund ''innerer'' Vorg\u00e4nge und Gegebenheiten ist somit ebenfalls unerheblich, ja sogar unzul\u00e4ssig. F\u00fcr alle weiteren Betrachtungen soll folgendes gelten: POST: Liefert {{{201}}} bei erfolgreichem anlegen der Ressource. Bei Fehlern wird generell immer ein {{{4XX}}} oder {{{5XX}}} Status Code zur\u00fcckgegeben. Bei nichtvorhandensein der Ressource ein {{{404}}} Status. Bei Conditional-GET gibt {{{304}}} (Not Modified) an, dass sich die Ressource nicht ge\u00e4ndert hat. Entsprechende Ressource existiert und Operation ist erfolgreich, andernfalls Fehlermeldungen wie vorstehend beschrieben. < > === Ressourcenstruktur === {{{ / / / / /details / / / / / / /receivers / / / /details / / /fifo / / /lifo }}} < > < > === Message Resource === In einer Message Resource k\u00f6nnen Nachrichten f\u00fcr einen bestimmten Empf\u00e4nger abgelegt werden. Der Empf\u00e4nger kann diese Nachrichten ebenfalls \u00fcber diese Ressource abholen. Eine Message Ressource kann so konfiguriert werden, dass die in ihr abgelegten Nachrichten \"persistent\" gehalten werden, um so neuhinzukommenden Participanten gegebenenfalls zum Abruf zur Verf\u00fcgung zu stehen (siehe [[#postrouting|Postrouting]]). Dies erlaubt den Aufbau einfacher und verteilt genutzter Objektdatenbanken. ''GET'': Liefert Nachricht und gibt \"200\" Status Code. < > ''DELETE'': L\u00f6scht Nachricht und gibt \"200\" Status Code. Im Body wird die Repr\u00e4sentation der gel\u00f6schten Ressource zur\u00fcckgegeben.< > ''PUT'': Erneuert Nachricht und gibt \"200\" Status Code. < > ''POST'': unzul\u00e4ssig (\"405\" Method Not Allowed Statuscode). Ressourcenstruktur: /<projectnamespace>/<name>/<id> < > Bsp. einer Message-Ressource: http://isblab.rus.uni-stuttgart.de/numlab/exercises/33 < > < > < > ==== Subresource \"details\" ==== You can ask for detailed (meta) information of a posted message. Only the original sender or a receiver can do that: GET: / / / /details You will get back something like this: { < > \"receivers\": [ < > { < > \"itsyou\": false, < > \"mid\": 1, < > \"cid\": 2 < > \"pid\": 19, < > }, < > { < > \"itsyou\": false, < > \"mid\": 4, < > \"cid\": 3 < > \"pid\": 29, < > } < > ], < > \"senders\": [ < > { < > \"mid\": 5 < > }, < > { < > \"mid\": 7 < > } < > ], < > \"url\": \"courselinks/10\", < > \"content_type\": \"application/json\" < > \"owner\": { < > \"pid\": 3, < > \"itsyou\": true < > } < > } < > The \"receivers\" and \"senders\" have corresponding arrays: The first array entry in \"senders\" has been addressed the first array entry of \"receivers\" and so on. === Listen Ressource === ''GET'': Liefert URI Nachrichten-Liste und \"200\" Status Code. Wenn Liste leer (leerer HTTP-Body, \"Content-Length: 0\") trotzdem \"200\" Statuscode. < > ''DELETE'': unzulaessig (\"405\" Method Not Allowed Statuscode). < > ''PUT'': unzulaessig (\"405\" Method Not Allowed Statuscode). < > ''POST'': Legt neue Message-Ressource an. Ressourcenstruktur: /<projectnamespace>/<name> < > Bsp. einer Listen-Ressource: http://isblab.rus.uni-stuttgart.de/numlab/exercises < > The returned Content-Type will be text/uri-list . The URI list will be represented by [[http://www.rfc-ref.org/RFC-TEXTS/3986/chapter5.html|relative references]]. URIs are specified in [[http://www.rfc-ref.org/RFC-TEXTS/3986|RFC3986]]. ==== Subresource \"details\" ==== Now it's possible to ask for detailed (meta) information of a list resource. All querystrings supported my normal list resources could be used. Only the original sender can do that: GET: / / /details You will get back something like this: [ < > { < > \"senders\": [ < > <<BR>> ` ],`<<BR>> ` \"receivers\": [`<<BR>> < > ], < > \"url\": \"courselinks/35\", < > \"content_type\": \"text/plain\", < > \"owner\": { < > \"pid\": 3, < > \"itsyou\": true < > } < > }, < > { < > \"senders\": [ < > { < > \"mid\": 2 < > } < > ], < > \"receivers\": [ < > { < > \"mid\": 19, < > \"cid\": 2, < > \"pid\": 19, < > \"itsyou\": false < > } < > ], < > \"url\": \"courselinks/36\", < > \"content_type\": \"text/plain\", < > \"owner\": { < > \"pid\": 3, < > \"itsyou\": true < > } < > }, < > { < > \"senders\": [ < > { < > \"mid\": 2 < > } < > ], < > \"receivers\": [ < > { < > \"mid\": 19, < > \"cid\": 2, < > \"pid\": 19, < > \"itsyou\": false < > } < > ], < > \"url\": \"courselinks/37\", < > \"content_type\": \"text/plain\", < > \"owner\": { < > \"pid\": 3, < > \"itsyou\": true < > } < > } < > ] < > The first element of the returned array of the details list subresource probably needs some explanation. Both senders and receivers are empty lists. This mean that the appropriate message isn't any more addressed to any participant. This further implies that all participants which had been addressed in the past have been received the message from their message queue. But why don't has been deleted the message then from the ECS ? Because the resource has been configured to be \"postrouted\". If that has not been the matter, ECS would has been removed the message. < > ==== Querystrings ==== To affect the returned representation you could assign the following querystrings to {{{X-EcsQueryStrings}}} header variable: '''receiver'''< > It's possible to filter the returned index from a list resource to only those items to which the calling participant was formerly an addressed receiver:< > curl .... -H 'X-EcsQueryStrings: receiver=true' -X GET https://server/<namespace>/<name> < > This is also the default, therefore it could be omited. '''sender'''< > It's possible to filter the returned index from a list resource to only those items to which the calling participant is the original sender:< > curl .... -H 'X-EcsQueryStrings: sender=true' -X GET https://server/<namespace>/<name> '''all'''< > It's possible to filter the returned index from a list resource to show all messages either as addressed receiver or as original sender:< > curl .... -H 'X-EcsQueryStrings: all=true' -X GET https://server/<namespace>/<name> Using the {{{X-EcsQueryStrings}}} header variable is the recommended way to use querystrings. If you have to assign multiple querystrings please delimit the querystrings by comma (,). Of course you can also specify the querystring by appending it to the end of the resource url, e.g. curl .... -X GET https://server/<namespace>/<name>?all=true < > < > < > === Queue Resource === Die Queue Resource ist als Subressource einer Listen Ressource realisiert und kann entweder im ''lifo'' oder ''fifo'' Mode angesprochen werden: ''GET'': Liefert erste (fifo) oder letzte (lifo) Message-Ressource zur\u00fcck. Gibt \"200\" Status Code zur\u00fcck auch wenn keine Nachricht in Queue (leerer HTTP-Body, \"Content-Length: 0\"). < > ''DELETE'': unzulaessig (\"405\" Method Not Allowed Statuscode). < > ''POST'': Liefert erste (fifo) oder letzte (lifo) Message-Ressource zur\u00fcck und l\u00f6scht diese. Gibt \"200\" Status Code zur\u00fcck auch wenn keine Nachricht in Queue (leerer HTTP-Body, \"Content-Length: 0\"). < > ''PUT'': unzulaessig (\"405\" Method Not Allowed Statuscode). Ressourcenstruktur: /<projectnamespace>/<name>/fifo oder /<projectnamespace>/<name>/lifo < > Bsp. einer Queue-Ressource: http://isblab.rus.uni-stuttgart.de/numlab/solutions/fifo < > === Postrouting === If a resource has set his ''postroute'' flag, then all new participants will get postrouted this resources e.g. if you have posted some messages to a community named ''testcommunity'' and later joins a new participant to this community, it will get postrouted the former posted messages. < > == Participant Cluster == Nachfolgend wird beschrieben, wie der ECS einen Cluster \u00fcber eine beliebige Anzahl von Participants bildet, diesen Cluster zur Benutzung bereitstellt und wie dieser angesprochen wird. === Cluster-Bildung === Zun\u00e4chst eine Grafik zur Verdeutlichung der Topologie: +---------+ +---------+ +---------+ < > | Partic. | | Partic. | | Partic. | < > | A | | B | | C | < > +---------+ +---------+ +---------+ < > | | | < > | | | < > +-----------------------------------+ < > | ECS | < > +-----------------------------------+ < > | < > | < > +-----------------------------------+ < > | virtueller Participant (Cluster) | < > +--------+--------+--------+--------+ < > | Cluster| Cluster| Cluster| Cluster| < > | Partic.| Partic.| Partic.| Partic.| < > | 1 | 2 | 3 | n | < > +--------+--------+--------+--------+ Der ECS registriert einen virtuellen Participanten d.h. es wird nur ein Zertifikat (Cluster-Zertifikat) generiert und ausgegeben. Dieses eine Zertifikat wird f\u00fcr alle Participanten benutzt, die den gew\u00fcnschten Cluster bilden sollen. Das reduziert zum einen die Zertifikatsverwaltung (generieren, ausgeben, erneuern, ...) und zum anderen l\u00e4\u00dft sich der Cluster vollkommen transparent skalieren, indem man einfach einen weiteren Cluster-Participanten mit dem Cluster-Zertifikat konfiguriert. Dazu sind keine Registrierungen oder Konfigurationen am ECS notwendig. Nachrichten an den Cluster werden \u00fcber eine Queue-Ressource geschickt. Die Adressierung des Clusters erfolgt einfach \u00fcber den virtuellen Participanten. Jeder Cluster-Participant besorgt sich durch ein {{{DELETE}}} auf die Queue-Ressource eine neue Nachricht zur Bearbeitung. Dieses Abholen einer neuen Nachricht l\u00e4uft innerhalb des Clusters konkurrierend unter allen Cluster-Participanten ab (message dispatching). {{{#!wiki comment/dotted @stephan: virtuell heisst scheinbar. Dahinter steckt nat\u00fcrlich keinerlei extra Instanz. Also keine zus\u00e4tzliche Middleware oder sonstiges. Der Cluster wird alleinig durch Verwendung eines gemeinsamen Zertifikats gebildet. @stephan: Es ist eben gerade keine \u00c4nderung im \"Backend\" notwendig. Die Cluster-Participants (Computation-Clients) k\u00f6nnen so bleiben wie sie sind, benutzen aber dasselbe Zertifikat und werden vom ECS dadurch als ein einziger Participant gesehen. Dies bezeichne ich als \"virtuellen\" Participant. }}} === Cluster-Broadcasting === Da die Cluster-Participanten selbst nicht direkt/einzeln adressiert werden k\u00f6nnen aber man trotzdem einzelne Cluster-Participanten ansprechen m\u00f6chte, bedient man sich dem sogenannten \"broadcasting\". Dazu wird eine Message-Ressource (im weiteren als Broadcast-Ressource bezeichnet) verwendet, in die ein Participant eine Nachricht schreibt. Aus dem Cluster heraus wird dann folgenderma\u00dfen auf diese Ressource zugegriffen: 1. Jeder Cluster-Participant pr\u00fcft die Broadcast-Ressource, ob dort eine neue Nachricht eingetroffen ist. Ist dies der Fall wird die Nachricht idempotent aus der Broadcast-Ressource ausgelesen und \u00fcberpr\u00fcft, ob diese f\u00fcr den jeweiligen Cluster-Participanten gedacht ist. Wenn ja verarbeitet der Cluster-Participant die Nachricht. 2. Der ECS wird die Nachrichten in der Broadcast-Ressource nach voreingestellter Zeitdauer l\u00f6schen (garbage collection). < > < > == Filter Plugins == Messages k\u00f6nnen \u00fcber zur Laufzeit hinzuf\u00fcgbare Filter-Plugins manipuliert werden. Ein Filter-Plugin (zuk\u00fcnftig als Filter bezeichnet) kann 5 unterschiedlichen Filter-Queues zugeordnet werden, die jeweils durch eine bestimmte HTTP Operation getriggert werden. Die Filter-Queues werden dabei auf das Dateisystem unterhalb des jeweiligen Basisverzeichnisses der Anwendung abgebildet. Dabei richtet sich die Verzeichnisstruktur nach der Ressourcen-URL ({{{/ / }}} bzw. {{{/ / / }}}): {{{show}}} Filter-Queue. Wird getriggert, sobald eine Queue/Message-Ressource abgerufen wird (GET): < > Filter-Queue Pfad: {{{app/controllers/ /filter/ /show}}} {{{index}}} Filter-Queue. Wird getriggert, sobald eine Listen-Ressource abgerufen wird (GET): < > Filter-Queue Pfad: {{{app/controllers/ /filter/ /index}}} {{{create}}} Filter-Queue. Wird getriggert, sobald eine Listen-Ressource aufgerufen wird (POST): < > Filter-Queue Pfad: {{{app/controllers/ /filter/ /create}}} {{{update}}} Filter-Queue. Wird getriggert, sobald eine Queue/Message-Ressource aufgerufen wird (PUT): < > Filter-Queue Pfad: {{{app/controllers/ /filter/ /update}}} {{{delete}}} Filter-Queue. Wird getriggert, sobald eine Queue/Message-Ressource aufgerufen wird (DELETE): < > Filter-Queue Pfad: {{{app/controllers/ /filter/ /delete}}} Es k\u00f6nnen beliebig viele Filter in den jeweiligen Filter-Queues abgelegt werden, wobei alle Filter entsprechend ihrer lexikalischen Sortierreihenfolge nacheinander aufgerufen werden: unfiltered +-------+ +-------+ +-------+ filtered < > ---------->| 1-fil |-->| 2-fil |...| n-fil |---------> < > message +-------+ +-------+ +-------+ message Wird ein Filter in die entsprechende Filter-Queue (Verzeichnis im Dateisystem) kopiert, wird dieser automatisch zur Laufzeit dem ECS hinzugef\u00fcgt. Es ist keine Konfiguration oder gar ein Neustart des ECS notwenig (zero configuration; convention over configuration). === Filter Template === Der Filter mu\u00df als Ruby Modul vorliegen und folgenden Aufbau besitzen: {{{ modul BeliebigerModulname def self.start # hier kommt der eigentliche Filter end end }}} Nat\u00fcrlich kann \u00fcber die Startmethode des Moduls auch eine entsprechende Klasse f\u00fcr eine objektorientierte Filterimplementierung angesto\u00dfen werden. Generell darf zur Realisierung des Filters auf die komplette Ruby Funktionalit\u00e4t zur\u00fcckgegriffen werden. Als API zum ECS wird durch die Konstante {{{FILTER_API}}} ein entsprechendes Objekt bereitgestellt, mit dessen Hilfe auf die notwendigen ECS Objekte zugegriffen werden kann. Momentan sind dies: {{{FILTER_API.params}}} \u00dcber diesen Hash kann unter anderem auf den Querystring des HTTP Aufrufs zugegriffen werden: {{{ http://ecs.rus.uni-stuttgart.de/numlab/exercises/23?properties=name,description ... elements = FILTER_API.params[\"elements\"].split(\",\") ... }}} {{{FILTER_API.record}}} Dieses Objekt erlaubt unter anderem den Zugriff auf die zu filternde Message: {{{ message = FILTER_API.record.body }}} == Transportprotokoll und Anwendungsprotokoll == Als Transport-/Anwendungsprotokoll dient HTTP 1.1 . == Beispiele == Wie man den ECS konkret nutzt und als Client bedient, wird anhand einiger einfacher [[/examples|Beispiele]] erl\u00e4utert.","title":"Create a ressource ==="},{"location":"ecs2/example/","text":"Beispiele Als Client wird [[http://de.wikipedia.org/wiki/CURL|curl]] verwendet. Persistente Message erzeugen (X.509 zertifizierter Client) Unter der Ressource {{{https://ecs.uni-stuttgart.de/numlab/exercises}}} neue persistente Message erzeugen (POST auf https://ecs.uni-stuttgart.de/numlab/exercises ). Message wird an participant mit membership id 8 adressiert: curl -i -X POST --cacert freeit-root-ca.cert.pem --cert client.cert.pem --key client.key.pem --pass \"ganzgeheim\" \\ -H \"Content-Type: application/json\" \\ -H \"X-EcsReceiverMemberships: 8\" \\ -d ' { \"identifier\" : \"Numerik II, SS10, Aufgabe 1, v1.0\", \"comment\" : \"Um die Studenten mal richtig zu fordern.\", \"name\" : \"Aufgabe 1\", \"description\" : \"Schreiben Sie eine C-Funktion...\" } ' \\ https://ecs.uni-stuttgart.de/numlab/exercises M\u00f6gliche Antwort: HTTP/1.1 201 Created Location: https://ecs.uni-stuttgart.de/numlab/exercises/274 Content-Type: application/json; charset=utf-8 <leerer http-body> Eintrag in Message-Queue erzeugen (anonymer Client) Unter der Ressource {{{https://ecs.uni-stuttgart.de/numlab/solutions}}} neue Message in Message-Queue erzeugen (POST auf {{{https://ecs.uni-stuttgart.de/numlab/solutions}}}). Message wird an participant mit membership id {{{8}}} adressiert. Der Client besitzt zum Zeitpunkt der Anfrage noch kein g\u00fcltiges Cookie (anonym). Ihm wird dieses durch den Respond-Header (R\u00fcckantwort vom ECS) mitgeteilt (siehe auch Core ECS): curl -i -X POST -H \"Content-Type: application/json\" \\ -H \"X-EcsReceiverMemberships: 8\" \\ -d ' { \"comment\" : \"Die war aber schwer!\", \"texts\" : [ { \"name\" : \"editable source\", \"editable\" : false, \"type\" : \"C\", \"emphasis\" : \"medium\", \"content\" : \"void bar() { printf(\"bar!\\n\"); }\" } ], \"solutionPostingTime\" : \"1985-04-13T17:10:00.52Z\" } ' \\ http://ecs.uni-stuttgart.de/numlab/solutions M\u00f6gliche Antwort: HTTP/1.1 201 Created Location: http://ecs.uni-stuttgart.de/numlab/solutions/89 Set-Cookie: ecs_anonymous=59c3aaeead64514b83abcea9f81cece9; path=/ <leerer http-body> Abfragen einer Message Queue durch authentisierten Participanten Die Queue Ressource {{{https://ecs.uni-stuttgart.de/numlab/solutions}}} soll von einem authentisierten Participanten (z.B. Computation client) abgefragt werden. Keine clientseitige zertifikatsbasierte Authentisierung (kein Clientzertifikat und kein Clientpasswort), sondern nur eine serverseitige Authentifikation (mit dem freeit-root-ca.cert.pem Rootzertifikat Pr\u00fcfung des ECS Serverzertifikats): curl -i \\ --cacert freeit-root-ca.cert.pem \\ -H \"X-EcsAuthId: tunichtgut\" \\ -H \"Accept: application/json\" \\ -X POST https://ecs.uni-stuttgart.de/numlab/solutions/fifo M\u00f6gliche Antwort: HTTP/1.1 200 OK Connection: close Date: Thu, 03 Dec 2009 15:08:33 GMT ETag: \"45fd14239a00353b4877cb1bd12822Xt\" Last-Modified: Tue, 13 Oct 2009 15:23:53 GMT Content-Type: application/json; charset=utf-8 X-Runtime: 32 Content-Length: 310 Cache-Control: private, max-age=5 <BODY> Abfragen einer Message Queue durch anonymen Participanten Die Queue Ressource https://ecs.uni-stuttgart.de/numlab/results soll von einem durch Cookie identifizierten (Cookie: ecs_anonymous=92cee57f228a999bbf3c0bbf162d9cf20210a9cb), anonymen Participanten (z.B. Presentation client) abgefragt werden (serverseitige Authentifikation mit dem freeit-root-ca.cert.pem Rootzertifikat): curl -i \\ --cacert freeit-root-ca.cert.pem \\ -H \"Cookie: ecs_anonymous=59c3aaeead64514b83abcea9f81cece9\" \\ -H \"Accept: application/json\" \\ -X POST https://ecs.uni-stuttgart.de/numlab/solutions/fifo M\u00f6gliche Antwort: HTTP/1.1 200 OK Server: nginx/0.7.65 Date: Mon, 29 Mar 2010 23:31:53 GMT Content-Type: application/json; charset=utf-8 Connection: keep-alive ETag: \"86c90986c7397a6df3779550ccf99b9e\" Last-Modified: Mon, 29 Mar 2010 23:29:32 GMT X-EcsReceiverCommunities: 3 X-EcsSender: 8 X-Runtime: 202 Content-Length: 25 Set-Cookie: ecs_anonymous=92cee57f228a999bbf3c0bbf162d9cf20210a9cb; path=/; expires=Tue, 30-Mar-2010 00:31:53 GMT Cache-Control: private, max-age=5 <BODY> Exercises Filter-Plugin Filterung einer Exercises Message-Ressource nach dem {{{name}}} Property: * curl -i -X GET http://ecs.uni-stuttgart.de/numlab/exercises/27?properties=name M\u00f6gliche Antwort: HTTP/1.1 200 OK Connection: close Date: Thu, 03 Dec 2009 15:08:33 GMT ETag: \"45fd14239a00353b4877cb1bd12822ed\" Last-Modified: Tue, 13 Oct 2009 15:23:53 GMT Content-Type: text/html; charset=utf-8 X-Runtime: 32 Content-Length: 310 Cache-Control: private, max-age=5 { \"Exercise\" : { \"name\" : \"Aufgabe 1: C-Funktion zur Integralberechnung\" } } Filterung einer Exercises Message-Ressource nach dem {{{name}}} und {{{description}}} Property: curl -i -X GET http://ecs.uni-stuttgart.de/numlab/exercises/27?properties=name,description M\u00f6gliche Antwort: HTTP/1.1 200 OK Connection: close Date: Thu, 03 Dec 2009 15:08:33 GMT ETag: \"45fd14239a00353b4877cb1bd12822ed\" Last-Modified: Tue, 13 Oct 2009 15:23:53 GMT Content-Type: text/html; charset=utf-8 X-Runtime: 32 Content-Length: 310 Cache-Control: private, max-age=5 { \"Exercise\" : { \"name\" : \"Aufgabe 1: C-Funktion zur Integralberechnung\", \"description\" : \"Schreiben Sie eine C-Funktion trapez(a,b,n,f) zur numerischen Berechnung des Integrals einer Funktion f im Intervall [a,b] mit Hilfe der aufsummierten Sehnentrapezregel mit n \u00e4quidistanten St\u00fctzstellen.\" } }","title":"Beispiele"},{"location":"ecs2/example/#beispiele","text":"Als Client wird [[http://de.wikipedia.org/wiki/CURL|curl]] verwendet.","title":"Beispiele"},{"location":"ecs2/example/#persistente-message-erzeugen-x509-zertifizierter-client","text":"Unter der Ressource {{{https://ecs.uni-stuttgart.de/numlab/exercises}}} neue persistente Message erzeugen (POST auf https://ecs.uni-stuttgart.de/numlab/exercises ). Message wird an participant mit membership id 8 adressiert: curl -i -X POST --cacert freeit-root-ca.cert.pem --cert client.cert.pem --key client.key.pem --pass \"ganzgeheim\" \\ -H \"Content-Type: application/json\" \\ -H \"X-EcsReceiverMemberships: 8\" \\ -d ' { \"identifier\" : \"Numerik II, SS10, Aufgabe 1, v1.0\", \"comment\" : \"Um die Studenten mal richtig zu fordern.\", \"name\" : \"Aufgabe 1\", \"description\" : \"Schreiben Sie eine C-Funktion...\" } ' \\ https://ecs.uni-stuttgart.de/numlab/exercises M\u00f6gliche Antwort: HTTP/1.1 201 Created Location: https://ecs.uni-stuttgart.de/numlab/exercises/274 Content-Type: application/json; charset=utf-8 <leerer http-body>","title":"Persistente Message erzeugen (X.509 zertifizierter Client)"},{"location":"ecs2/example/#eintrag-in-message-queue-erzeugen-anonymer-client","text":"Unter der Ressource {{{https://ecs.uni-stuttgart.de/numlab/solutions}}} neue Message in Message-Queue erzeugen (POST auf {{{https://ecs.uni-stuttgart.de/numlab/solutions}}}). Message wird an participant mit membership id {{{8}}} adressiert. Der Client besitzt zum Zeitpunkt der Anfrage noch kein g\u00fcltiges Cookie (anonym). Ihm wird dieses durch den Respond-Header (R\u00fcckantwort vom ECS) mitgeteilt (siehe auch Core ECS): curl -i -X POST -H \"Content-Type: application/json\" \\ -H \"X-EcsReceiverMemberships: 8\" \\ -d ' { \"comment\" : \"Die war aber schwer!\", \"texts\" : [ { \"name\" : \"editable source\", \"editable\" : false, \"type\" : \"C\", \"emphasis\" : \"medium\", \"content\" : \"void bar() { printf(\"bar!\\n\"); }\" } ], \"solutionPostingTime\" : \"1985-04-13T17:10:00.52Z\" } ' \\ http://ecs.uni-stuttgart.de/numlab/solutions M\u00f6gliche Antwort: HTTP/1.1 201 Created Location: http://ecs.uni-stuttgart.de/numlab/solutions/89 Set-Cookie: ecs_anonymous=59c3aaeead64514b83abcea9f81cece9; path=/ <leerer http-body>","title":"Eintrag in Message-Queue erzeugen (anonymer Client)"},{"location":"ecs2/example/#abfragen-einer-message-queue-durch-authentisierten-participanten","text":"Die Queue Ressource {{{https://ecs.uni-stuttgart.de/numlab/solutions}}} soll von einem authentisierten Participanten (z.B. Computation client) abgefragt werden. Keine clientseitige zertifikatsbasierte Authentisierung (kein Clientzertifikat und kein Clientpasswort), sondern nur eine serverseitige Authentifikation (mit dem freeit-root-ca.cert.pem Rootzertifikat Pr\u00fcfung des ECS Serverzertifikats): curl -i \\ --cacert freeit-root-ca.cert.pem \\ -H \"X-EcsAuthId: tunichtgut\" \\ -H \"Accept: application/json\" \\ -X POST https://ecs.uni-stuttgart.de/numlab/solutions/fifo M\u00f6gliche Antwort: HTTP/1.1 200 OK Connection: close Date: Thu, 03 Dec 2009 15:08:33 GMT ETag: \"45fd14239a00353b4877cb1bd12822Xt\" Last-Modified: Tue, 13 Oct 2009 15:23:53 GMT Content-Type: application/json; charset=utf-8 X-Runtime: 32 Content-Length: 310 Cache-Control: private, max-age=5 <BODY>","title":"Abfragen einer Message Queue durch authentisierten Participanten"},{"location":"ecs2/example/#abfragen-einer-message-queue-durch-anonymen-participanten","text":"Die Queue Ressource https://ecs.uni-stuttgart.de/numlab/results soll von einem durch Cookie identifizierten (Cookie: ecs_anonymous=92cee57f228a999bbf3c0bbf162d9cf20210a9cb), anonymen Participanten (z.B. Presentation client) abgefragt werden (serverseitige Authentifikation mit dem freeit-root-ca.cert.pem Rootzertifikat): curl -i \\ --cacert freeit-root-ca.cert.pem \\ -H \"Cookie: ecs_anonymous=59c3aaeead64514b83abcea9f81cece9\" \\ -H \"Accept: application/json\" \\ -X POST https://ecs.uni-stuttgart.de/numlab/solutions/fifo M\u00f6gliche Antwort: HTTP/1.1 200 OK Server: nginx/0.7.65 Date: Mon, 29 Mar 2010 23:31:53 GMT Content-Type: application/json; charset=utf-8 Connection: keep-alive ETag: \"86c90986c7397a6df3779550ccf99b9e\" Last-Modified: Mon, 29 Mar 2010 23:29:32 GMT X-EcsReceiverCommunities: 3 X-EcsSender: 8 X-Runtime: 202 Content-Length: 25 Set-Cookie: ecs_anonymous=92cee57f228a999bbf3c0bbf162d9cf20210a9cb; path=/; expires=Tue, 30-Mar-2010 00:31:53 GMT Cache-Control: private, max-age=5 <BODY>","title":"Abfragen einer Message Queue durch anonymen Participanten"},{"location":"ecs2/example/#exercises-filter-plugin","text":"Filterung einer Exercises Message-Ressource nach dem {{{name}}} Property: * curl -i -X GET http://ecs.uni-stuttgart.de/numlab/exercises/27?properties=name M\u00f6gliche Antwort: HTTP/1.1 200 OK Connection: close Date: Thu, 03 Dec 2009 15:08:33 GMT ETag: \"45fd14239a00353b4877cb1bd12822ed\" Last-Modified: Tue, 13 Oct 2009 15:23:53 GMT Content-Type: text/html; charset=utf-8 X-Runtime: 32 Content-Length: 310 Cache-Control: private, max-age=5 { \"Exercise\" : { \"name\" : \"Aufgabe 1: C-Funktion zur Integralberechnung\" } } Filterung einer Exercises Message-Ressource nach dem {{{name}}} und {{{description}}} Property: curl -i -X GET http://ecs.uni-stuttgart.de/numlab/exercises/27?properties=name,description M\u00f6gliche Antwort: HTTP/1.1 200 OK Connection: close Date: Thu, 03 Dec 2009 15:08:33 GMT ETag: \"45fd14239a00353b4877cb1bd12822ed\" Last-Modified: Tue, 13 Oct 2009 15:23:53 GMT Content-Type: text/html; charset=utf-8 X-Runtime: 32 Content-Length: 310 Cache-Control: private, max-age=5 { \"Exercise\" : { \"name\" : \"Aufgabe 1: C-Funktion zur Integralberechnung\", \"description\" : \"Schreiben Sie eine C-Funktion trapez(a,b,n,f) zur numerischen Berechnung des Integrals einer Funktion f im Intervall [a,b] mit Hilfe der aufsummierten Sehnentrapezregel mit n \u00e4quidistanten St\u00fctzstellen.\" } }","title":"Exercises Filter-Plugin"},{"location":"rest/","text":"ECS REST Interface Die Kommunikation zwischen ECS und Participants erfolgt via HTTP/1.1 als Transport- und Applikationsprotokoll. F\u00fcr die Datenrepr\u00e4sentation wird JSON verwendet. Encoding und Locale Das Encoding der Resourcenbeschreibung erfolgt in UTF-8. Die Internationalisierung (locale) wird beschrieben durch: language[_territory] , wobei language gem\u00e4\u00df ISO-639-1 und das optionale territory gem\u00e4\u00df ISO3166-1 alpha-2 zu w\u00e4hlen ist. Beispiele: de, de_DE, de_CH, en, en_US, en_GB Datums- und Zeitangaben Alle Datums-/Zeitangaben werden gem\u00e4\u00df rfc3339 gemacht (Internet profile of the ISO 8601 [ISO8601] standard for representation of dates and times using the Gregorian calendar). Fehlermeldungen Alle Fehlermeldungen werden dem Client \u00fcber einen [[http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10|HTTP/1.1 Statuscode]] (rfc2616, Status Code Definitions) zur\u00fcckgemeldet. Momentan werden folgende Statuscodes generiert bzw. unterst\u00fctzt: '''200 OK''' Die Anfrage wurde erfolgreich bearbeitet und das Ergebnis der Anfrage wird in der Antwort \u00fcbertragen. erfolgreiche Anfrage (GET) an die Resourcen {{{econtents, memberships, auths}}} erfolreiches updaten (PUT) der Resource {{{econtents}}} erfolgreiches L\u00f6schen der Resource {{{econtents}}} '''201 Created''' Die Anfrage wurde bearbeitet und eine neue Resource wurde angelegt. Die URL der neuangelegten Resource wird im Location Header zur\u00fcckgegeben. '''400 Bad Request''' Die Anfrage-Nachricht war fehlerhaft aufgebaut. ung\u00fcltiges JSON Format beim Anlegen (POST) einer neuen {{{econtents}}} Resource wurden nicht mindestens folgende Elemente angegeben und g\u00fcltige Werte zugewiesen: title, url, etype, eligibleMembers, status, lang . beim Anlegen (POST) einer neuen {{{auths}}} Resource wurden nicht mindestens folgende Elemente angegeben und g\u00fcltige Werte zugewiesen: eid, mid, hash . '''404 Not Found''' Die angeforderte Resource wurde nicht gefunden. nach abfragen (GET), updaten (PUT) oder l\u00f6schen einer {{{econtents}}} Resource durch Angabe einer nicht existenten {{{eid}}} bzw. nicht zugriffsberechtigten/sichtbaren {{{eid}}} aufgrund fehlender community Zugeh\u00f6rigkeit. nach abfragen (GET) einer {{{memberships}}} Resource durch Angabe einer nicht existenten {{{eid}}}. nach abfragen (GET) einer {{{auths}}} Resource durch Angabe einer ung\u00fcltigen hash id. beim Versuch eine {{{auths}}} Resource anzulegen (POST) f\u00fcr dessen Econtent man nicht der Eigent\u00fcmer ist. '''406 Not Acceptable''' Die angeforderte Ressource steht nicht in der gew\u00fcnschten Form zur Verf\u00fcgung. Resourcen \u00dcbersicht Resource POST GET PUT DELETE econtens x x x x memberships x x auths x x eventqueues x Metadaten \u00dcbersicht Econtent Name Typ Zugriff eid Integer r eligibleMembers Integer Array r/w etype \"application/ecs-course\" r/w lang String Locale r/w owner Integer r status \"online\" \"offline\" title String r/w url String r/w Course Name Typ Zugriff courseID String r/w courseType String r/w credits String r/w lecturer String Array r/w organization String r semesterHours String r/w study_courses String Array r/w term String r/w timePlace Hash r/w begin String Date r/w cycle String r/w end String Time r/w room String r/w","title":"ECS REST Interface"},{"location":"rest/#ecs-rest-interface","text":"Die Kommunikation zwischen ECS und Participants erfolgt via HTTP/1.1 als Transport- und Applikationsprotokoll. F\u00fcr die Datenrepr\u00e4sentation wird JSON verwendet.","title":"ECS REST Interface"},{"location":"rest/#encoding-und-locale","text":"Das Encoding der Resourcenbeschreibung erfolgt in UTF-8. Die Internationalisierung (locale) wird beschrieben durch: language[_territory] , wobei language gem\u00e4\u00df ISO-639-1 und das optionale territory gem\u00e4\u00df ISO3166-1 alpha-2 zu w\u00e4hlen ist. Beispiele: de, de_DE, de_CH, en, en_US, en_GB","title":"Encoding und Locale"},{"location":"rest/#datums-und-zeitangaben","text":"Alle Datums-/Zeitangaben werden gem\u00e4\u00df rfc3339 gemacht (Internet profile of the ISO 8601 [ISO8601] standard for representation of dates and times using the Gregorian calendar).","title":"Datums- und Zeitangaben"},{"location":"rest/#fehlermeldungen","text":"Alle Fehlermeldungen werden dem Client \u00fcber einen [[http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html#sec10|HTTP/1.1 Statuscode]] (rfc2616, Status Code Definitions) zur\u00fcckgemeldet. Momentan werden folgende Statuscodes generiert bzw. unterst\u00fctzt: '''200 OK''' Die Anfrage wurde erfolgreich bearbeitet und das Ergebnis der Anfrage wird in der Antwort \u00fcbertragen. erfolgreiche Anfrage (GET) an die Resourcen {{{econtents, memberships, auths}}} erfolreiches updaten (PUT) der Resource {{{econtents}}} erfolgreiches L\u00f6schen der Resource {{{econtents}}} '''201 Created''' Die Anfrage wurde bearbeitet und eine neue Resource wurde angelegt. Die URL der neuangelegten Resource wird im Location Header zur\u00fcckgegeben. '''400 Bad Request''' Die Anfrage-Nachricht war fehlerhaft aufgebaut. ung\u00fcltiges JSON Format beim Anlegen (POST) einer neuen {{{econtents}}} Resource wurden nicht mindestens folgende Elemente angegeben und g\u00fcltige Werte zugewiesen: title, url, etype, eligibleMembers, status, lang . beim Anlegen (POST) einer neuen {{{auths}}} Resource wurden nicht mindestens folgende Elemente angegeben und g\u00fcltige Werte zugewiesen: eid, mid, hash . '''404 Not Found''' Die angeforderte Resource wurde nicht gefunden. nach abfragen (GET), updaten (PUT) oder l\u00f6schen einer {{{econtents}}} Resource durch Angabe einer nicht existenten {{{eid}}} bzw. nicht zugriffsberechtigten/sichtbaren {{{eid}}} aufgrund fehlender community Zugeh\u00f6rigkeit. nach abfragen (GET) einer {{{memberships}}} Resource durch Angabe einer nicht existenten {{{eid}}}. nach abfragen (GET) einer {{{auths}}} Resource durch Angabe einer ung\u00fcltigen hash id. beim Versuch eine {{{auths}}} Resource anzulegen (POST) f\u00fcr dessen Econtent man nicht der Eigent\u00fcmer ist. '''406 Not Acceptable''' Die angeforderte Ressource steht nicht in der gew\u00fcnschten Form zur Verf\u00fcgung.","title":"Fehlermeldungen"},{"location":"rest/#resourcen-ubersicht","text":"Resource POST GET PUT DELETE econtens x x x x memberships x x auths x x eventqueues x","title":"Resourcen \u00dcbersicht"},{"location":"rest/#metadaten-ubersicht","text":"","title":"Metadaten \u00dcbersicht"},{"location":"rest/#econtent","text":"Name Typ Zugriff eid Integer r eligibleMembers Integer Array r/w etype \"application/ecs-course\" r/w lang String Locale r/w owner Integer r status \"online\" \"offline\" title String r/w url String r/w","title":"Econtent"},{"location":"rest/#course","text":"Name Typ Zugriff courseID String r/w courseType String r/w credits String r/w lecturer String Array r/w organization String r semesterHours String r/w study_courses String Array r/w term String r/w timePlace Hash r/w begin String Date r/w cycle String r/w end String Time r/w room String r/w","title":"Course"},{"location":"rest/auths/","text":"auths POST, auths: Der ECS speichert einen eindeutigen hash Wert zur sp\u00e4teren Autorisation. Zus\u00e4tzlich m\u00fcssen noch die mid des konsumierenden Participanten und eid des Econtent angegeben werden. Optional sind sov (start of validation time) und eov (end of validation time). Ein auth Eintrag hat bei Nichtangabe von sov, eov eine vom ECS bestimmte Lebensdauer (Standard 30 Sekunden), d.h. wird nach Anlegen eines Auth Objekts dieses nicht innerhalb der n\u00e4chsten 30sec abgerufen, verf\u00e4llt der Auth Eintrag und ein nachtr\u00e4glicher Autorisationsversuch schl\u00e4gt fehl. Diese Zeitspanne sollte f\u00fcr den anschliessenden Forward und die Anfrage des econtentanbietenden Participanten ausreichen. Werden hingegen sov, eov angegeben, steht der Auth Eintrag nur innerhalb dieser beiden Zeiten f\u00fcr eine Autorisation zur Verf\u00fcgung (asynchrones konsumieren von Econtentlinks). Liefert als HTTP Status Code entweder \"201 Created\" f\u00fcr eine erfolgreiches Anlegen oder \"400 bzw. 404\" f\u00fcr Fehler. Auth Eintr\u00e4ge k\u00f6nnen nur von Participanten gemacht werden, dessen mid als owner f\u00fcr den jeweiligen eid im entsprechenden Econtent eingetragen sind (ansonsten HTTP Status Code 404). {#auths_abr} Dem anfragenden Participanten wird zus\u00e4tzlich ein optionales und eindeutiges K\u00fcrzel abr des konsumierenden Participanten zur Verf\u00fcgung gestellt. Dies kann, wenn vorhanden, z.B. zur zus\u00e4tzlichen Kennzeichnung von neu anzulegenden Accounts auf dem Econtent anbietenden Participanten verwendet werden (siehe auch memberships ). Wertebereiche bzw. Infos f\u00fcr einzelne Attribute: \"hash\" : Eine einfache M\u00f6glichkeit zur Generierung eines eindeutigen Hash's: {{{ echo \" date ecs.uni-stuttgart.de\" | sha1sum}}}, also einen sha1 Hash \u00fcber das aktuelle Systemdatum und seinen jeweiligen DNS. Der Hash darf eine L\u00e4nge von 256 Zeichen nicht \u00fcberschreiten. Der Algorithmus zur Erzeugung des Hashwertes sollte geheim und/oder Zufallskomponenten enthalten. \"sov\" : steht f\u00fcr {{{start of validation}}} time. Zeitangabe im Format nach rfc3339. Optionales Datum. Muss immer gemeinsam mit {{{eov}}} angegeben werden. \"eov\" : steht f\u00fcr {{{end of validation}}} time. Zeitangabe im Format nach rfc3339. Optionales Datum. Muss immer gemeinsam mit {{{sov}}} angegeben werden. https://infolms.rus.uni-stuttgart.de:7923/auths [ { \"hash\": \"87c1141e5ec3adf194b2ea600974b79f494027ff\", \"mid\" : 1, \"eid\" : 1, \"sov\" : \"2008-01-07T13:30+01:00\", \"eov\" : \"2008-02-14T15:00+01:00\" }, ... ] GET, auths/<hash>: : Gibt entsprechend nachgefragte {{{auths}}} Resource zur\u00fcck. Bei vorhandenem Hash ( ) wird als HTTP Status Code \"200 OK\" und der entsprechende Auths-Eintrag zur\u00fcckgegeben, ansonsten HTTP Status Code \"404\" f\u00fcr eine unberechtigte Anfrage. https://infolms.rus.uni-stuttgart.de:7923/auths/87c1141e5ec3adf194b2ea600974b79f494027ff [ { \"hash\": \"87c1141e5ec3adf194b2ea600974b79f494027ff\", \"mid\" : 1, \"eid\" : 1, \"sov\" : \"2008-01-07T13:30+01:00\", \"eov\" : \"2008-02-14T15:00+01:00\", \"abr\" : \"S\" } ]","title":"Auths"},{"location":"rest/auths/#auths","text":"POST, auths: Der ECS speichert einen eindeutigen hash Wert zur sp\u00e4teren Autorisation. Zus\u00e4tzlich m\u00fcssen noch die mid des konsumierenden Participanten und eid des Econtent angegeben werden. Optional sind sov (start of validation time) und eov (end of validation time). Ein auth Eintrag hat bei Nichtangabe von sov, eov eine vom ECS bestimmte Lebensdauer (Standard 30 Sekunden), d.h. wird nach Anlegen eines Auth Objekts dieses nicht innerhalb der n\u00e4chsten 30sec abgerufen, verf\u00e4llt der Auth Eintrag und ein nachtr\u00e4glicher Autorisationsversuch schl\u00e4gt fehl. Diese Zeitspanne sollte f\u00fcr den anschliessenden Forward und die Anfrage des econtentanbietenden Participanten ausreichen. Werden hingegen sov, eov angegeben, steht der Auth Eintrag nur innerhalb dieser beiden Zeiten f\u00fcr eine Autorisation zur Verf\u00fcgung (asynchrones konsumieren von Econtentlinks). Liefert als HTTP Status Code entweder \"201 Created\" f\u00fcr eine erfolgreiches Anlegen oder \"400 bzw. 404\" f\u00fcr Fehler. Auth Eintr\u00e4ge k\u00f6nnen nur von Participanten gemacht werden, dessen mid als owner f\u00fcr den jeweiligen eid im entsprechenden Econtent eingetragen sind (ansonsten HTTP Status Code 404). {#auths_abr} Dem anfragenden Participanten wird zus\u00e4tzlich ein optionales und eindeutiges K\u00fcrzel abr des konsumierenden Participanten zur Verf\u00fcgung gestellt. Dies kann, wenn vorhanden, z.B. zur zus\u00e4tzlichen Kennzeichnung von neu anzulegenden Accounts auf dem Econtent anbietenden Participanten verwendet werden (siehe auch memberships ). Wertebereiche bzw. Infos f\u00fcr einzelne Attribute: \"hash\" : Eine einfache M\u00f6glichkeit zur Generierung eines eindeutigen Hash's: {{{ echo \" date ecs.uni-stuttgart.de\" | sha1sum}}}, also einen sha1 Hash \u00fcber das aktuelle Systemdatum und seinen jeweiligen DNS. Der Hash darf eine L\u00e4nge von 256 Zeichen nicht \u00fcberschreiten. Der Algorithmus zur Erzeugung des Hashwertes sollte geheim und/oder Zufallskomponenten enthalten. \"sov\" : steht f\u00fcr {{{start of validation}}} time. Zeitangabe im Format nach rfc3339. Optionales Datum. Muss immer gemeinsam mit {{{eov}}} angegeben werden. \"eov\" : steht f\u00fcr {{{end of validation}}} time. Zeitangabe im Format nach rfc3339. Optionales Datum. Muss immer gemeinsam mit {{{sov}}} angegeben werden. https://infolms.rus.uni-stuttgart.de:7923/auths [ { \"hash\": \"87c1141e5ec3adf194b2ea600974b79f494027ff\", \"mid\" : 1, \"eid\" : 1, \"sov\" : \"2008-01-07T13:30+01:00\", \"eov\" : \"2008-02-14T15:00+01:00\" }, ... ] GET, auths/<hash>: : Gibt entsprechend nachgefragte {{{auths}}} Resource zur\u00fcck. Bei vorhandenem Hash ( ) wird als HTTP Status Code \"200 OK\" und der entsprechende Auths-Eintrag zur\u00fcckgegeben, ansonsten HTTP Status Code \"404\" f\u00fcr eine unberechtigte Anfrage. https://infolms.rus.uni-stuttgart.de:7923/auths/87c1141e5ec3adf194b2ea600974b79f494027ff [ { \"hash\": \"87c1141e5ec3adf194b2ea600974b79f494027ff\", \"mid\" : 1, \"eid\" : 1, \"sov\" : \"2008-01-07T13:30+01:00\", \"eov\" : \"2008-02-14T15:00+01:00\", \"abr\" : \"S\" } ]","title":"auths"},{"location":"rest/econtent/","text":"econtents GET, econtents: Listet alle verf\u00fcgbaren eContent-Angebote des anfragenden Participanten auf, sofern er mit einer seiner MembershipIDs ( mid ) in eligibleMembers eines econtents vorkommt. Das Attribut eligibleMembers listet dabei alle MembershipIDs ( mid ) auf, die den Econtent verlinken bzw. referenzieren d\u00fcrfen. Die dem Attribut owner zugeordnete mid repr\u00e4sentiert die Heimatplattform bzw. den eigentlichen Anbieter des Econtent. https://infolms.rus.uni-stuttgart.de:7923/econtents [ { \"url\" : \"https://il3.stgt.de/course23\", \"title\" : \"HM II Einf\u00fchrung\", \"eligibleMembers\" : [1,3], \"eid\": 1, \"owner\": 1, ... }, { \"url\" : \"https://il3.stgt.de/course15\", \"title\" : \"Datenverarbeitung I\", \"eligibleMembers\" : [2,3,5], \"eid\": 43, \"owner\": 2, ... } ] GET, econtents/<eid>: Gibt eContent mit der eContentID= zur\u00fcck. Dies funktioniert auch, wenn der aufrufende Participant nicht in eligibleMembers des econtents gelistet ist, sondern dort als owner eingetragen ist: https://infolms.rus.uni-stuttgart.de:7923/econtent/125 [ { \"url\" : \"https://il3.stgt.de/course23\", \"title\" : \"HM II Einf\u00fchrung\", \"eid\": 125 ... } ] POST, econtents: Generiert neuen eContent. Nachfolgend sind alle m\u00f6glichen Attribute f\u00fcr den Course-Econtent aufgef\u00fchrt. Es m\u00fcssen mindestens \"url\", \"title\", \"eligibleMembers\", \"etype\", \"status\",\"lang\" und \"owner\" angegeben werden. Wertebereiche bzw. Infos f\u00fcr einzelne Attribute: \"status\" : \"online\" | \"offline\" \"etype\" : \"application/ecs-course\" \"eligibleMembers\" : g\u00fcltige MembershipIDs ( mid ). F\u00fcr gew\u00f6hnlich gewonnen aus Abfrage der memberships Resource welche dem Dozenten zur Auswahl \u00fcber Formular dargestellt werden. \"lang\" : \"de_DE\" \"owner\": g\u00fcltige MembershipIDs ( mid ), d.h. der Participant muss dieser mid zugeordnet sein. https://infolms.rus.uni-stuttgart.de:7923/econtents { \"timePlace\": { \"room\": \"Raum M 2.11\", \"cycle\": \"w\u00f6ch.\", \"begin\": \"2008-01-10T13:30:00+01:00\", \"end\": \"2008-01-10T15:00:00+01:00\" }, \"lecturer\": [ \"Prof. Dr. Stephan Nussberger\", \"Dipl.-Ing. Markus Sewald\" ], \"courseID\": \"course5:220\", \"semesterHours\": \"5\", \"study_courses\": [ \"Technische Biologie\", \"Elektrotechnik\" ], \"url\": \"https://ilias3.uni-stuttgart.de/goto.php?target=crs_2737&client_id=Uni_Stuttgart\", \"title\": \"Hochgeschwindigkeitskommunikationsnetze\", \"abstract\": \"Moderne media access Verfahren als Wegbereiter der Hochgeschwindigkeitskommunikation.\", \"eligibleMembers\": [2,1,3], \"owner\": 1, \"courseType\": \"Vorlesung\", \"lang\": \"de_DE\", \"etype\": \"application/ecs-course\", \"status\": \"online\", \"credits\": \"10\", \"term\": \"WS 06/07\" } eligibleMembers sind MembershipIDs . PUT, econtents/<eid>: Updated eContent mit der eContentID=\\<eid>: https://infolms.rus.uni-stuttgart.de:7923/econtents/125 { \"lecturer\" : [ \"Prof. Uli Ganzgenau\", \"Dr. Udo Grenzwert\", \"Dipl.-Ing Manfred Durchblick\" ], \"credits\": 23 } DELETE, econtents/<eid> L\u00f6scht eContent mit der eContentID= : https://infolms.rus.uni-stuttgart.de:7923/econtents/125","title":"Econtent"},{"location":"rest/econtent/#econtents","text":"GET, econtents: Listet alle verf\u00fcgbaren eContent-Angebote des anfragenden Participanten auf, sofern er mit einer seiner MembershipIDs ( mid ) in eligibleMembers eines econtents vorkommt. Das Attribut eligibleMembers listet dabei alle MembershipIDs ( mid ) auf, die den Econtent verlinken bzw. referenzieren d\u00fcrfen. Die dem Attribut owner zugeordnete mid repr\u00e4sentiert die Heimatplattform bzw. den eigentlichen Anbieter des Econtent. https://infolms.rus.uni-stuttgart.de:7923/econtents [ { \"url\" : \"https://il3.stgt.de/course23\", \"title\" : \"HM II Einf\u00fchrung\", \"eligibleMembers\" : [1,3], \"eid\": 1, \"owner\": 1, ... }, { \"url\" : \"https://il3.stgt.de/course15\", \"title\" : \"Datenverarbeitung I\", \"eligibleMembers\" : [2,3,5], \"eid\": 43, \"owner\": 2, ... } ] GET, econtents/<eid>: Gibt eContent mit der eContentID= zur\u00fcck. Dies funktioniert auch, wenn der aufrufende Participant nicht in eligibleMembers des econtents gelistet ist, sondern dort als owner eingetragen ist: https://infolms.rus.uni-stuttgart.de:7923/econtent/125 [ { \"url\" : \"https://il3.stgt.de/course23\", \"title\" : \"HM II Einf\u00fchrung\", \"eid\": 125 ... } ] POST, econtents: Generiert neuen eContent. Nachfolgend sind alle m\u00f6glichen Attribute f\u00fcr den Course-Econtent aufgef\u00fchrt. Es m\u00fcssen mindestens \"url\", \"title\", \"eligibleMembers\", \"etype\", \"status\",\"lang\" und \"owner\" angegeben werden. Wertebereiche bzw. Infos f\u00fcr einzelne Attribute: \"status\" : \"online\" | \"offline\" \"etype\" : \"application/ecs-course\" \"eligibleMembers\" : g\u00fcltige MembershipIDs ( mid ). F\u00fcr gew\u00f6hnlich gewonnen aus Abfrage der memberships Resource welche dem Dozenten zur Auswahl \u00fcber Formular dargestellt werden. \"lang\" : \"de_DE\" \"owner\": g\u00fcltige MembershipIDs ( mid ), d.h. der Participant muss dieser mid zugeordnet sein. https://infolms.rus.uni-stuttgart.de:7923/econtents { \"timePlace\": { \"room\": \"Raum M 2.11\", \"cycle\": \"w\u00f6ch.\", \"begin\": \"2008-01-10T13:30:00+01:00\", \"end\": \"2008-01-10T15:00:00+01:00\" }, \"lecturer\": [ \"Prof. Dr. Stephan Nussberger\", \"Dipl.-Ing. Markus Sewald\" ], \"courseID\": \"course5:220\", \"semesterHours\": \"5\", \"study_courses\": [ \"Technische Biologie\", \"Elektrotechnik\" ], \"url\": \"https://ilias3.uni-stuttgart.de/goto.php?target=crs_2737&client_id=Uni_Stuttgart\", \"title\": \"Hochgeschwindigkeitskommunikationsnetze\", \"abstract\": \"Moderne media access Verfahren als Wegbereiter der Hochgeschwindigkeitskommunikation.\", \"eligibleMembers\": [2,1,3], \"owner\": 1, \"courseType\": \"Vorlesung\", \"lang\": \"de_DE\", \"etype\": \"application/ecs-course\", \"status\": \"online\", \"credits\": \"10\", \"term\": \"WS 06/07\" } eligibleMembers sind MembershipIDs . PUT, econtents/<eid>: Updated eContent mit der eContentID=\\<eid>: https://infolms.rus.uni-stuttgart.de:7923/econtents/125 { \"lecturer\" : [ \"Prof. Uli Ganzgenau\", \"Dr. Udo Grenzwert\", \"Dipl.-Ing Manfred Durchblick\" ], \"credits\": 23 } DELETE, econtents/<eid> L\u00f6scht eContent mit der eContentID= : https://infolms.rus.uni-stuttgart.de:7923/econtents/125","title":"econtents"},{"location":"rest/eventqueues/","text":"eventqueues GET, eventqueues: :Informiert einen Participanten \u00fcber etwaige Zustands\u00e4nderungen seiner zugriffsberechtigten econtents Objekte. Ein Abruf der eventqueues Resource liefert alle dem ECS zum Zeitpunkt des Abrufes bekannten Zustands\u00e4nderungen der jeweiligen econtents Objekte in Form einer eid (Econtents ID) und eines op Codes (operation code) dem aufrufenden Participanten zur\u00fcck. Die eid repr\u00e4sentiert nat\u00fcrlich den zustandsver\u00e4nderten Econtent und der op Code gibt die Art der Ver\u00e4nderung an, welche die Resource auf dem ECS erfahren hat. Dabei haben die op Codes folgende Bedeutung: \"create\": Auf dem ECS wurde ein neuer Econtent angelegt. Dem Participanten steht deshalb ein neuer Econtent zur Verf\u00fcgung. \"update\": Ein bestehender Econtent hat auf dem ECS eine Zustands\u00e4nderung erfahren. Zustands\u00e4nderung kann in diesem Fall jedwede Aenderung eines Metadatums sein. Dies kann f\u00fcr den Participanten unter anderem ein L\u00f6schen oder neu Anlegen eines Econtentlinks bedeuten oder eben ein aktualisieren eines bestehenden Links. \"delete\": Der Econtent wurde auf dem ECS gel\u00f6scht. Alle Econtentlinks die diesen Econtent betreffen m\u00fcssen auf dem Participanten gel\u00f6scht werden. Es obliegt dem Participanten, ob und wann eine Aktualisierung seiner Econtent Objekte durch sukzessives Abrufen der econtents/<eid> Objekte vom ECS erfolgt. Ruft ein Participant seine econtents Resource ab (alle f\u00fcr ihn zugriffsberechtigte Econtent-Objkete werden zur\u00fcckgegeben), dann setzt der ECS die Eventqueue des Participanten zur\u00fcck (alle Eintr\u00e4ge werden gel\u00f6scht). Dies sollte immer dann erfolgen, wenn ein Participant sich neu beim ECS anmeldet. Erst nach mindestens einmaligem Abruf der econtents Resource (Erstsynchronisation) enth\u00e4lt die jeweilige Eventqueue g\u00fcltige Daten f\u00fcr ihren Participanten und kann dann f\u00fcr die weitere Synchronisation verwendet werden. Fr\u00e4gt der Participant daraufhin seine eventqueues Resource ab, bekommt er eine leere Liste. Dasselbe geschieht auch nach Abruf der eventqueues Resource. Ein fehlerfreier Aufruf wird mit einem HTTP Status Code \"200 OK\" quittiert. Bekommt ein Participant nach Abruf einer eventqueues/<eid> Resource den HTTP Status Code \"404 Not Found\" zur\u00fcck, hat er dies so zu behandeln, als h\u00e4tte er \u00fcber seine Eventqueue einen \"op\":\"delete\" bzgl. der erhalten. https://ecs.uni-stuttgart.de:7923/eventqueues [ {\"econtents\":{\"eid\":45,\"op\":\"create\"}}, {\"econtents\":{\"eid\":31,\"op\":\"update\"}}, ... ] Commandqueue Die Eventqueue wird erweitert zu einer Commandqueue. Die neuen Objekte der Eventqueue (Commands) sollen eine Art \"remote control\" bzgl. der Participanten erm\u00f6glichen. Dies dient in erster Linie dazu, eine Neusynchronisation zwischen Participant und ECS herzustellen, ohne dass dazu ein h\u00e4ndisches Eingreifen seitens der Administratoren der Participanten vonn\u00f6ten w\u00e4re. Diese Commands werden ausschlie\u00dflich vom ECS Admin manuell getriggert. Der Participant liest die Resourcen memberships und econtents neu ein: {\"cmd\":{\"admin\":\"reset\"}} Der Participant reexportiert (l\u00f6schen und neuanlegen) seinen freigegebenen Econtent und liest anschlie\u00dfend die Resourcen memberships und econtents neu ein: {\"cmd\":{\"admin\":\"reset_all\"}} Vornehmlich f\u00fcr Testzwecke kann jeder Participant die jeweiligen Commands auch selbst triggern, indem er einfach folgende Resourcen aufruft (POST): POST, eventqueues/adminReset POST, eventqueues/adminResetAll Ein fehlerfreier Aufruf wird mit einem HTTP Status Code \"201 Created\" quittiert andernfalls \"500 Internal Server Error\". Danach kann der Participant \u00fcber seine eventqueue Resource die Kommandos abholen und ausf\u00fchren. Ein curl Aufruf zum Triggern der eventqueues/adminReset Resource f\u00fcr den beluga Participanten k\u00f6nnte demnach folgenderma\u00dfen aussehen: curl --cacert freeit-ca-cert.pem --cert beluga-cert.pem --key beluga-key.pem --pass \"nixfuerungut\" -H \"Content-Type: application/json\" -H \"Accept: application/json\" -i -X POST https://ecs.uni-stuttgart.de:7923/eventqueues/adminReset","title":"Eventqueues"},{"location":"rest/eventqueues/#eventqueues","text":"GET, eventqueues: :Informiert einen Participanten \u00fcber etwaige Zustands\u00e4nderungen seiner zugriffsberechtigten econtents Objekte. Ein Abruf der eventqueues Resource liefert alle dem ECS zum Zeitpunkt des Abrufes bekannten Zustands\u00e4nderungen der jeweiligen econtents Objekte in Form einer eid (Econtents ID) und eines op Codes (operation code) dem aufrufenden Participanten zur\u00fcck. Die eid repr\u00e4sentiert nat\u00fcrlich den zustandsver\u00e4nderten Econtent und der op Code gibt die Art der Ver\u00e4nderung an, welche die Resource auf dem ECS erfahren hat. Dabei haben die op Codes folgende Bedeutung: \"create\": Auf dem ECS wurde ein neuer Econtent angelegt. Dem Participanten steht deshalb ein neuer Econtent zur Verf\u00fcgung. \"update\": Ein bestehender Econtent hat auf dem ECS eine Zustands\u00e4nderung erfahren. Zustands\u00e4nderung kann in diesem Fall jedwede Aenderung eines Metadatums sein. Dies kann f\u00fcr den Participanten unter anderem ein L\u00f6schen oder neu Anlegen eines Econtentlinks bedeuten oder eben ein aktualisieren eines bestehenden Links. \"delete\": Der Econtent wurde auf dem ECS gel\u00f6scht. Alle Econtentlinks die diesen Econtent betreffen m\u00fcssen auf dem Participanten gel\u00f6scht werden. Es obliegt dem Participanten, ob und wann eine Aktualisierung seiner Econtent Objekte durch sukzessives Abrufen der econtents/<eid> Objekte vom ECS erfolgt. Ruft ein Participant seine econtents Resource ab (alle f\u00fcr ihn zugriffsberechtigte Econtent-Objkete werden zur\u00fcckgegeben), dann setzt der ECS die Eventqueue des Participanten zur\u00fcck (alle Eintr\u00e4ge werden gel\u00f6scht). Dies sollte immer dann erfolgen, wenn ein Participant sich neu beim ECS anmeldet. Erst nach mindestens einmaligem Abruf der econtents Resource (Erstsynchronisation) enth\u00e4lt die jeweilige Eventqueue g\u00fcltige Daten f\u00fcr ihren Participanten und kann dann f\u00fcr die weitere Synchronisation verwendet werden. Fr\u00e4gt der Participant daraufhin seine eventqueues Resource ab, bekommt er eine leere Liste. Dasselbe geschieht auch nach Abruf der eventqueues Resource. Ein fehlerfreier Aufruf wird mit einem HTTP Status Code \"200 OK\" quittiert. Bekommt ein Participant nach Abruf einer eventqueues/<eid> Resource den HTTP Status Code \"404 Not Found\" zur\u00fcck, hat er dies so zu behandeln, als h\u00e4tte er \u00fcber seine Eventqueue einen \"op\":\"delete\" bzgl. der erhalten. https://ecs.uni-stuttgart.de:7923/eventqueues [ {\"econtents\":{\"eid\":45,\"op\":\"create\"}}, {\"econtents\":{\"eid\":31,\"op\":\"update\"}}, ... ]","title":"eventqueues"},{"location":"rest/eventqueues/#commandqueue","text":"Die Eventqueue wird erweitert zu einer Commandqueue. Die neuen Objekte der Eventqueue (Commands) sollen eine Art \"remote control\" bzgl. der Participanten erm\u00f6glichen. Dies dient in erster Linie dazu, eine Neusynchronisation zwischen Participant und ECS herzustellen, ohne dass dazu ein h\u00e4ndisches Eingreifen seitens der Administratoren der Participanten vonn\u00f6ten w\u00e4re. Diese Commands werden ausschlie\u00dflich vom ECS Admin manuell getriggert. Der Participant liest die Resourcen memberships und econtents neu ein: {\"cmd\":{\"admin\":\"reset\"}} Der Participant reexportiert (l\u00f6schen und neuanlegen) seinen freigegebenen Econtent und liest anschlie\u00dfend die Resourcen memberships und econtents neu ein: {\"cmd\":{\"admin\":\"reset_all\"}} Vornehmlich f\u00fcr Testzwecke kann jeder Participant die jeweiligen Commands auch selbst triggern, indem er einfach folgende Resourcen aufruft (POST): POST, eventqueues/adminReset POST, eventqueues/adminResetAll Ein fehlerfreier Aufruf wird mit einem HTTP Status Code \"201 Created\" quittiert andernfalls \"500 Internal Server Error\". Danach kann der Participant \u00fcber seine eventqueue Resource die Kommandos abholen und ausf\u00fchren. Ein curl Aufruf zum Triggern der eventqueues/adminReset Resource f\u00fcr den beluga Participanten k\u00f6nnte demnach folgenderma\u00dfen aussehen: curl --cacert freeit-ca-cert.pem --cert beluga-cert.pem --key beluga-key.pem --pass \"nixfuerungut\" -H \"Content-Type: application/json\" -H \"Accept: application/json\" -i -X POST https://ecs.uni-stuttgart.de:7923/eventqueues/adminReset","title":"Commandqueue"},{"location":"rest/memberships/","text":"memberships Memberships stellen eine eindeutige Beziehung zwischen einem Participanten (E-Learningplattform) und einer Community her und werden vom ECS Administrator auf Anfrage/Antrag vergeben/eingetragen. Sollte ein Participant erstmalig in einer Community des ECS in Erscheinung treten, wird ihm vom ECS Admin ein entsprechendes Zertifikat (X509, SSL) ausgestellt, was ihm den sicheren und authentifizierten Zugang zum ECS erm\u00f6glicht. F\u00fcr alle etwaigen weiteren Community Mitgliedschaften auf diesem ECS wird dasselbe Zertifikat verwendet und es muss vom ECS Admin nur ein weiterer Communityeingetrag gemacht werden. Der ECS Admin wird dem Participanten seine certid , seine neuen Community Mitgliedschaften sowie seine damit verkn\u00fcpften MembershipIDs explizit per email mitteilen (diese Status-Info geht auch an alle bisherigen Community Mitglieder). F\u00fcr Plattformen die nicht mehrere communities unterst\u00fctzen, sollten diese ihren Community Eintrag anhand ihrer zugewiesenen MembershipID ( mid ) oder ihrer certid aus der memberships Repr\u00e4sentation extrahieren und entsprechend anzeigen. Die certid wird direkt aus dem ausgestellten Zertifikat gewonnen und kann auch vom Participanten vonselben ermittelt werden ( certid entspricht \"Serial Number:\" des Zertifikats). Zus\u00e4tzlich f\u00fchrt der ECS ein eindeutiges K\u00fcrzel {#abr} abr (abreviation) f\u00fcr jeden Participanten. Dieses K\u00fcrzel wird vom ECS nur optional angeboten, doch falls vorhanden, ist dieses eindeutig bzgl. des anbietenden ECS (siehe auch Authorisation ). GET, memberships: : Gibt alle Participanten zugeordent zu ihrer jeweiligen Community zur\u00fcck, in der auch der anfragende Participant Mitglied ist. https://infolms.rus.uni-stuttgart.de:7923/memberships [ { \"community\": { \"name\": \"SUV\", \"description\": \"S\u00fcddeutscher Universit\u00e4ts Verbund\" }, \"participants\": [ { \"participantname\": \"Universit\u00e4t Stuttgart\", \"description\": \"Allgemeine eLearningplattform betrieben am Rechenzentrum Uni Stuttgart.\", \"dns\": \"ecs.uni-stuttgart.de\", \"email: \"ecs@uni-stuttgart.de\", \"organization\": \"Uni Stuttgart\", \"mid\": 5, \"certid: \"F55B205682709393\", \"abr\": \"S\" }, \"participantname\": \"Universit\u00e4t Ulm\", \"description\": \"Zentrale ELearningplattform.\", \"dns\": \"ecs.uni-ulm.de\", \"email: \"ecs@uni-ulm.de\", \"organization\": \"Uni Ulm\", \"mid\": 24 \"certid\": \"F55B205682709394\", \"abr\": \"UL\" } ] }, { \"community\": { \"name\": \"WAREM\", \"description\": \"Internationally Oriented Master of Science Program Water Resources Engineering and Management - WAREM\" }, \"participants\": [ { \"participantname\": \"Universit\u00e4t Stuttgart\", \"description\": \"Allgemeine eLearningplattform betrieben am Rechenzentrum Uni Stuttgart.\", \"dns\": \"ecs.uni-stuttgart.de\", \"email: \"warem@uni-stuttgart.de\", \"organization\": \"Uni Stuttgart\", \"mid\": 9 \"certid\": \"F55B205682709393\", \"abr\": \"S\" }, \"participantname\": \"Universit\u00e4t Karlsruhe\", \"description\": \"E-Learningplattform der Fakult\u00e4t Informatik.\", \"dns\": \"ecs.uni-karlsruhe.de\", \"email: \"ecs@uni-karlsruhe.de\", \"organization\": \"Uni Karlsruhe\", \"mid\": 12 \"certid\": \"F55B205682709395\", \"abr\": \"KA\" } ] } ] GET, memberships/<mid>: Gibt eine Liste von Community / Participanten Paare aus, bei der der nachgefragte Participant Mitglied ist. https://infolms.rus.uni-stuttgart.de:7923/memberships/5 [ { \"community\": { \"name\": \"SUV\", \"description\": \"S\u00fcddeutscher Universit\u00e4ts Verbund\" }, \"participants\": [ { \"participantname\": \"Universit\u00e4t Stuttgart\", \"description\": \"Allgemeine eLearningplattform betrieben am Rechenzentrum Uni Stuttgart.\", \"dns\": \"ecs.uni-stuttgart.de\", \"email: \"ecs@uni-stuttgart.de\", \"organization\": \"Uni Stuttgart\", \"mid\": 5 \"certid: \"F55B205682709393\", \"abr: \"S\" } ] } ] DELETE, memberships/<id> L\u00f6scht Membership mit der mid= . Nur der Besitzer der Membership kann diese auch l\u00f6schen : https://infolms.rus.uni-stuttgart.de:7923/memberships/5","title":"memberships"},{"location":"rest/memberships/#memberships","text":"Memberships stellen eine eindeutige Beziehung zwischen einem Participanten (E-Learningplattform) und einer Community her und werden vom ECS Administrator auf Anfrage/Antrag vergeben/eingetragen. Sollte ein Participant erstmalig in einer Community des ECS in Erscheinung treten, wird ihm vom ECS Admin ein entsprechendes Zertifikat (X509, SSL) ausgestellt, was ihm den sicheren und authentifizierten Zugang zum ECS erm\u00f6glicht. F\u00fcr alle etwaigen weiteren Community Mitgliedschaften auf diesem ECS wird dasselbe Zertifikat verwendet und es muss vom ECS Admin nur ein weiterer Communityeingetrag gemacht werden. Der ECS Admin wird dem Participanten seine certid , seine neuen Community Mitgliedschaften sowie seine damit verkn\u00fcpften MembershipIDs explizit per email mitteilen (diese Status-Info geht auch an alle bisherigen Community Mitglieder). F\u00fcr Plattformen die nicht mehrere communities unterst\u00fctzen, sollten diese ihren Community Eintrag anhand ihrer zugewiesenen MembershipID ( mid ) oder ihrer certid aus der memberships Repr\u00e4sentation extrahieren und entsprechend anzeigen. Die certid wird direkt aus dem ausgestellten Zertifikat gewonnen und kann auch vom Participanten vonselben ermittelt werden ( certid entspricht \"Serial Number:\" des Zertifikats). Zus\u00e4tzlich f\u00fchrt der ECS ein eindeutiges K\u00fcrzel {#abr} abr (abreviation) f\u00fcr jeden Participanten. Dieses K\u00fcrzel wird vom ECS nur optional angeboten, doch falls vorhanden, ist dieses eindeutig bzgl. des anbietenden ECS (siehe auch Authorisation ). GET, memberships: : Gibt alle Participanten zugeordent zu ihrer jeweiligen Community zur\u00fcck, in der auch der anfragende Participant Mitglied ist. https://infolms.rus.uni-stuttgart.de:7923/memberships [ { \"community\": { \"name\": \"SUV\", \"description\": \"S\u00fcddeutscher Universit\u00e4ts Verbund\" }, \"participants\": [ { \"participantname\": \"Universit\u00e4t Stuttgart\", \"description\": \"Allgemeine eLearningplattform betrieben am Rechenzentrum Uni Stuttgart.\", \"dns\": \"ecs.uni-stuttgart.de\", \"email: \"ecs@uni-stuttgart.de\", \"organization\": \"Uni Stuttgart\", \"mid\": 5, \"certid: \"F55B205682709393\", \"abr\": \"S\" }, \"participantname\": \"Universit\u00e4t Ulm\", \"description\": \"Zentrale ELearningplattform.\", \"dns\": \"ecs.uni-ulm.de\", \"email: \"ecs@uni-ulm.de\", \"organization\": \"Uni Ulm\", \"mid\": 24 \"certid\": \"F55B205682709394\", \"abr\": \"UL\" } ] }, { \"community\": { \"name\": \"WAREM\", \"description\": \"Internationally Oriented Master of Science Program Water Resources Engineering and Management - WAREM\" }, \"participants\": [ { \"participantname\": \"Universit\u00e4t Stuttgart\", \"description\": \"Allgemeine eLearningplattform betrieben am Rechenzentrum Uni Stuttgart.\", \"dns\": \"ecs.uni-stuttgart.de\", \"email: \"warem@uni-stuttgart.de\", \"organization\": \"Uni Stuttgart\", \"mid\": 9 \"certid\": \"F55B205682709393\", \"abr\": \"S\" }, \"participantname\": \"Universit\u00e4t Karlsruhe\", \"description\": \"E-Learningplattform der Fakult\u00e4t Informatik.\", \"dns\": \"ecs.uni-karlsruhe.de\", \"email: \"ecs@uni-karlsruhe.de\", \"organization\": \"Uni Karlsruhe\", \"mid\": 12 \"certid\": \"F55B205682709395\", \"abr\": \"KA\" } ] } ] GET, memberships/<mid>: Gibt eine Liste von Community / Participanten Paare aus, bei der der nachgefragte Participant Mitglied ist. https://infolms.rus.uni-stuttgart.de:7923/memberships/5 [ { \"community\": { \"name\": \"SUV\", \"description\": \"S\u00fcddeutscher Universit\u00e4ts Verbund\" }, \"participants\": [ { \"participantname\": \"Universit\u00e4t Stuttgart\", \"description\": \"Allgemeine eLearningplattform betrieben am Rechenzentrum Uni Stuttgart.\", \"dns\": \"ecs.uni-stuttgart.de\", \"email: \"ecs@uni-stuttgart.de\", \"organization\": \"Uni Stuttgart\", \"mid\": 5 \"certid: \"F55B205682709393\", \"abr: \"S\" } ] } ] DELETE, memberships/<id> L\u00f6scht Membership mit der mid= . Nur der Besitzer der Membership kann diese auch l\u00f6schen : https://infolms.rus.uni-stuttgart.de:7923/memberships/5","title":"memberships"},{"location":"viplab/","text":"ViPLab (formerly NumLab) Virtual programming laboratory for education and teaching at universities. Thick/Rich clients (frontends) use the ECS middleware to communicate to several backends (computation clients) working in a cluster. Please look the requirements shown at Core ECS . A computation client instance supports one or more computation chain s (e.g. 'C computation chain', 'Matlab computation chain'). Descriptions are done from the ECS point of view. The term \"server\" is used as a synonym for the ECS. All other participants are known as \"clients\", e.g. \"computation client\", \"student client\". Terms (ViPLab specific) ViPLab virtual programming laboratory (for programming this term is more generic than NumLab (outdated)) NumLab legacy term for ViPLab (don't use it for new documentation) ViP ViPLab shortcut \"Virtuelles Programmierlabor\" (German project shortcut) CC computation client SC student client TC teacher client client a system component requesting ECS, one of CC, SC, TC computation a CC computes a Result of a Solution to an Exercise ( Solution and - referenced - Exercise being input, Result output of computation). computation chain computation chain specified in an Exercise , e.g. 'C computation chain', 'Matlab computation chain', the chain of commands being performed during a computation. ECS ressources /numlab/exercises /numlab/solutions /numlab/results /numlab/interrupts Overview Resource Properties General Properties Property /numlab/exercises /numlab/solutions /numlab/results POST POST from teacher client creates new resource - with automatically created index. POST from student client pushes Solution into public queue. POST from computation client pulls Solution from public queue. POST from computation client pushes Result into private queue of student client. POST from student client pulls Result from its private queue. GET GET: returns URL list of available Exercises; thereafter GETs may be used for accessing indexed Excercises (e.g. .../exercises/4711). GET: not used (use POST for pulling/pushing from/into queue). GET from queue: not used (use POST for pulling/pushing from/into queue). DELETE DELETE of indexed Exercise only : gets/deletes Exercise. This works only once . DELETE: not used (use POST for pulling/pushing from/into queue). DELETE: not used (use POST for pulling/pushing from/into queue). access POST/DELETE: - all teacher clients; GET: - all teacher clients, - all student clients, - all computation clients. POST: - student clients for pushing Solutions into queue; - computation clients for pulling Solutions from queue. GET/DELETE: unused. POST: - computation clients for pushing Results into queue; - student clients for pulling Results from queue (each SC has its own private queue for pulling Results). GET/DELETE: not used. Notes: Pulling from a queue returns an element or the information, that there is none. Pushing into a queue should always succeed. Properties of Queue Resources Property /numlab/solutions /numlab/results sender/receiver relation m-to-n (logical, ECS POV: m-to-1): multiple student clients -> multiple computation clients m-to-n (logical, ECS POV: 1-to-n): multiple computation clients -> multiple student clients single queue or multiple ones? single queue for all multiple queues: one for each student client access push/pull shared push (SCs), shared pull (CCs) shared push (CCs), single pull (SC) Notes: 'multiple queues' is meant in a behavioral sense: how this is realized technically is out of scope here. (Routing computation Result back from CC to some SC being sender of a Solution is realized via a mechanism using special HTTP headers.); from ECS POV (point of view) technically there is only one CC (virtual participant), but in reality ('logical') there are multiple ones (clustering). Version History of ViPLab JSON Message Formats Version Date Author Comment 1.0 17.02.14 Stephan Rudlof Exercise JSON Format : - [fix][new] config --Octave : already in use for some time. - Good time for declaring v1.0. 0.21 13.02.14 Stephan Rudlof Exercise JSON Format : - [new] config --* --interpreting 0.20 08.05.13 Stephan Rudlof Exercise JSON Format : - [changed] config --C --checking --behavior : entry ignored: \"mergeAndInclude\" semantics for all systems. 0.19 11.03.13 Stephan Rudlof Exercise JSON Format : - [changed] config --C --checking --behavior : entry ignored: devel system \"mergeAndInclude\", prod systems \"element\" semantics. 0.18 06.02.13 Stephan Rudlof Exercise JSON Format : - [new] config --C --checking --behavior - [fix] config --Java --checking --sources : only elementIDs are allowed 0.17.1 20.11.12 Stephan Rudlof Exercise JSON Format : elementProperties --MERGE_ID --tabType : fix of unsuited spec 0.17 16.11.12 Stephan Rudlof Exercise JSON Format : - elementProperties - config --Java --checking; Java checking semantics 0.16.1 14.11.12 Stephan Rudlof Exercise JSON Format : config --C 0.16 13.11.12 Stephan Rudlof Exercise JSON Format : config --C 0.15.1 12.11.12 Stephan Rudlof Notes to merging : LF at end of merged elements 0.15 12.09.12 Stephan Rudlof Exercise JSON Format : state that merging expects 'non-empty ' array(s) 0.14 24.08.12 Stephan Rudlof Exercise JSON Format : - [new] Java chain - [fix] some corrections/updates regarding other chains 0.13 25.07.12 Stephan Rudlof Exercise JSON Format : - [new] department 0.12 25.07.12 Stephan Rudlof Result JSON Format : - [new] computation - [done]: no more [toDo] and [outdated] sections 0.11 14.06.12 Stephan Rudlof Exercise JSON Format : support for mapping of generated elements (mergeID) - [new] config --C 0.10 13.06.12 Stephan Rudlof Exercise JSON Format : - added config --DuMuX --running --observe_stderr Result JSON Format : - added status, index - marked [toDo] and [outdated] sections 0.9 13.04.12 Stephan Rudlof JSON Objects in Exercise--element[] : added group Exercise JSON Format : - added C++ chain - added config --C 0.8 11.04.12 Stephan Rudlof Exercise JSON Format : added TTL . 0.7.1 30.05.11 Stephan Rudlof JSON Objects in Result--element[] : - added: MIMEtype value \"application/x-vgf3\", MIMEtype value \"application/x-vgfc\". 0.7 30.05.11 Stephan Rudlof Exercise JSON Format : added routing , elementMap JSON Objects in Exercise--element[] : removed filename (functionality given by elementMap now) 0.6.1 09.05.11 Stephan Rudlof JSON Objects in Exercise--element[] : added syntaxHighlighting values \"Matlab\", \"XML\" 0.6 04.05.11 Stephan Rudlof Exercise JSON Format : added specification config--DuMuX JSON Objects in Exercise--element[] : added MIMEtype value \"text/xml\" 0.5 27.10.10 Stephan Rudlof JSON Objects in Reuslt--element[] : - added: MIMEtype value \"application/x-vgf\", - new: ID . 0.4 16.12.09 Stephan Rudlof Exercise JSON Format : added specification config--Matlab 0.3 30.11.09 Stephan Rudlof JSON Objects in Reuslt--element[] : added MIMEtype value \"image/png\" 0.2 21.09.09 Stephan Rudlof new: /numlab/interrupts renaming: postTimeClient, resultPostTimeClient -> postTime; solutionGetTimeClient -> solutionGetTime 0.1 08.09.09 Stephan Rudlof initial version Note This history is just for changes in syntax and/or semantics of ViPLab related JSON messages: It must not be updated for mere improvements of the documentation. Fixes in JSON examples are not reflected here: Exercise|Solution|Result|Interrupt JSON Format sections (the tables) count. ViPLab JSON Message Formats are found in: Excercise Message Solution Message Result message Interrupt Mesage Because they depend on each other, there is a centralized history here. ECS Filter-Plugins With a filter plugin you are able to transform the messages received or send by the ECS, i.e. this makes it possible to transfer some application logic to the ECS (for general description of filter plugins see Filter-Plugins ). Exercises Filter-Plugin This filter masquerades the response of an request to {{{/numlab/exercises/ }}}. With a query string the request only contain toplevel properties with simple string type. For now these toplevel properties are: postTime identifier comment name description environment The querystring parameter is known as: {{{properties}}}. You're allowed to note multiple toplevel properties, spaced by comma. Please be patient not to include any spaces in the list. Working ressource notations are: http://ecs.uni-stuttgart.de/numlab/exercises/27?properties=name http://ecs.uni-stuttgart.de/numlab/exercises/27?properties=name,description http://ecs.uni-stuttgart.de/numlab/exercises/27?properties=name,description,comment,identifier Problematic/forbidden notations are: http://ecs.uni-stuttgart.de/numlab/exercises/27?properties= name http://ecs.uni-stuttgart.de/numlab/exercises/27?properties=name ,description http://ecs.uni-stuttgart.de/numlab/exercises/27?properties =name,description,comment , identifier Also have a look at the examples .","title":"Index"},{"location":"viplab/#viplab-formerly-numlab","text":"Virtual programming laboratory for education and teaching at universities. Thick/Rich clients (frontends) use the ECS middleware to communicate to several backends (computation clients) working in a cluster. Please look the requirements shown at Core ECS . A computation client instance supports one or more computation chain s (e.g. 'C computation chain', 'Matlab computation chain'). Descriptions are done from the ECS point of view. The term \"server\" is used as a synonym for the ECS. All other participants are known as \"clients\", e.g. \"computation client\", \"student client\".","title":"ViPLab (formerly NumLab)"},{"location":"viplab/#terms-viplab-specific","text":"ViPLab virtual programming laboratory (for programming this term is more generic than NumLab (outdated)) NumLab legacy term for ViPLab (don't use it for new documentation) ViP ViPLab shortcut \"Virtuelles Programmierlabor\" (German project shortcut) CC computation client SC student client TC teacher client client a system component requesting ECS, one of CC, SC, TC computation a CC computes a Result of a Solution to an Exercise ( Solution and - referenced - Exercise being input, Result output of computation). computation chain computation chain specified in an Exercise , e.g. 'C computation chain', 'Matlab computation chain', the chain of commands being performed during a computation.","title":"Terms (ViPLab specific)"},{"location":"viplab/#ecs-ressources","text":"/numlab/exercises /numlab/solutions /numlab/results /numlab/interrupts","title":"ECS ressources"},{"location":"viplab/#overview-resource-properties","text":"","title":"Overview Resource Properties"},{"location":"viplab/#general-properties","text":"Property /numlab/exercises /numlab/solutions /numlab/results POST POST from teacher client creates new resource - with automatically created index. POST from student client pushes Solution into public queue. POST from computation client pulls Solution from public queue. POST from computation client pushes Result into private queue of student client. POST from student client pulls Result from its private queue. GET GET: returns URL list of available Exercises; thereafter GETs may be used for accessing indexed Excercises (e.g. .../exercises/4711). GET: not used (use POST for pulling/pushing from/into queue). GET from queue: not used (use POST for pulling/pushing from/into queue). DELETE DELETE of indexed Exercise only : gets/deletes Exercise. This works only once . DELETE: not used (use POST for pulling/pushing from/into queue). DELETE: not used (use POST for pulling/pushing from/into queue). access POST/DELETE: - all teacher clients; GET: - all teacher clients, - all student clients, - all computation clients. POST: - student clients for pushing Solutions into queue; - computation clients for pulling Solutions from queue. GET/DELETE: unused. POST: - computation clients for pushing Results into queue; - student clients for pulling Results from queue (each SC has its own private queue for pulling Results). GET/DELETE: not used. Notes: Pulling from a queue returns an element or the information, that there is none. Pushing into a queue should always succeed.","title":"General Properties"},{"location":"viplab/#properties-of-queue-resources","text":"Property /numlab/solutions /numlab/results sender/receiver relation m-to-n (logical, ECS POV: m-to-1): multiple student clients -> multiple computation clients m-to-n (logical, ECS POV: 1-to-n): multiple computation clients -> multiple student clients single queue or multiple ones? single queue for all multiple queues: one for each student client access push/pull shared push (SCs), shared pull (CCs) shared push (CCs), single pull (SC) Notes: 'multiple queues' is meant in a behavioral sense: how this is realized technically is out of scope here. (Routing computation Result back from CC to some SC being sender of a Solution is realized via a mechanism using special HTTP headers.); from ECS POV (point of view) technically there is only one CC (virtual participant), but in reality ('logical') there are multiple ones (clustering).","title":"Properties of Queue Resources"},{"location":"viplab/#version-history-of-viplab-json-message-formats","text":"Version Date Author Comment 1.0 17.02.14 Stephan Rudlof Exercise JSON Format : - [fix][new] config --Octave : already in use for some time. - Good time for declaring v1.0. 0.21 13.02.14 Stephan Rudlof Exercise JSON Format : - [new] config --* --interpreting 0.20 08.05.13 Stephan Rudlof Exercise JSON Format : - [changed] config --C --checking --behavior : entry ignored: \"mergeAndInclude\" semantics for all systems. 0.19 11.03.13 Stephan Rudlof Exercise JSON Format : - [changed] config --C --checking --behavior : entry ignored: devel system \"mergeAndInclude\", prod systems \"element\" semantics. 0.18 06.02.13 Stephan Rudlof Exercise JSON Format : - [new] config --C --checking --behavior - [fix] config --Java --checking --sources : only elementIDs are allowed 0.17.1 20.11.12 Stephan Rudlof Exercise JSON Format : elementProperties --MERGE_ID --tabType : fix of unsuited spec 0.17 16.11.12 Stephan Rudlof Exercise JSON Format : - elementProperties - config --Java --checking; Java checking semantics 0.16.1 14.11.12 Stephan Rudlof Exercise JSON Format : config --C 0.16 13.11.12 Stephan Rudlof Exercise JSON Format : config --C 0.15.1 12.11.12 Stephan Rudlof Notes to merging : LF at end of merged elements 0.15 12.09.12 Stephan Rudlof Exercise JSON Format : state that merging expects 'non-empty ' array(s) 0.14 24.08.12 Stephan Rudlof Exercise JSON Format : - [new] Java chain - [fix] some corrections/updates regarding other chains 0.13 25.07.12 Stephan Rudlof Exercise JSON Format : - [new] department 0.12 25.07.12 Stephan Rudlof Result JSON Format : - [new] computation - [done]: no more [toDo] and [outdated] sections 0.11 14.06.12 Stephan Rudlof Exercise JSON Format : support for mapping of generated elements (mergeID) - [new] config --C 0.10 13.06.12 Stephan Rudlof Exercise JSON Format : - added config --DuMuX --running --observe_stderr Result JSON Format : - added status, index - marked [toDo] and [outdated] sections 0.9 13.04.12 Stephan Rudlof JSON Objects in Exercise--element[] : added group Exercise JSON Format : - added C++ chain - added config --C 0.8 11.04.12 Stephan Rudlof Exercise JSON Format : added TTL . 0.7.1 30.05.11 Stephan Rudlof JSON Objects in Result--element[] : - added: MIMEtype value \"application/x-vgf3\", MIMEtype value \"application/x-vgfc\". 0.7 30.05.11 Stephan Rudlof Exercise JSON Format : added routing , elementMap JSON Objects in Exercise--element[] : removed filename (functionality given by elementMap now) 0.6.1 09.05.11 Stephan Rudlof JSON Objects in Exercise--element[] : added syntaxHighlighting values \"Matlab\", \"XML\" 0.6 04.05.11 Stephan Rudlof Exercise JSON Format : added specification config--DuMuX JSON Objects in Exercise--element[] : added MIMEtype value \"text/xml\" 0.5 27.10.10 Stephan Rudlof JSON Objects in Reuslt--element[] : - added: MIMEtype value \"application/x-vgf\", - new: ID . 0.4 16.12.09 Stephan Rudlof Exercise JSON Format : added specification config--Matlab 0.3 30.11.09 Stephan Rudlof JSON Objects in Reuslt--element[] : added MIMEtype value \"image/png\" 0.2 21.09.09 Stephan Rudlof new: /numlab/interrupts renaming: postTimeClient, resultPostTimeClient -> postTime; solutionGetTimeClient -> solutionGetTime 0.1 08.09.09 Stephan Rudlof initial version Note This history is just for changes in syntax and/or semantics of ViPLab related JSON messages: It must not be updated for mere improvements of the documentation. Fixes in JSON examples are not reflected here: Exercise|Solution|Result|Interrupt JSON Format sections (the tables) count. ViPLab JSON Message Formats are found in: Excercise Message Solution Message Result message Interrupt Mesage Because they depend on each other, there is a centralized history here.","title":"Version History of ViPLab JSON Message Formats"},{"location":"viplab/#ecs-filter-plugins","text":"With a filter plugin you are able to transform the messages received or send by the ECS, i.e. this makes it possible to transfer some application logic to the ECS (for general description of filter plugins see Filter-Plugins ).","title":"ECS Filter-Plugins"},{"location":"viplab/#exercises-filter-plugin","text":"This filter masquerades the response of an request to {{{/numlab/exercises/ }}}. With a query string the request only contain toplevel properties with simple string type. For now these toplevel properties are: postTime identifier comment name description environment The querystring parameter is known as: {{{properties}}}. You're allowed to note multiple toplevel properties, spaced by comma. Please be patient not to include any spaces in the list. Working ressource notations are: http://ecs.uni-stuttgart.de/numlab/exercises/27?properties=name http://ecs.uni-stuttgart.de/numlab/exercises/27?properties=name,description http://ecs.uni-stuttgart.de/numlab/exercises/27?properties=name,description,comment,identifier Problematic/forbidden notations are: http://ecs.uni-stuttgart.de/numlab/exercises/27?properties= name http://ecs.uni-stuttgart.de/numlab/exercises/27?properties=name ,description http://ecs.uni-stuttgart.de/numlab/exercises/27?properties =name,description,comment , identifier Also have a look at the examples .","title":"Exercises Filter-Plugin"},{"location":"viplab/exercises/","text":"/numlab/exercises Persistent resource. Interface POST, GET, DELETE ( see ''English section name unknown so far.'' ) Generic POST creates ai new persistent Exercise: it gets an automatically gererated index for accessing the POSTed Exercise. GET returns an URL list of all stored Exercises there. Each list entry can be used for accessing a formerly stored Exercise. GET resourceURL/ix:: returns stored Exercise with index ix. DELETE resourceURL/ix:: deletes stored Exercise with index ix. ViPLab Specific POST/DELETE will be used by TCs, GET by all clients. A teacher client (TC) POSTs and DELETEs Exercises; student clients (SCs) and computation clients (CCs) only GET Exercises. There are some constraints: No PUT of Exercises: for changing an Exercise PUT won't be used. POST of a changed one, followed (sometime) from DELETE of outdated version/s, is the way to go. Rationale: content of an Exercise associated to a decent URL (automatically created, but fixed index) must not change. No reuse of Exercise indices: automatically created Exercise indices are monotonically increasing (practically infinite). So the following is valid for an old Solution after deleting some Exercise: it references the correct Exercise, which has existed at time of Solution creation and continues to exist, or it references nothing. Fullfilling these constraints avoids the big problem of referencing a wrong Exercise! Message Excercise Message JSON Definition by Example (informal) Note: // with text following until EOL is a comment, which is not covered by the JSON spec, and should not be contained in message sends in real; but nevertheless it would help, if JSON parsers could just ignore them. { \"Exercise\" : { \"postTime\" : \"1985-04-12T23:20:50.52Z\", // must, given by TC \"TTL\" : 360000, // opt, given by TC (here 10*10*3600s = 100h) \"identifier\" : \"Numerik II, SS10, Aufgabe 1, v1.0\", // name of exercise for teachers \"department\" : \"RUS\", // opt, for filtering exercises \"comment\" : \"Um die Studenten mal richtig zu fordern.\", // optional \"name\" : \"Aufgabe 1\", // name of exercise to be shown in SCs \"description\" : \"Schreiben Sie eine C-Funktion...\",// optional: short description (could be used as // subtitle, longer descriptions in \"elements\"). \"elements\" : // must: at least one array element [ { \"identifier\": \"preamble\", // for referencing \"visible\" : true, // if it has to be shown in SC \"modifiable\": false, // optional \"name\" : \"Info: source before your code.\", // name of element for student \"MIMEtype\" : \"text/plain\", // optional (default: \"text/plain\") \"syntaxHighlighting\": \"C\", // optional (default: \"none\") \"emphasis\" : \"low\", // optional (for rendering) \"value\" : \"#include <stdio.h>\\n\" // source (newline should be in effect after decoding) }, { \"identifier\": \"codeFromStudent\", \"visible\" : true, \"modifiable\": true, // bool; has to be true here to make it editable in SC \"name\" : \"Fill in your code!\", \"MIMEtype\" : \"text/plain\", // optional (default: \"text/plain\") \"syntaxHighlighting\": \"C\", // optional (default: \"none\") \"emphasis\" : \"medium\", \"value\" : \"void bar() { /* Schreiben Sie hier Code, der \\\"bar\\\" ausgibt. */\\n\\n}\\n\" // source (template) from teacher }, { \"identifier\": \"postscript\", \"visible\" : true, \"modifiable\": false, \"name\" : \"Info: source after your code calling bar() in it.\", \"MIMEtype\" : \"text/plain\", // optional (default: \"text/plain\") \"syntaxHighlighting\": \"C\", // optional (default: \"none\") \"emphasis\" : \"low\", \"value\" : \"int main() { bar(); return 0; }\" // source } ], // elements[] \"environment\" : \"anIdentifier\", // optional \"config\" : { \"C\" : // C language specific stuff { // phases \"merging\" : // optional / must (for compiling) { \"sources\" : [\"preamble\", \"codeFromStudent\", \"postscript\"] // identifiers of to be merged sources // (elements with text content) from above }, \"compiling\" : // optional / must (for checking/linking) { \"compiler\" : \"gcc\", // string \"flags\" : \"-O2 -Wall\" // string }, \"checking\" : // optional { \"sources\": [\"codeFromStudent\"], // sources to be checked \"forbiddenCalls\": \"system execve\" // forbidden call names separated by WS }, \"linking\" : // optional / must (for running) { \"flags\" : \"-lm\" // string }, \"running\" : // optional { \"commandLineArguments\" : \"--stepwidth 0.001\" // string }, \"stopAfterPhase\" : \"running\" // optional: \"running\" here is the same as omitting \"stopAfterPhase\" } // \"C\" } // \"config\" } // \"Exercise\" } // \"Exercise\" wrapper Exercise JSON Format Note: wrapper \"Exercise\" omitted. wrapper \"Exercise\" around the following Key [--Subkey] Type (a default is marked by italics ) Opt / Must Description Comment AS postTime string UTC must timestamp from TC Timestamp from TC: in addition a CC side timestamp could be made. A change of an exercise should be performed by a POST of the changed one, combined with DELETEs of older versions (PUT has problems, see NumLab ). Still needed? Couldn't the websocket API or anybody else generate this? TTL uint seconds optional time to live from teacher Limits validity of Exercise. If (currentTime > postTime + TTL) Exercise can be deleted automatically. In all other cases (includes no TTL) it must not be deleted automatically (it can always be deleted manually, of course). For extending the lifetime of an exercise it has to be rePOSTed (leading to a new one with updated postTime). Is this actually done? Ensured by the backend? Could also be parameter under config/resources? identifier string must name for teachers Technically there is no need for uniqueness of the identifier at this protocol level: e.g. if modifying an exercise, there may be different versions with the same ID. If there is no technically need, why do we have it? department string opt institution shortcut For filtering exercises at frontend (e.g. for showing only a subset). Frontend feature comment string opt comment from teacher Generic element: same as comment from others: wrapper (here teacher) says who is originator. name string opt name of exercise to be shown in SCs. If it is missing, \"identifier\" could be used. Frontend feature description string (plain text) opt short description Mostly a few lines. A longer description in different formats can be put in \"elements\" (see below). elements [ {...}, {...}, ... ] must array containing JSON objects : there has to be at least one element environment string opt identifier for referring to static environment meta data Static environment meta data stores complex exercise configurations containing data, which is changing very slowly: e.g. which external post processing tools will be called how for a set of exercises. Optional arguments here may also be placed into the static environment: e.g. linking--flags. Do we need this? Didn't find it in tests. What can it be? routing struct opt Needed without ECS? routing --solutionQueue string must Queue to be used for posting Solutions. If there is no \"routing\" struct at all, implicit default value for \"solutionQueue\" is 'solutions', otherwise this key has to be set. elementMap { SOURCE_ID: URI, ... } opt mapping of sources to URIs, SOURCE_ID has to be an identifier (string) of an existing element (ELEMENT_ID), or an identifier of a yet to be generated element (MERGE_ID, availability depends on chain) Currently only file:// protocol mapping to local file without directory path supported (Note: this is 'file:///filename.txt' for 'filename.txt'). If and how mapped elements will be used, depends on semantics of computation chain defined by \"config\". C/C++/Java : created files with suffix '.c' resp. '.cpp' resp. '.java' can (explicitly) or will (implicitly) be taken as a source for compilation (see config --C/C++/Java --compiling --sources); all others will just be created (they may be used as input for compilation (e.g. '.h', '.hpp') or executable). Move to \"config--merging\"? elementProperties { SOURCE_ID: { string: VALUE, string: VALUE, ... } opt mapping of sources to {} containing properties ('string: VALUE' pairs); SOURCE_ID as defined for elementMap; unique property names, VALUE types and their allowed values have to be defined. What kind of properties are allowed and their semantics may depend on chain (config --). From test examples it seems to be that SOURCE_ID can also be the \"group\" name of an element. Unclear if still needed... elementProperties --MERGE_ID --tabType one of {\"source\", \"header\", \"data\"} opt [C/C++][frontend] kind of merged sources Ignored by backend. config struct opt configuration make \"merging\" equal for all languages? config --Octave struct opt configuration for Octave programming Same as 'config --Matlab', just replace \"Matlab\" by \"Octave\" (all sub attributes are the same). config --Matlab struct opt configuration for Matlab programming Chain: merging -> checking -> interpreting. Merging may be a trivial merge consisting of just one element. Checking needs a positive list of callable functions. config --Matlab --merging struct must (may be trivial merge) See Notes to merging . config --Matlab --merging --sources [ELEMENT_ID, ELEMENT_ID, ...] must array of one or more identifiers of to be merged sources; defined by elements[]{ELEMENT_ID} above config --Matlab --checking struct opt checking for legal function calls in source code Performed after merging. If omitted, no checking will be done. config --Matlab --checking --sources [ELEMENT_ID, ELEMENT_ID, ...] must array of identifiers of to be checked sources; given by elements[]{ELEMENT_ID} above config --Matlab --checking --allowedCalls string must allowed call names separated by WS; only idents (no braces, no func args) config --Matlab --interpreting struct opt If necessary, there may be sub keys later. config --Matlab --interpreting --timelimitInSeconds int opt CPU time limit For semantics see Notes to \"timelimitInSeconds\" . config --Matlab --stopAfterPhase one of {\"merging\", \"checking\", \"interpreting\" } opt chain: merging -> checking -> interpreting If omitted, CC tries to execute all given phases (same as \"interpreting\" ). config --C struct opt configuration for C programming Chain: merging -> compiling -> [checking] -> linking -> running. Currently checking is the only phase which can be omitted, if there is a program to be run. config --C++ struct opt configuration for C++ programming Chain: merging -> compiling -> linking -> running. Checking is not supported for C++. config --Java struct opt configuration for Java programming Chain: merging -> compiling -> running. Checking is not supported for Java. Checking is supported?! See below various attributes... config --C/C++/Java --merging struct or [] must / opt (if stopped before) See Notes to merging . Can it be stopped before? config --C/C++/Java --merging --sources [ELEMENT_ID, ELEMENT_ID, ...] xor must array of one or more identifiers of to be merged sources; defined by elements[]{ELEMENT_ID} above Xor must: this xor config --C/C++/Java --merging [] . This alternative is for compiling a single source file, generated by a single merge. Omit and make it always explicit? config --C/C++/Java --merging --mergeID MERGE_ID opt identifier of merged sources; has to be unique in union set of: elements[]{ELEMENT_ID} above, together with all mergeIDs (in case of multiple merges) If given, merge results can be explicitly defined as sources to be compiled by config-- C/C++/Java --compiling --sources; and/or mapped to a file by \"elementMap\" above. A merge result not being compiled explicitly or implicitly has to be elementMap'ped to become visible as a file to started commands: e.g. compiler (including it as header file) or executable (loading it as input file). config --C/C++/Java --merging [] { \"sources\": [ELEMENT_ID, ELEMENT_ID, ...], \"mergeID\": MERGE_ID }, ... xor must array of one or more structs as defined by previous two items Xor must: this xor config --C/C++ --merging --sources and (opt) config --C/C++ --merging --mergeID . This alternative is for compiling multiple source files, generated by multiple merges. config --C/C++/Java --compiling struct must / opt (if stopped before) config --C/C++/Java --compiling --sources [MERGE_ID, MERGE_ID, ...] opt Explicit compilation: MERGE_IDs have to be mergeIDs from merging phase, no mergeID should occur multiple times here. Overrides (implicit) default behavior. If given, only referenced sources will be compiled (explicitly). If omitted, compilation may be done implicitly by not elementMap'ing some merge result (gets automatically generated filename then), elementMap'ing to a file with suited suffix ('.c', '.cpp', '.java') and name/path (Java). Also see config --C/C++/Java --merging --mergeID and elementMap. Allow only explicit way? config --C/C++ --compiling --compiler string must compiler to be used, e.g. \"gcc\" config --C/C++ --compiling --flags string must CFLAGS e.g. \"-O2\" or \"\" config --Java --compiling --flags string opt compile flags e.g. \"-v\" config --C/Java --checking struct opt checking for illegal function calls in source code Performed after compiling, because compiler gives better syntax error messages. Can be omitted, if no checking should be done. How can it be omitted? config --C/Java --checking --sources [ELEMENT_ID, ELEMENT_ID, ...] must array of identifiers of to be checked sources; given by elements[]{ELEMENT_ID} above config --C --checking --behavior one of { mergeAndInclude , \"element\"} Ignored! Hardwired semantics is \"mergeAndInclude\". \"mergeAndInclude\": merged elements will be checked alltogether, types are given by header #include's; \"element\" : each element will be checked for itself, some predefined standard types For more details see C checking semantics . config --C --checking --forbiddenCalls string must forbidden call names separated by WS; only idents (no braces, no func args) config --Java --checking --forbiddenCalls string opt forbidden call name expressions separated by WS For semantics see Java checking semantics . config --Java --checking --allowedCalls string opt allowed call name expressions separated by WS For semantics see Java checking semantics . config --C/C++ --linking struct must / opt (if stopped before) config --C/C++ --linking --flags string must LFLAGS e.g. \"\" config --C/C++/Java --running struct must / opt (if stopped before) config --C/C++/Java --running --commandLineArguments string opt arguments given to main() function Outlook: mechanism for transforming input values (e.g. by sliders) into CLI arguments. To be addressed now? config --C/C++/Java --running --timelimitInSeconds int opt CPU time limit For semantics see Notes to \"timelimitInSeconds\" . config --Java --running --flags string opt flags given to JVM config --Java --running --mainClass string opt (if unique) / must (if not unique) class containing \"public static void main(String[] args) {\" \"args\" may be another name. If main function is unique, its correct class should be detected automatically. config --C --stopAfterPhase one of {\"merging\", \"compiling\", \"checking\", \"linking\", \"running\" } opt chain: merging -> compiling -> checking -> linking -> running If omitted, CC tries to execute all given phases (same as \"running\" ). config --C++ --stopAfterPhase one of {\"merging\", \"compiling\", \"linking\", \"running\" } opt chain: merging -> compiling -> linking -> running If omitted, CC tries to execute all given phases (same as \"running\" ). config --Java --stopAfterPhase one of {\"merging\", \"compiling\", \"running\" } opt chain: merging -> compiling -> running If omitted, CC tries to execute all given phases (same as \"running\" ). checking? config --DuMuX struct opt configuration for DuMuX Chain: running. There is a first simple chain for just running preinstalled executables. Later this will be extended. config --DuMuX --running struct must config --DuMuX --running --executable string must name of executable to run (as in backend file system) config --DuMuX --running --commandLineArguments string opt additional command line args config --DuMuX --running --timelimitInSeconds int opt CPU time limit For semantics see Notes to \"timelimitInSeconds\" . config --DuMuX --running --observe_stderr bool ( false ) opt if true, transfer intermediate stderr Results Is this implemented? Notes to \"timelimitInSeconds\" There is a default CPU time limit (see RLIMIT_CPU of 'man setrlimit') for running or interpreting, which depends on backend configuration. This is good for terminating non-terminating programs, e.g. endless loops. Optional attribute \"timelimitInSeconds\" may lower this default CPU time limit; if it is higher than default, it will be ignored. Setting it to a value as much as possible below default is good for backend response time under high load; especially, if default is configured for performing expensive computations. Notes to TTL mechanism TTL mechanism as specified is suited for automatically deleting outdated exercises at development system. However it is not suited for limiting lifetime at production system, because extending exercise' lifetime is not possible without changing its resource index, and referenced exercises may diminish too early (this problems would stay with a PUT new TTL approach!). Notes to C config C checking semantics 08.05.2013: Semantics is \"mergeAndInclude\" for both prod systems and devel system (\"element\" unused). The semantics of config--C--checking--behavior values \"mergeAndInclude\" (default) and \"element\" (unused) are totally different. \"mergeAndInclude\" (default): Checked will be the merge result of elements after being preprocessed by the C preprocessor, so #include's are allowed and honored. Types have to be defined by the corresponding system headers (e.g. by #include <stdio.h> ) and no predefined standard types should be expected. It's possible to have illegal function calls in source elements (being part of some merge) not being checked (typically teacher code). This means, that during checking it has to and will be looked, in which source element an illegal function call happens, for knowing, if this actually is an error case. \"element\" (unused): Each element has to contain correct C code for itself. In addition to basic types some standard types defined in system headers are predefined (e.g. FILE, size_t). Using types from the outside -- e.g. other elements defining them or #include's in teacher code elements -- does not work. Common for both: no preprocessor commands are allowed in to be checked elements, with only one exception: #include's are allowed in case of \"mergeAndInclude\". The reason for the latter is to give students access to source elements serving as headers - editable for them or not. Functions from system headers could be #include'd, too. The teacher has the responsibility to put unwished system calls like system() and others from libc into \"forbiddenCalls\". Another point of control is to avoid linking with libs, whose functions shouldn't be used (this does not work with libc (automatically linked)). Notes to Java config Mapping of merged sources to correct files in package directory hierarchy works automatically by package detection. So there is no need to manually map merges to corresponding files. Main function detection looks for \"public static void main(String[] args) {\" in all merges (\"args\" may be another name) not explicitly mapped by \"elementMap\". If it is unique - only one class containing a main() -, it will be used automatically; otherwise which one to use has to be given by config--Java--running--mainClass. Java checking semantics Matching expressions for use in \"allowedCalls\" and \"forbiddenCalls\" '**' is for pure prefix matching; '*' for more fine-granular matching. Examples of matching expressions: - java.io.* matches all calls to methods in all classes in package, but does not match calls to methods in classes in subpackages; - java.io.** matches all calls to methods in all classes in package, _and_ in all classes in subpackages (if they exist); - java.io.Foo matches all calls to methods in class Foo, _and_ to methods in inner classes; - java.io.Foo.* \" \" \" \" \" \" \" \" , but _not_ to methods in inner classes (eg. to java.io.Foo$Bar.callMe); - java.io.Foo.callMe matches (only) the call to method callMe in Foo; - java.io.Foo$Bar.callMe matches (only) the call to method callMe in inner class Foo$Bar. If used in \"forbiddenCalls\" only (property \"allowedCalls\" missing): - java.io.* forbids all calls to methods in all classes in package, but allows calls to methods in classes in subpackages; - java.io.** forbids all calls to methods in all classes in package, _and_ in all classes in subpackages (if they exist); - java.io.Foo forbids all calls to methods in class Foo, _and_ to methods in inner classes; - java.io.Foo.* \" \" \" \" \" \" \" \" , but _not_ to methods in inner classes (eg. to java.io.Foo$Bar.callMe); - java.io.Foo.callMe forbids (only) the call to method callMe in Foo; - java.io.Foo$Bar.callMe forbids (only) the call to method callMe in inner class Foo$Bar. One or more of these expressions may be given by \"allowedCalls\" and/or \"forbiddenCalls\", separated by WS; e.g. \"forbiddenCalls\": \"java.io.** java.lang.Class\" . An allowed() or forbidden() predicate gives true, - if one of its corresponding matching expressions - an entry in property \"allowedCalls\" resp. \"forbiddenCalls\" - matches, or - if there is no corresponding property given at all. Otherwise it gives false. All calls will be filtered by following composed predicate for getting allowed ones: allowed(call) && ! forbidden(call) <=> ! forbidden(call) && allowed(call) . If only one part is given, this predicate reduces to: allowed(call) resp. ! forbidden(call) . Default for not given part of predicate is - 'no forbidden': ! forbidden(call) == true, and - 'all allowed' : allowed(call) == true. (opposite defaults would render the given part useless). If sets 'allowed' and 'forbidden' - are disjunct -> 'allowed' are allowed and all other forbidden. - have an intersection -> ('allowed' minus intersection) is allowed (all other forbidden). With this logic it is possible to define - a negative list by giving 'forbiddenCalls' only, or - a positive one by giving \"allowedCalls\", or - a mixture of both. Notes to DuMuX config This \"config\" is a second step to a more extended one later: it supports choosing between different executables with - optional - one or more input files each. CC allows one or more objects in Exercise--elements[], which will be used as file input for the given executable. Mappings of element to input file have to be given by \"elementMap\"; how to become input to executable by \"commandLineArguments\" (see above). How resulting input file(s) (in CWD of started executable) will be given by \"commandLineArgs\" to executable, has to be defined outside this document. Notes to merging Merging concatenates given elements for further processing. If non-empty elements do not end with a '\\n', it will be added (to have a mapping from each line number of merge result to just one originating element). JSON objects in Exercise--elements[] An object in array elements[] has the following members: Key Type (an enum default is marked by italics ) Opt / Must Description Comment AS identifier ELEMENT_ID (string) must for later referencing, has to be unique group string opt for grouping elements in frontend Ignored by backend. Drop? visible bool ( false ) opt if element should be shown in SC There may be elements not to be shown: e.g. invisible source code. modifiable bool ( false ) opt editability/changeability of \"value\" (see below) in SC name string opt name to be shown in SC If it is missing, \"identifier\" could be used. MIMEtype One of { \"text/plain\" , \"text/html\", \"text/xml\", \"text/uri-list\"} opt info for interpreting content \"text/uri-list\": weblinks to be followed and presented in SC. syntaxHighlighting One of { \"none\" , \"C\", \"C++\", \"Matlab\", \"XML\", \"Java\"} opt \"none\" : no syntax highlighting; \"C\": syntax highlighting for C programming language; etc. emphasis One of {\"low\", \"medium\" , \"high\"} opt info for rendering Still needed? value string must text or other content This is the member, which may be modified, if \"modifiable\" (see above) is true. Note: objects in array elements[] are identified via their \"identifier\" member.","title":"/numlab/exercises"},{"location":"viplab/exercises/#numlabexercises","text":"Persistent resource.","title":"/numlab/exercises"},{"location":"viplab/exercises/#interface","text":"POST, GET, DELETE ( see ''English section name unknown so far.'' )","title":"Interface"},{"location":"viplab/exercises/#generic","text":"POST creates ai new persistent Exercise: it gets an automatically gererated index for accessing the POSTed Exercise. GET returns an URL list of all stored Exercises there. Each list entry can be used for accessing a formerly stored Exercise. GET resourceURL/ix:: returns stored Exercise with index ix. DELETE resourceURL/ix:: deletes stored Exercise with index ix.","title":"Generic"},{"location":"viplab/exercises/#viplab-specific","text":"POST/DELETE will be used by TCs, GET by all clients. A teacher client (TC) POSTs and DELETEs Exercises; student clients (SCs) and computation clients (CCs) only GET Exercises. There are some constraints: No PUT of Exercises: for changing an Exercise PUT won't be used. POST of a changed one, followed (sometime) from DELETE of outdated version/s, is the way to go. Rationale: content of an Exercise associated to a decent URL (automatically created, but fixed index) must not change. No reuse of Exercise indices: automatically created Exercise indices are monotonically increasing (practically infinite). So the following is valid for an old Solution after deleting some Exercise: it references the correct Exercise, which has existed at time of Solution creation and continues to exist, or it references nothing. Fullfilling these constraints avoids the big problem of referencing a wrong Exercise!","title":"ViPLab Specific"},{"location":"viplab/exercises/#message","text":"","title":"Message"},{"location":"viplab/exercises/#excercise-message-json-definition-by-example-informal","text":"Note: // with text following until EOL is a comment, which is not covered by the JSON spec, and should not be contained in message sends in real; but nevertheless it would help, if JSON parsers could just ignore them. { \"Exercise\" : { \"postTime\" : \"1985-04-12T23:20:50.52Z\", // must, given by TC \"TTL\" : 360000, // opt, given by TC (here 10*10*3600s = 100h) \"identifier\" : \"Numerik II, SS10, Aufgabe 1, v1.0\", // name of exercise for teachers \"department\" : \"RUS\", // opt, for filtering exercises \"comment\" : \"Um die Studenten mal richtig zu fordern.\", // optional \"name\" : \"Aufgabe 1\", // name of exercise to be shown in SCs \"description\" : \"Schreiben Sie eine C-Funktion...\",// optional: short description (could be used as // subtitle, longer descriptions in \"elements\"). \"elements\" : // must: at least one array element [ { \"identifier\": \"preamble\", // for referencing \"visible\" : true, // if it has to be shown in SC \"modifiable\": false, // optional \"name\" : \"Info: source before your code.\", // name of element for student \"MIMEtype\" : \"text/plain\", // optional (default: \"text/plain\") \"syntaxHighlighting\": \"C\", // optional (default: \"none\") \"emphasis\" : \"low\", // optional (for rendering) \"value\" : \"#include <stdio.h>\\n\" // source (newline should be in effect after decoding) }, { \"identifier\": \"codeFromStudent\", \"visible\" : true, \"modifiable\": true, // bool; has to be true here to make it editable in SC \"name\" : \"Fill in your code!\", \"MIMEtype\" : \"text/plain\", // optional (default: \"text/plain\") \"syntaxHighlighting\": \"C\", // optional (default: \"none\") \"emphasis\" : \"medium\", \"value\" : \"void bar() { /* Schreiben Sie hier Code, der \\\"bar\\\" ausgibt. */\\n\\n}\\n\" // source (template) from teacher }, { \"identifier\": \"postscript\", \"visible\" : true, \"modifiable\": false, \"name\" : \"Info: source after your code calling bar() in it.\", \"MIMEtype\" : \"text/plain\", // optional (default: \"text/plain\") \"syntaxHighlighting\": \"C\", // optional (default: \"none\") \"emphasis\" : \"low\", \"value\" : \"int main() { bar(); return 0; }\" // source } ], // elements[] \"environment\" : \"anIdentifier\", // optional \"config\" : { \"C\" : // C language specific stuff { // phases \"merging\" : // optional / must (for compiling) { \"sources\" : [\"preamble\", \"codeFromStudent\", \"postscript\"] // identifiers of to be merged sources // (elements with text content) from above }, \"compiling\" : // optional / must (for checking/linking) { \"compiler\" : \"gcc\", // string \"flags\" : \"-O2 -Wall\" // string }, \"checking\" : // optional { \"sources\": [\"codeFromStudent\"], // sources to be checked \"forbiddenCalls\": \"system execve\" // forbidden call names separated by WS }, \"linking\" : // optional / must (for running) { \"flags\" : \"-lm\" // string }, \"running\" : // optional { \"commandLineArguments\" : \"--stepwidth 0.001\" // string }, \"stopAfterPhase\" : \"running\" // optional: \"running\" here is the same as omitting \"stopAfterPhase\" } // \"C\" } // \"config\" } // \"Exercise\" } // \"Exercise\" wrapper","title":"Excercise Message JSON Definition by Example (informal)"},{"location":"viplab/exercises/#exercise-json-format","text":"Note: wrapper \"Exercise\" omitted. wrapper \"Exercise\" around the following Key [--Subkey] Type (a default is marked by italics ) Opt / Must Description Comment AS postTime string UTC must timestamp from TC Timestamp from TC: in addition a CC side timestamp could be made. A change of an exercise should be performed by a POST of the changed one, combined with DELETEs of older versions (PUT has problems, see NumLab ). Still needed? Couldn't the websocket API or anybody else generate this? TTL uint seconds optional time to live from teacher Limits validity of Exercise. If (currentTime > postTime + TTL) Exercise can be deleted automatically. In all other cases (includes no TTL) it must not be deleted automatically (it can always be deleted manually, of course). For extending the lifetime of an exercise it has to be rePOSTed (leading to a new one with updated postTime). Is this actually done? Ensured by the backend? Could also be parameter under config/resources? identifier string must name for teachers Technically there is no need for uniqueness of the identifier at this protocol level: e.g. if modifying an exercise, there may be different versions with the same ID. If there is no technically need, why do we have it? department string opt institution shortcut For filtering exercises at frontend (e.g. for showing only a subset). Frontend feature comment string opt comment from teacher Generic element: same as comment from others: wrapper (here teacher) says who is originator. name string opt name of exercise to be shown in SCs. If it is missing, \"identifier\" could be used. Frontend feature description string (plain text) opt short description Mostly a few lines. A longer description in different formats can be put in \"elements\" (see below). elements [ {...}, {...}, ... ] must array containing JSON objects : there has to be at least one element environment string opt identifier for referring to static environment meta data Static environment meta data stores complex exercise configurations containing data, which is changing very slowly: e.g. which external post processing tools will be called how for a set of exercises. Optional arguments here may also be placed into the static environment: e.g. linking--flags. Do we need this? Didn't find it in tests. What can it be? routing struct opt Needed without ECS? routing --solutionQueue string must Queue to be used for posting Solutions. If there is no \"routing\" struct at all, implicit default value for \"solutionQueue\" is 'solutions', otherwise this key has to be set. elementMap { SOURCE_ID: URI, ... } opt mapping of sources to URIs, SOURCE_ID has to be an identifier (string) of an existing element (ELEMENT_ID), or an identifier of a yet to be generated element (MERGE_ID, availability depends on chain) Currently only file:// protocol mapping to local file without directory path supported (Note: this is 'file:///filename.txt' for 'filename.txt'). If and how mapped elements will be used, depends on semantics of computation chain defined by \"config\". C/C++/Java : created files with suffix '.c' resp. '.cpp' resp. '.java' can (explicitly) or will (implicitly) be taken as a source for compilation (see config --C/C++/Java --compiling --sources); all others will just be created (they may be used as input for compilation (e.g. '.h', '.hpp') or executable). Move to \"config--merging\"? elementProperties { SOURCE_ID: { string: VALUE, string: VALUE, ... } opt mapping of sources to {} containing properties ('string: VALUE' pairs); SOURCE_ID as defined for elementMap; unique property names, VALUE types and their allowed values have to be defined. What kind of properties are allowed and their semantics may depend on chain (config --). From test examples it seems to be that SOURCE_ID can also be the \"group\" name of an element. Unclear if still needed... elementProperties --MERGE_ID --tabType one of {\"source\", \"header\", \"data\"} opt [C/C++][frontend] kind of merged sources Ignored by backend. config struct opt configuration make \"merging\" equal for all languages? config --Octave struct opt configuration for Octave programming Same as 'config --Matlab', just replace \"Matlab\" by \"Octave\" (all sub attributes are the same). config --Matlab struct opt configuration for Matlab programming Chain: merging -> checking -> interpreting. Merging may be a trivial merge consisting of just one element. Checking needs a positive list of callable functions. config --Matlab --merging struct must (may be trivial merge) See Notes to merging . config --Matlab --merging --sources [ELEMENT_ID, ELEMENT_ID, ...] must array of one or more identifiers of to be merged sources; defined by elements[]{ELEMENT_ID} above config --Matlab --checking struct opt checking for legal function calls in source code Performed after merging. If omitted, no checking will be done. config --Matlab --checking --sources [ELEMENT_ID, ELEMENT_ID, ...] must array of identifiers of to be checked sources; given by elements[]{ELEMENT_ID} above config --Matlab --checking --allowedCalls string must allowed call names separated by WS; only idents (no braces, no func args) config --Matlab --interpreting struct opt If necessary, there may be sub keys later. config --Matlab --interpreting --timelimitInSeconds int opt CPU time limit For semantics see Notes to \"timelimitInSeconds\" . config --Matlab --stopAfterPhase one of {\"merging\", \"checking\", \"interpreting\" } opt chain: merging -> checking -> interpreting If omitted, CC tries to execute all given phases (same as \"interpreting\" ). config --C struct opt configuration for C programming Chain: merging -> compiling -> [checking] -> linking -> running. Currently checking is the only phase which can be omitted, if there is a program to be run. config --C++ struct opt configuration for C++ programming Chain: merging -> compiling -> linking -> running. Checking is not supported for C++. config --Java struct opt configuration for Java programming Chain: merging -> compiling -> running. Checking is not supported for Java. Checking is supported?! See below various attributes... config --C/C++/Java --merging struct or [] must / opt (if stopped before) See Notes to merging . Can it be stopped before? config --C/C++/Java --merging --sources [ELEMENT_ID, ELEMENT_ID, ...] xor must array of one or more identifiers of to be merged sources; defined by elements[]{ELEMENT_ID} above Xor must: this xor config --C/C++/Java --merging [] . This alternative is for compiling a single source file, generated by a single merge. Omit and make it always explicit? config --C/C++/Java --merging --mergeID MERGE_ID opt identifier of merged sources; has to be unique in union set of: elements[]{ELEMENT_ID} above, together with all mergeIDs (in case of multiple merges) If given, merge results can be explicitly defined as sources to be compiled by config-- C/C++/Java --compiling --sources; and/or mapped to a file by \"elementMap\" above. A merge result not being compiled explicitly or implicitly has to be elementMap'ped to become visible as a file to started commands: e.g. compiler (including it as header file) or executable (loading it as input file). config --C/C++/Java --merging [] { \"sources\": [ELEMENT_ID, ELEMENT_ID, ...], \"mergeID\": MERGE_ID }, ... xor must array of one or more structs as defined by previous two items Xor must: this xor config --C/C++ --merging --sources and (opt) config --C/C++ --merging --mergeID . This alternative is for compiling multiple source files, generated by multiple merges. config --C/C++/Java --compiling struct must / opt (if stopped before) config --C/C++/Java --compiling --sources [MERGE_ID, MERGE_ID, ...] opt Explicit compilation: MERGE_IDs have to be mergeIDs from merging phase, no mergeID should occur multiple times here. Overrides (implicit) default behavior. If given, only referenced sources will be compiled (explicitly). If omitted, compilation may be done implicitly by not elementMap'ing some merge result (gets automatically generated filename then), elementMap'ing to a file with suited suffix ('.c', '.cpp', '.java') and name/path (Java). Also see config --C/C++/Java --merging --mergeID and elementMap. Allow only explicit way? config --C/C++ --compiling --compiler string must compiler to be used, e.g. \"gcc\" config --C/C++ --compiling --flags string must CFLAGS e.g. \"-O2\" or \"\" config --Java --compiling --flags string opt compile flags e.g. \"-v\" config --C/Java --checking struct opt checking for illegal function calls in source code Performed after compiling, because compiler gives better syntax error messages. Can be omitted, if no checking should be done. How can it be omitted? config --C/Java --checking --sources [ELEMENT_ID, ELEMENT_ID, ...] must array of identifiers of to be checked sources; given by elements[]{ELEMENT_ID} above config --C --checking --behavior one of { mergeAndInclude , \"element\"} Ignored! Hardwired semantics is \"mergeAndInclude\". \"mergeAndInclude\": merged elements will be checked alltogether, types are given by header #include's; \"element\" : each element will be checked for itself, some predefined standard types For more details see C checking semantics . config --C --checking --forbiddenCalls string must forbidden call names separated by WS; only idents (no braces, no func args) config --Java --checking --forbiddenCalls string opt forbidden call name expressions separated by WS For semantics see Java checking semantics . config --Java --checking --allowedCalls string opt allowed call name expressions separated by WS For semantics see Java checking semantics . config --C/C++ --linking struct must / opt (if stopped before) config --C/C++ --linking --flags string must LFLAGS e.g. \"\" config --C/C++/Java --running struct must / opt (if stopped before) config --C/C++/Java --running --commandLineArguments string opt arguments given to main() function Outlook: mechanism for transforming input values (e.g. by sliders) into CLI arguments. To be addressed now? config --C/C++/Java --running --timelimitInSeconds int opt CPU time limit For semantics see Notes to \"timelimitInSeconds\" . config --Java --running --flags string opt flags given to JVM config --Java --running --mainClass string opt (if unique) / must (if not unique) class containing \"public static void main(String[] args) {\" \"args\" may be another name. If main function is unique, its correct class should be detected automatically. config --C --stopAfterPhase one of {\"merging\", \"compiling\", \"checking\", \"linking\", \"running\" } opt chain: merging -> compiling -> checking -> linking -> running If omitted, CC tries to execute all given phases (same as \"running\" ). config --C++ --stopAfterPhase one of {\"merging\", \"compiling\", \"linking\", \"running\" } opt chain: merging -> compiling -> linking -> running If omitted, CC tries to execute all given phases (same as \"running\" ). config --Java --stopAfterPhase one of {\"merging\", \"compiling\", \"running\" } opt chain: merging -> compiling -> running If omitted, CC tries to execute all given phases (same as \"running\" ). checking? config --DuMuX struct opt configuration for DuMuX Chain: running. There is a first simple chain for just running preinstalled executables. Later this will be extended. config --DuMuX --running struct must config --DuMuX --running --executable string must name of executable to run (as in backend file system) config --DuMuX --running --commandLineArguments string opt additional command line args config --DuMuX --running --timelimitInSeconds int opt CPU time limit For semantics see Notes to \"timelimitInSeconds\" . config --DuMuX --running --observe_stderr bool ( false ) opt if true, transfer intermediate stderr Results Is this implemented?","title":"Exercise JSON Format"},{"location":"viplab/exercises/#notes-to-timelimitinseconds","text":"There is a default CPU time limit (see RLIMIT_CPU of 'man setrlimit') for running or interpreting, which depends on backend configuration. This is good for terminating non-terminating programs, e.g. endless loops. Optional attribute \"timelimitInSeconds\" may lower this default CPU time limit; if it is higher than default, it will be ignored. Setting it to a value as much as possible below default is good for backend response time under high load; especially, if default is configured for performing expensive computations.","title":"Notes to \"timelimitInSeconds\""},{"location":"viplab/exercises/#notes-to-ttl-mechanism","text":"TTL mechanism as specified is suited for automatically deleting outdated exercises at development system. However it is not suited for limiting lifetime at production system, because extending exercise' lifetime is not possible without changing its resource index, and referenced exercises may diminish too early (this problems would stay with a PUT new TTL approach!).","title":"Notes to TTL mechanism"},{"location":"viplab/exercises/#notes-to-c-config","text":"","title":"Notes to C config"},{"location":"viplab/exercises/#c-checking-semantics","text":"08.05.2013: Semantics is \"mergeAndInclude\" for both prod systems and devel system (\"element\" unused). The semantics of config--C--checking--behavior values \"mergeAndInclude\" (default) and \"element\" (unused) are totally different. \"mergeAndInclude\" (default): Checked will be the merge result of elements after being preprocessed by the C preprocessor, so #include's are allowed and honored. Types have to be defined by the corresponding system headers (e.g. by #include <stdio.h> ) and no predefined standard types should be expected. It's possible to have illegal function calls in source elements (being part of some merge) not being checked (typically teacher code). This means, that during checking it has to and will be looked, in which source element an illegal function call happens, for knowing, if this actually is an error case. \"element\" (unused): Each element has to contain correct C code for itself. In addition to basic types some standard types defined in system headers are predefined (e.g. FILE, size_t). Using types from the outside -- e.g. other elements defining them or #include's in teacher code elements -- does not work. Common for both: no preprocessor commands are allowed in to be checked elements, with only one exception: #include's are allowed in case of \"mergeAndInclude\". The reason for the latter is to give students access to source elements serving as headers - editable for them or not. Functions from system headers could be #include'd, too. The teacher has the responsibility to put unwished system calls like system() and others from libc into \"forbiddenCalls\". Another point of control is to avoid linking with libs, whose functions shouldn't be used (this does not work with libc (automatically linked)).","title":"C checking semantics"},{"location":"viplab/exercises/#notes-to-java-config","text":"Mapping of merged sources to correct files in package directory hierarchy works automatically by package detection. So there is no need to manually map merges to corresponding files. Main function detection looks for \"public static void main(String[] args) {\" in all merges (\"args\" may be another name) not explicitly mapped by \"elementMap\". If it is unique - only one class containing a main() -, it will be used automatically; otherwise which one to use has to be given by config--Java--running--mainClass.","title":"Notes to Java config"},{"location":"viplab/exercises/#java-checking-semantics","text":"Matching expressions for use in \"allowedCalls\" and \"forbiddenCalls\" '**' is for pure prefix matching; '*' for more fine-granular matching. Examples of matching expressions: - java.io.* matches all calls to methods in all classes in package, but does not match calls to methods in classes in subpackages; - java.io.** matches all calls to methods in all classes in package, _and_ in all classes in subpackages (if they exist); - java.io.Foo matches all calls to methods in class Foo, _and_ to methods in inner classes; - java.io.Foo.* \" \" \" \" \" \" \" \" , but _not_ to methods in inner classes (eg. to java.io.Foo$Bar.callMe); - java.io.Foo.callMe matches (only) the call to method callMe in Foo; - java.io.Foo$Bar.callMe matches (only) the call to method callMe in inner class Foo$Bar. If used in \"forbiddenCalls\" only (property \"allowedCalls\" missing): - java.io.* forbids all calls to methods in all classes in package, but allows calls to methods in classes in subpackages; - java.io.** forbids all calls to methods in all classes in package, _and_ in all classes in subpackages (if they exist); - java.io.Foo forbids all calls to methods in class Foo, _and_ to methods in inner classes; - java.io.Foo.* \" \" \" \" \" \" \" \" , but _not_ to methods in inner classes (eg. to java.io.Foo$Bar.callMe); - java.io.Foo.callMe forbids (only) the call to method callMe in Foo; - java.io.Foo$Bar.callMe forbids (only) the call to method callMe in inner class Foo$Bar. One or more of these expressions may be given by \"allowedCalls\" and/or \"forbiddenCalls\", separated by WS; e.g. \"forbiddenCalls\": \"java.io.** java.lang.Class\" . An allowed() or forbidden() predicate gives true, - if one of its corresponding matching expressions - an entry in property \"allowedCalls\" resp. \"forbiddenCalls\" - matches, or - if there is no corresponding property given at all. Otherwise it gives false. All calls will be filtered by following composed predicate for getting allowed ones: allowed(call) && ! forbidden(call) <=> ! forbidden(call) && allowed(call) . If only one part is given, this predicate reduces to: allowed(call) resp. ! forbidden(call) . Default for not given part of predicate is - 'no forbidden': ! forbidden(call) == true, and - 'all allowed' : allowed(call) == true. (opposite defaults would render the given part useless). If sets 'allowed' and 'forbidden' - are disjunct -> 'allowed' are allowed and all other forbidden. - have an intersection -> ('allowed' minus intersection) is allowed (all other forbidden). With this logic it is possible to define - a negative list by giving 'forbiddenCalls' only, or - a positive one by giving \"allowedCalls\", or - a mixture of both.","title":"Java checking semantics"},{"location":"viplab/exercises/#notes-to-dumux-config","text":"This \"config\" is a second step to a more extended one later: it supports choosing between different executables with - optional - one or more input files each. CC allows one or more objects in Exercise--elements[], which will be used as file input for the given executable. Mappings of element to input file have to be given by \"elementMap\"; how to become input to executable by \"commandLineArguments\" (see above). How resulting input file(s) (in CWD of started executable) will be given by \"commandLineArgs\" to executable, has to be defined outside this document.","title":"Notes to DuMuX config"},{"location":"viplab/exercises/#notes-to-merging","text":"Merging concatenates given elements for further processing. If non-empty elements do not end with a '\\n', it will be added (to have a mapping from each line number of merge result to just one originating element).","title":"Notes to merging"},{"location":"viplab/exercises/#json-objects-in-exercise-elements","text":"An object in array elements[] has the following members: Key Type (an enum default is marked by italics ) Opt / Must Description Comment AS identifier ELEMENT_ID (string) must for later referencing, has to be unique group string opt for grouping elements in frontend Ignored by backend. Drop? visible bool ( false ) opt if element should be shown in SC There may be elements not to be shown: e.g. invisible source code. modifiable bool ( false ) opt editability/changeability of \"value\" (see below) in SC name string opt name to be shown in SC If it is missing, \"identifier\" could be used. MIMEtype One of { \"text/plain\" , \"text/html\", \"text/xml\", \"text/uri-list\"} opt info for interpreting content \"text/uri-list\": weblinks to be followed and presented in SC. syntaxHighlighting One of { \"none\" , \"C\", \"C++\", \"Matlab\", \"XML\", \"Java\"} opt \"none\" : no syntax highlighting; \"C\": syntax highlighting for C programming language; etc. emphasis One of {\"low\", \"medium\" , \"high\"} opt info for rendering Still needed? value string must text or other content This is the member, which may be modified, if \"modifiable\" (see above) is true. Note: objects in array elements[] are identified via their \"identifier\" member.","title":"JSON objects in Exercise--elements[]"},{"location":"viplab/interrupts/","text":"Note It's unclear, when Interrupts will be implemented: for short computations only this is not necessary (but for e.g. long running simulations). @Heiko: what's the status of the broadcasting mechanism? --sr /numlab/interrupts Broadcast message queue. Interface POST, GET (see ''English section name unknown so far.'' ) Generic POST resourceURL (push) : creates Interrupt. POST resourceURL/fifo (pull) : gets first Interrupt and removes it from the queue. GET resourceURL/fifo (look) : gets first Interrupt (fifo) without removing it from the queue. VipLab Specific POST resourceURL (push) will be used by SCs, POST resourceURL/fifo (pull) by CCs. Student clients (SCs) push Interrupts into this queue; computation clients (CCs) pulls them from there (each CC gets all Interrupts (broadcast)). For getting next Interrupt the former one has to be removed (by POST resourceURL/fifo (pull)). POST resourceURL (push) : SC creates Interrupt for interrupting a computation of a formerly posted Solution. POST resourceURL/fifo (pull) : each CC pulls next available Interrupt. If this Interrupt matches a currently computed Solution (affects only ''one'' CC), its computation will be finished, otherwise (all other CCs) it will be ignored. GET resourceURL/fifo (look) : for debugging purposes only. Notes: For getting Interrupts in sensible time, CCs have to poll the queue often enough. CCs have to remove all Interrupt messages not affecting them (from CC point of view it has its own queue getting all broadcasted messages). This should be done regularily ''outside'' computations, too. Message Interrupt JSON Definition by Example (informal) { \"Interrupt\": // wrapper { \"postTime\" : \"1985-04-13T18:00:00.12Z\", // must \"ID\" : \"#11\", // must, for tracking and debugging \"comment\" : \"don't wanna wait anymore\", // opt \"Solution\" : { \"ID\" : \"#37\" // ID of Solution formerly generated by SC } // Solution } } // \"Interrupt\" Interrupt JSON Format wrapper \"Interrupt\" around the following Key [--Subkey] Type Opt / Must Description Comment postTime string UTC must timestamp from SC Timestamp from SC: in addition a CC side timestamp could be made. ID string must unique ID created by SC (automatically) For tracking and debugging purposes. comment string opt Solution struct must Solution --ID String must refers to unique Solution ID Notes The computation the Interrupt applies to is defined by Solution--ID above, and sender identity: this is given outside this JSON-Message. An alternative could be to use UUIDs for Solution--IDs: but we already need/have some sender identity for routing back Results to Solution senders (and can use it here, too).","title":"Interrupts"},{"location":"viplab/interrupts/#numlabinterrupts","text":"Broadcast message queue.","title":"/numlab/interrupts"},{"location":"viplab/interrupts/#interface","text":"POST, GET (see ''English section name unknown so far.'' )","title":"Interface"},{"location":"viplab/interrupts/#generic","text":"POST resourceURL (push) : creates Interrupt. POST resourceURL/fifo (pull) : gets first Interrupt and removes it from the queue. GET resourceURL/fifo (look) : gets first Interrupt (fifo) without removing it from the queue.","title":"Generic"},{"location":"viplab/interrupts/#viplab-specific","text":"POST resourceURL (push) will be used by SCs, POST resourceURL/fifo (pull) by CCs. Student clients (SCs) push Interrupts into this queue; computation clients (CCs) pulls them from there (each CC gets all Interrupts (broadcast)). For getting next Interrupt the former one has to be removed (by POST resourceURL/fifo (pull)). POST resourceURL (push) : SC creates Interrupt for interrupting a computation of a formerly posted Solution. POST resourceURL/fifo (pull) : each CC pulls next available Interrupt. If this Interrupt matches a currently computed Solution (affects only ''one'' CC), its computation will be finished, otherwise (all other CCs) it will be ignored. GET resourceURL/fifo (look) : for debugging purposes only. Notes: For getting Interrupts in sensible time, CCs have to poll the queue often enough. CCs have to remove all Interrupt messages not affecting them (from CC point of view it has its own queue getting all broadcasted messages). This should be done regularily ''outside'' computations, too.","title":"VipLab Specific"},{"location":"viplab/interrupts/#message","text":"","title":"Message"},{"location":"viplab/interrupts/#interrupt-json-definition-by-example-informal","text":"{ \"Interrupt\": // wrapper { \"postTime\" : \"1985-04-13T18:00:00.12Z\", // must \"ID\" : \"#11\", // must, for tracking and debugging \"comment\" : \"don't wanna wait anymore\", // opt \"Solution\" : { \"ID\" : \"#37\" // ID of Solution formerly generated by SC } // Solution } } // \"Interrupt\"","title":"Interrupt JSON Definition by Example (informal)"},{"location":"viplab/interrupts/#interrupt-json-format","text":"wrapper \"Interrupt\" around the following Key [--Subkey] Type Opt / Must Description Comment postTime string UTC must timestamp from SC Timestamp from SC: in addition a CC side timestamp could be made. ID string must unique ID created by SC (automatically) For tracking and debugging purposes. comment string opt Solution struct must Solution --ID String must refers to unique Solution ID","title":"Interrupt JSON Format"},{"location":"viplab/interrupts/#notes","text":"The computation the Interrupt applies to is defined by Solution--ID above, and sender identity: this is given outside this JSON-Message. An alternative could be to use UUIDs for Solution--IDs: but we already need/have some sender identity for routing back Results to Solution senders (and can use it here, too).","title":"Notes"},{"location":"viplab/results/","text":"/numlab/results Message queue. Result JSON Format uses Solution JSON Format . Interface POST, GET ( see ''English section name unknown so far.'' ) Generic POST resourceURL (push) creates Result. POST resourceURL/fifo (pull) gets first Result and removes it from the queue. GET resourceURL/fifo (look) gets first Result (fifo) without removing it from the queue. For getting Results in sensible time, clients have to poll the queue continuously. ViPLab Specific POST resourceURL (push) will be used by CCs, POST resourceURL/fifo (pull) by SCs. GET may be used by SCs (but it shouldn't) or for debugging purposes. Computation clients (CCs) push computation Results into this queue; a student client (SC) pulls them from there (logically each SC has its own queue separated from others). For getting next Result an SC has to pull the former. Message Result JSON Definition by Example (informal) { \"Result\" : { \"ID\" : \"one chunk 2012-07-25 17:59:50\", \"status\" : \"final\", \"computation\" : { \"startTime\" : \"2012-07-25 17:59:49\", \"duration\" : \"555ms\", \"finishTime\" : \"2012-07-25 17:59:50\", \"CC_versionLong\" : \"[ViP CCv2.16 (C chain)v1.9 (Matlab chain)v2.6.1 (Octave chain)v1.4.1 (DuMuX chain)v1.2 (C++ chain)v1.3 (Tue Jun 26 19:10:42 CEST 2012)]\", \"CC_version\" : \"ViP CCv2.16\", \"chain_version\" : \"(C chain)v1.9\", \"technicalInfo\" : { \"host\" : \"numlab\", \"PID\" : \"6405\", \"ID\" : \"#1\" }, \"userInfo\" : { \"summary\" : \"(C chain)v1.9 failed.\", \"elements\" : [ { \"severity\" : \"info\", \"type\" : \"compiler\", \"message\" : \"source_0.c: In function \\u2018trapez\\u2019:\", \"output\" : { \"elementID\" : \"compile_stderr_0.txt\", \"extract\" : \"source_0.c: In function \\u2018trapez\\u2019:\", \"begin\" : 0, \"end\" : 37 } }, { \"severity\" : \"warning\", \"type\" : \"compiler\", \"message\" : \"source_0.c:21:10: warning: unused variable \\u2018x\\u2019 [-Wunused-variable]\", \"source\" : { \"elementID\" : \"codeFromStudent\", \"extract\" : \" double x = 0;\", \"begin\" : 406, \"end\" : 421, \"line\" : 15, \"col\" : 10 }, \"output\" : { \"elementID\" : \"compile_stderr_0.txt\", \"extract\" : \"source_0.c:21:10: warning: unused variable \\u2018x\\u2019 [-Wunused-variable]\", \"begin\" : 38, \"end\" : 108 } }, { \"severity\" : \"error\", \"type\" : \"callcheck\", \"message\" : \"[C function filtering] Function call not allowed:\\n\\\"system\\\"; original source: codeFromStudent, line (corrected): 20, col: 3\\nForbidden calls:\\nsystem.\\n\", \"source\" : { \"elementID\" : \"codeFromStudent\", \"extract\" : \" system(\\\"/bin/rm /tmp/foo.txt\\\"); // illegal call (should be catched by checker)\", \"begin\" : 325, \"end\" : 405, \"line\" : 14, \"col\" : 3 } } ] } }, \"Solution\" : { \"postTime\" : \"2009-09-20T04:15:01.22Z\", \"ID\" : \"[with illegal call] 127.32.15.3#127\", \"comment\" : \"Die war aber schwer!\", \"exercise\" : \"https://nfldevvipecs.rus.uni-stuttgart.de/numlab/exercises/442641\", \"exerciseModifications\" : { \"elements\" : [ { \"identifier\" : \"codeFromStudent\", \"value\" : \"typedef double (funcPtr)(double); // type of function to be integrated\\n\\n/* Definition der zu integrierenden Funktion */\\ndouble f(double x)\\n{\\n return x * x; // Beispiel\\n}\\n\\ndouble trapez(double a, double b, int n, funcPtr f)\\n{\\n double sum = 0; // init\\n /* Ab hier kommt die Funktionalitaet der integrierenden Funktion.. */\\n\\n system(\\\"/bin/rm /tmp/foo.txt\\\"); // illegal call (should be catched by checker)\\n double x = 0;\\n int k;\\n if (n < 1) return 0; // avoid endless recursion\\n\\n // untere Grenze\\n sum+=f(a)/2;\\n // Schleife ueber die inneren Punkte\\n for(k=1; k < n; k++)\\n {\\n sum+=f(a+(b-a)*k/n);\\n }\\n // obere Grenze\\n sum+=f(b)/2;\\n // Skalieren\\n sum*=(b-a)/n;\\n\\n return sum; // result\\n}\\n\" } ] } }, \"elements\" : [ ] } } Result JSON Format wrapper \"Result\" around the following Key Value Type Opt / Must Description Comment ID string must unique Result ID created by CC (automatically) For tracking and debugging purposes. comment string opt comment from CC status One of {\"final\", \"intermediate\"} must \"final\": last Result of computation \"intermediate\": more Results expected If there is only one Result, it status should be \"final\". If there are multiple Results, status of all before \"final\" should be \"intermediate\". index uint - must: if there are multiple Results - opt: if there is only one \"final\" Result counts starting from 0 Note: \"final\" Result gets last index. computation --startTime datetimeString must May be local or universal time. Just after getting a Solution. computation --duration durationString must e.g. \"128ms\" Computation duration time since startTime (increases with each intermediate Result). computation --finishTime datetimeString must, iff status == \"final\" May be local or universal time. Just before posting final Result. computation --CC_versionLong string must computation --CC_version string must computation --chain_version string must computation --technicalInfo struct must computation --technicalInfo --host string must CC host computation --technicalInfo --PID unsigned must CC PID computation --technicalInfo --ID string must Info for finding log files (may be number of computations). computation --technicalInfo --<key> <val_type> opt <key>: locally unique, <val_type>: arbitrary type For allowing further key/val pairs if there should be a need. computation --userInfo struct must see Result userInfo object spec Solution struct must exact copy of Solution ( Solution JSON Format ) which this Result has been computed for Having Solution--ID is important for SC: think of posting multiple different Solutions with waiting for different Results. And having all dynamic data together is good! elements [ {...}, {...}, ... ] must array of objects containing elements described in the following: there has to be at least one of them JSON objects in Result--elements[] An object in (array) elements[] has the following properties: Key Value Type (an enum default is marked by italics ) Opt / Must Description Comment identifier string must for later referencing, has to be unique Technical: e.g. it could be created by using a filename (of a file being source of value property). name string opt name, need not be unique User info: may be shown in SC. MIMEtype One of { \"text/plain\" , \"text/html\", \"text/uri-list\", \"image/png\", \"application/x-vgf\", \"application/x-vgf3\", \"application/x-vgfc\"} opt info for interpreting value property - \"text/uri-list\": links to websides to be presented in SC; - \"image/png\": encoding unclear so far; - \"application/x-vgf\": generated graphics output in 'ViP graphics format'; - \"application/x-vgf3\": generated graphics output in 'ViP graphics format 3D'; - \"application/x-vgfc\": generated graphics output in 'ViP graphics format contour plot'. emphasis One of {\"low\", \"medium\" , \"high\"} opt info for rendering value string must text or other content Notes: * There is a - mandatory - unique ID for objects in elements[] for referencing them later: this is especially useful, if the number of elements is variable. * If an - optional - key with default value is missing, it should be interpreted the same as being there and set to its default. * Advanced: a numOfFinalResults/finalResultNo mechanism could be of interest later: needed for sequencing computed Results (think of multiple Results for one Solution, which are computed distributed). JSON object in Result--userInfo An userInfo object (struct) has the following properties: Key Value Type Opt/Must Description Comment AS summary string opt summary of all info_element's: e.g. one warning, one error may have a summary \"An error occured.\" E.g.: \"[Error] Backend has detected an error: no result!\" or \"Success!\" elements [{...}, {...}, ...] opt array of info_element s info_element struct opt JSON object inside elements info_element --severity One of {\"error\", \"warning\", \"info\"} must info_element --type One of {\"system\", \"chain\", \"output\", \"callcheck\", \"interpreter\", \"compiler\", \"linker\", \"executable\"} must For all chains: {\"system, \"chain\", \"output\"}; for Octave/Matlab: {\"callcheck\", \"interpreter\"}; for C: {\"callcheck\", \"compiler\", \"linker\", \"executable\"}; for DuMuX: {\"executable\"} If type equals \"system\", whole Result if of interest for a bug report. Java?? info_element --message string must summary of one message to the user; it sould not contain wrong error locations (file, line, col). Together with \"soruce\"/\"line\" or \"col\" (containing corrected locations) it should give the most interesting info. may be empty string (',' in optional location_part) info_element --source struct opt contains location information only allowed if \"type\" in {\"compiler\", \"interpreter\", \"callcheck\"} info_element --source --elementID ELEMENT_ID (string) must identifier of element from Solution/Exercise elements with source input , which has triggered (error/warning/...) message info_element --source --line 1..uint_max must Location of error/warning ... info_element --source --col 1..uint_max opt ... referring to position in triggering input element. It is optional, since there are messages containing line info only info_element --output struct opt for output of tool detecting something info_element --output --elementID ELEMENT_ID (string) must identifier of element from Result elements with interpreter/compiler output , which contains error/warning message info_element --source/output --extract string must Part of referenced element. Extracted from message triggering input. info_element --source/output --begin unsigned int must Offset of extract into ... info_element --source/output --end unsigned int must ... referenced element: C-like (zero-based). Notes: * There are error messages containing multiple error triggering locations. This leads to multiple info_elements containing same \"message\" and \"output\", but different \"source\" objects. Note: another way would be to specify \"sources\":[{},...] as alternative to \"source\":{}. * \"type\": \"fatal\" may be introduced later * Compiler output may contain multiple error positions; only the first one should be extracted.","title":"/numlab/results"},{"location":"viplab/results/#numlabresults","text":"Message queue. Result JSON Format uses Solution JSON Format .","title":"/numlab/results"},{"location":"viplab/results/#interface","text":"POST, GET ( see ''English section name unknown so far.'' )","title":"Interface"},{"location":"viplab/results/#generic","text":"POST resourceURL (push) creates Result. POST resourceURL/fifo (pull) gets first Result and removes it from the queue. GET resourceURL/fifo (look) gets first Result (fifo) without removing it from the queue. For getting Results in sensible time, clients have to poll the queue continuously.","title":"Generic"},{"location":"viplab/results/#viplab-specific","text":"POST resourceURL (push) will be used by CCs, POST resourceURL/fifo (pull) by SCs. GET may be used by SCs (but it shouldn't) or for debugging purposes. Computation clients (CCs) push computation Results into this queue; a student client (SC) pulls them from there (logically each SC has its own queue separated from others). For getting next Result an SC has to pull the former.","title":"ViPLab Specific"},{"location":"viplab/results/#message","text":"","title":"Message"},{"location":"viplab/results/#result-json-definition-by-example-informal","text":"{ \"Result\" : { \"ID\" : \"one chunk 2012-07-25 17:59:50\", \"status\" : \"final\", \"computation\" : { \"startTime\" : \"2012-07-25 17:59:49\", \"duration\" : \"555ms\", \"finishTime\" : \"2012-07-25 17:59:50\", \"CC_versionLong\" : \"[ViP CCv2.16 (C chain)v1.9 (Matlab chain)v2.6.1 (Octave chain)v1.4.1 (DuMuX chain)v1.2 (C++ chain)v1.3 (Tue Jun 26 19:10:42 CEST 2012)]\", \"CC_version\" : \"ViP CCv2.16\", \"chain_version\" : \"(C chain)v1.9\", \"technicalInfo\" : { \"host\" : \"numlab\", \"PID\" : \"6405\", \"ID\" : \"#1\" }, \"userInfo\" : { \"summary\" : \"(C chain)v1.9 failed.\", \"elements\" : [ { \"severity\" : \"info\", \"type\" : \"compiler\", \"message\" : \"source_0.c: In function \\u2018trapez\\u2019:\", \"output\" : { \"elementID\" : \"compile_stderr_0.txt\", \"extract\" : \"source_0.c: In function \\u2018trapez\\u2019:\", \"begin\" : 0, \"end\" : 37 } }, { \"severity\" : \"warning\", \"type\" : \"compiler\", \"message\" : \"source_0.c:21:10: warning: unused variable \\u2018x\\u2019 [-Wunused-variable]\", \"source\" : { \"elementID\" : \"codeFromStudent\", \"extract\" : \" double x = 0;\", \"begin\" : 406, \"end\" : 421, \"line\" : 15, \"col\" : 10 }, \"output\" : { \"elementID\" : \"compile_stderr_0.txt\", \"extract\" : \"source_0.c:21:10: warning: unused variable \\u2018x\\u2019 [-Wunused-variable]\", \"begin\" : 38, \"end\" : 108 } }, { \"severity\" : \"error\", \"type\" : \"callcheck\", \"message\" : \"[C function filtering] Function call not allowed:\\n\\\"system\\\"; original source: codeFromStudent, line (corrected): 20, col: 3\\nForbidden calls:\\nsystem.\\n\", \"source\" : { \"elementID\" : \"codeFromStudent\", \"extract\" : \" system(\\\"/bin/rm /tmp/foo.txt\\\"); // illegal call (should be catched by checker)\", \"begin\" : 325, \"end\" : 405, \"line\" : 14, \"col\" : 3 } } ] } }, \"Solution\" : { \"postTime\" : \"2009-09-20T04:15:01.22Z\", \"ID\" : \"[with illegal call] 127.32.15.3#127\", \"comment\" : \"Die war aber schwer!\", \"exercise\" : \"https://nfldevvipecs.rus.uni-stuttgart.de/numlab/exercises/442641\", \"exerciseModifications\" : { \"elements\" : [ { \"identifier\" : \"codeFromStudent\", \"value\" : \"typedef double (funcPtr)(double); // type of function to be integrated\\n\\n/* Definition der zu integrierenden Funktion */\\ndouble f(double x)\\n{\\n return x * x; // Beispiel\\n}\\n\\ndouble trapez(double a, double b, int n, funcPtr f)\\n{\\n double sum = 0; // init\\n /* Ab hier kommt die Funktionalitaet der integrierenden Funktion.. */\\n\\n system(\\\"/bin/rm /tmp/foo.txt\\\"); // illegal call (should be catched by checker)\\n double x = 0;\\n int k;\\n if (n < 1) return 0; // avoid endless recursion\\n\\n // untere Grenze\\n sum+=f(a)/2;\\n // Schleife ueber die inneren Punkte\\n for(k=1; k < n; k++)\\n {\\n sum+=f(a+(b-a)*k/n);\\n }\\n // obere Grenze\\n sum+=f(b)/2;\\n // Skalieren\\n sum*=(b-a)/n;\\n\\n return sum; // result\\n}\\n\" } ] } }, \"elements\" : [ ] } }","title":"Result JSON Definition by Example (informal)"},{"location":"viplab/results/#result-json-format","text":"wrapper \"Result\" around the following Key Value Type Opt / Must Description Comment ID string must unique Result ID created by CC (automatically) For tracking and debugging purposes. comment string opt comment from CC status One of {\"final\", \"intermediate\"} must \"final\": last Result of computation \"intermediate\": more Results expected If there is only one Result, it status should be \"final\". If there are multiple Results, status of all before \"final\" should be \"intermediate\". index uint - must: if there are multiple Results - opt: if there is only one \"final\" Result counts starting from 0 Note: \"final\" Result gets last index. computation --startTime datetimeString must May be local or universal time. Just after getting a Solution. computation --duration durationString must e.g. \"128ms\" Computation duration time since startTime (increases with each intermediate Result). computation --finishTime datetimeString must, iff status == \"final\" May be local or universal time. Just before posting final Result. computation --CC_versionLong string must computation --CC_version string must computation --chain_version string must computation --technicalInfo struct must computation --technicalInfo --host string must CC host computation --technicalInfo --PID unsigned must CC PID computation --technicalInfo --ID string must Info for finding log files (may be number of computations). computation --technicalInfo --<key> <val_type> opt <key>: locally unique, <val_type>: arbitrary type For allowing further key/val pairs if there should be a need. computation --userInfo struct must see Result userInfo object spec Solution struct must exact copy of Solution ( Solution JSON Format ) which this Result has been computed for Having Solution--ID is important for SC: think of posting multiple different Solutions with waiting for different Results. And having all dynamic data together is good! elements [ {...}, {...}, ... ] must array of objects containing elements described in the following: there has to be at least one of them","title":"Result JSON Format"},{"location":"viplab/results/#json-objects-in-result-elements","text":"An object in (array) elements[] has the following properties: Key Value Type (an enum default is marked by italics ) Opt / Must Description Comment identifier string must for later referencing, has to be unique Technical: e.g. it could be created by using a filename (of a file being source of value property). name string opt name, need not be unique User info: may be shown in SC. MIMEtype One of { \"text/plain\" , \"text/html\", \"text/uri-list\", \"image/png\", \"application/x-vgf\", \"application/x-vgf3\", \"application/x-vgfc\"} opt info for interpreting value property - \"text/uri-list\": links to websides to be presented in SC; - \"image/png\": encoding unclear so far; - \"application/x-vgf\": generated graphics output in 'ViP graphics format'; - \"application/x-vgf3\": generated graphics output in 'ViP graphics format 3D'; - \"application/x-vgfc\": generated graphics output in 'ViP graphics format contour plot'. emphasis One of {\"low\", \"medium\" , \"high\"} opt info for rendering value string must text or other content Notes: * There is a - mandatory - unique ID for objects in elements[] for referencing them later: this is especially useful, if the number of elements is variable. * If an - optional - key with default value is missing, it should be interpreted the same as being there and set to its default. * Advanced: a numOfFinalResults/finalResultNo mechanism could be of interest later: needed for sequencing computed Results (think of multiple Results for one Solution, which are computed distributed).","title":"JSON objects in Result--elements[]"},{"location":"viplab/results/#json-object-in-result-userinfo","text":"An userInfo object (struct) has the following properties: Key Value Type Opt/Must Description Comment AS summary string opt summary of all info_element's: e.g. one warning, one error may have a summary \"An error occured.\" E.g.: \"[Error] Backend has detected an error: no result!\" or \"Success!\" elements [{...}, {...}, ...] opt array of info_element s info_element struct opt JSON object inside elements info_element --severity One of {\"error\", \"warning\", \"info\"} must info_element --type One of {\"system\", \"chain\", \"output\", \"callcheck\", \"interpreter\", \"compiler\", \"linker\", \"executable\"} must For all chains: {\"system, \"chain\", \"output\"}; for Octave/Matlab: {\"callcheck\", \"interpreter\"}; for C: {\"callcheck\", \"compiler\", \"linker\", \"executable\"}; for DuMuX: {\"executable\"} If type equals \"system\", whole Result if of interest for a bug report. Java?? info_element --message string must summary of one message to the user; it sould not contain wrong error locations (file, line, col). Together with \"soruce\"/\"line\" or \"col\" (containing corrected locations) it should give the most interesting info. may be empty string (',' in optional location_part) info_element --source struct opt contains location information only allowed if \"type\" in {\"compiler\", \"interpreter\", \"callcheck\"} info_element --source --elementID ELEMENT_ID (string) must identifier of element from Solution/Exercise elements with source input , which has triggered (error/warning/...) message info_element --source --line 1..uint_max must Location of error/warning ... info_element --source --col 1..uint_max opt ... referring to position in triggering input element. It is optional, since there are messages containing line info only info_element --output struct opt for output of tool detecting something info_element --output --elementID ELEMENT_ID (string) must identifier of element from Result elements with interpreter/compiler output , which contains error/warning message info_element --source/output --extract string must Part of referenced element. Extracted from message triggering input. info_element --source/output --begin unsigned int must Offset of extract into ... info_element --source/output --end unsigned int must ... referenced element: C-like (zero-based). Notes: * There are error messages containing multiple error triggering locations. This leads to multiple info_elements containing same \"message\" and \"output\", but different \"source\" objects. Note: another way would be to specify \"sources\":[{},...] as alternative to \"source\":{}. * \"type\": \"fatal\" may be introduced later * Compiler output may contain multiple error positions; only the first one should be extracted.","title":"JSON object in Result--userInfo"},{"location":"viplab/solutions/","text":"/numlab/solutions Message queue. Solutions (made by students) to (referenced) Exercises. Solutions Json format uses Excercise JSON Format . Interface POST, GET (see ''English section name unknown so far.'' ) Generic POST resourceURL (push) creates Solution. POST resourceURL/fifo (pull) gets first Solution and removes it from the queue. GET resourceURL/fifo (look) gets first Solution (fifo) without removing it from the queue. VipLab Specific POST resourceURL (push) will be used by SCs, POST resourceURL/fifo (pull) by CCs. Student clients (SCs) push Solutions into this queue; computation clients (CCs) pulls them from there (all CCs share this queue). For getting next Solution the former one has to be removed (by POST resourceURL/fifo (pull)). GET will not be used by CC: using POST resourceURL/fifo (pull) assures that each Solution will be computed by one CC (transaction semantics; if GET would be used, same Solution could be taken from multiple ones); may be used for debugging purposes. Notes: Solution comes from SC and serves as input for CC: it is not the result from the following computation. POST resourceURL/fifo (pull) returns a single solution (not e.g. a list of multiple URLs). Message Solution JSON Definition by Example (informal) { \"Solution\" : // wrapper { \"postTime\" : \"1985-04-13T17:10:00.52Z\", // generated by SC \"ID\" : \"#37\", // generated by SC \"evaluationService\": { \"jobID\":\"1234abc\", \"jobSender\":\"2\" } \"comment\" : \"Die war aber schwer!\", \"exercise\": \"https://ecs.uni-stuttgart.de/numlab/exercises/4711\", // URL to existing exercise \"exerciseModifications\" : // contains modified parts of referenced exercise { \"elements\" : [ { \"identifier\": \"codeFromStudent\", // must: identifier of (text) element, // has to be the *same* as in original from Exercise \"value\" : \"void bar() { printf(\\\"bar!\\\\n\\\");\\n}\\n\" // changed source from student // ('\\\\n' quoting gives '\\n' after decoding) // Other fields defining this (text) element must *not* be repeated here. } // unchanged elements needn't be repeated here ] } } } // \"Solution\" wrapper Solution JSON Format wrapper \"Solution\" around the following: Key [--Subkey] Type Opt / Must Description Comment AS postTime string UTC must timestamp Timestamp from SC: in addition a CC side timestamp should be made (for security reasons). Needed? What is the security reason? ID string must unique Solution ID created by SC (automatically) Needed for associating computed Results to Solution (think of long computations, where one overruns another). evaluationService struct opt jobID: evaluation job identification (string) jobSender: membership id of evaluation job sender (string) Only relevant for evaluation service. Computation backend must not change these values. Needed for associating results to evaluation jobs (VIP 2.1). comment string opt comment from student implemented in frontend? exercise string URL must existing exercise at ECS server insert complete computation-template here? exerciseModifications struct opt modifications of Exercise having same structure as Exercise: - \"exerciseModifications\" corresponds to \"Exercise\" as root; - leaves of this structure are only \"identifier\":value and \"value\":value pairs (no others allowed) It contains student's work defining this solution for - URL referenced - Exercise. If omitted, an unchanged Exercise is given as solution: this may make sense, if an unchanged Exercise is computable. To be a modifiable object taken from Excercise: - it has to have members \"identifier\", \"modifiable\", \"value\"; and - its member \"modifiable\" has to be true. exerciseModifications --elements[] [ {...}, {...}, ... ] must array containing modified JSON objects in Exercise--elements[] : there has to be at least one element Semantics for CC: - modified version here will be recognized by having the same \"identifier\" as the original one; - modified version wins; - objects just existing in original version will be taken as they are (merge effect).","title":"/numlab/solutions"},{"location":"viplab/solutions/#numlabsolutions","text":"Message queue. Solutions (made by students) to (referenced) Exercises. Solutions Json format uses Excercise JSON Format .","title":"/numlab/solutions"},{"location":"viplab/solutions/#interface","text":"POST, GET (see ''English section name unknown so far.'' )","title":"Interface"},{"location":"viplab/solutions/#generic","text":"POST resourceURL (push) creates Solution. POST resourceURL/fifo (pull) gets first Solution and removes it from the queue. GET resourceURL/fifo (look) gets first Solution (fifo) without removing it from the queue.","title":"Generic"},{"location":"viplab/solutions/#viplab-specific","text":"POST resourceURL (push) will be used by SCs, POST resourceURL/fifo (pull) by CCs. Student clients (SCs) push Solutions into this queue; computation clients (CCs) pulls them from there (all CCs share this queue). For getting next Solution the former one has to be removed (by POST resourceURL/fifo (pull)). GET will not be used by CC: using POST resourceURL/fifo (pull) assures that each Solution will be computed by one CC (transaction semantics; if GET would be used, same Solution could be taken from multiple ones); may be used for debugging purposes. Notes: Solution comes from SC and serves as input for CC: it is not the result from the following computation. POST resourceURL/fifo (pull) returns a single solution (not e.g. a list of multiple URLs).","title":"VipLab Specific"},{"location":"viplab/solutions/#message","text":"","title":"Message"},{"location":"viplab/solutions/#solution-json-definition-by-example-informal","text":"{ \"Solution\" : // wrapper { \"postTime\" : \"1985-04-13T17:10:00.52Z\", // generated by SC \"ID\" : \"#37\", // generated by SC \"evaluationService\": { \"jobID\":\"1234abc\", \"jobSender\":\"2\" } \"comment\" : \"Die war aber schwer!\", \"exercise\": \"https://ecs.uni-stuttgart.de/numlab/exercises/4711\", // URL to existing exercise \"exerciseModifications\" : // contains modified parts of referenced exercise { \"elements\" : [ { \"identifier\": \"codeFromStudent\", // must: identifier of (text) element, // has to be the *same* as in original from Exercise \"value\" : \"void bar() { printf(\\\"bar!\\\\n\\\");\\n}\\n\" // changed source from student // ('\\\\n' quoting gives '\\n' after decoding) // Other fields defining this (text) element must *not* be repeated here. } // unchanged elements needn't be repeated here ] } } } // \"Solution\" wrapper","title":"Solution JSON Definition by Example (informal)"},{"location":"viplab/solutions/#solution-json-format","text":"wrapper \"Solution\" around the following: Key [--Subkey] Type Opt / Must Description Comment AS postTime string UTC must timestamp Timestamp from SC: in addition a CC side timestamp should be made (for security reasons). Needed? What is the security reason? ID string must unique Solution ID created by SC (automatically) Needed for associating computed Results to Solution (think of long computations, where one overruns another). evaluationService struct opt jobID: evaluation job identification (string) jobSender: membership id of evaluation job sender (string) Only relevant for evaluation service. Computation backend must not change these values. Needed for associating results to evaluation jobs (VIP 2.1). comment string opt comment from student implemented in frontend? exercise string URL must existing exercise at ECS server insert complete computation-template here? exerciseModifications struct opt modifications of Exercise having same structure as Exercise: - \"exerciseModifications\" corresponds to \"Exercise\" as root; - leaves of this structure are only \"identifier\":value and \"value\":value pairs (no others allowed) It contains student's work defining this solution for - URL referenced - Exercise. If omitted, an unchanged Exercise is given as solution: this may make sense, if an unchanged Exercise is computable. To be a modifiable object taken from Excercise: - it has to have members \"identifier\", \"modifiable\", \"value\"; and - its member \"modifiable\" has to be true. exerciseModifications --elements[] [ {...}, {...}, ... ] must array containing modified JSON objects in Exercise--elements[] : there has to be at least one element Semantics for CC: - modified version here will be recognized by having the same \"identifier\" as the original one; - modified version wins; - objects just existing in original version will be taken as they are (merge effect).","title":"Solution JSON Format"},{"location":"viplab3.0/","text":"ViPLab 3.0 Virtual programming laboratory for education and teaching at universities as well as executing docker images in the context of research data management. Clients (frontends) use the websocket-api to communicate to several backends (computation clients) working in a cluster. A computation client instance supports one or more language environments (e.g. 'C', 'Matlab'). This documentation describes the json-messages used by the different ViPLab components to fulfill all the various features of ViPLab. Terms (ViPLab specific) ViPLab virtual programming laboratory (for programming this term is more generic than NumLab (outdated)) NumLab legacy term for ViPLab (don't use it for new documentation) ViP ViPLab shortcut \"Virtuelles Programmierlabor\" (German project shortcut) CC computation client, also backend FC frontend client; has different views: teacher view or view of a researcher creating a new computation template student view or view of a researcher executing an existing computation client a system component interacting with the websocket-api , e.g. backends, frontends frontend launcher entrypoints for the user, that start the frontend, e.g. viplab-question-plugin-for-ilias or dataverse-viplab-extension computation a CC computes a Result of a Computation Task complementing a Computation Template ( Computation Task and - referenced - Computation Template being input, Result output of computation). Flow of information Describe who is sending which kind of message and gets what back Versioning rules Versioning rules Long living JSON messages Computation Template Computation Task Computation Result Wrapper Computation Message Types CreateComputation Result System status (not implemented yet) Computation Interrupt (not implemented yet)","title":"Index"},{"location":"viplab3.0/#viplab-30","text":"Virtual programming laboratory for education and teaching at universities as well as executing docker images in the context of research data management. Clients (frontends) use the websocket-api to communicate to several backends (computation clients) working in a cluster. A computation client instance supports one or more language environments (e.g. 'C', 'Matlab'). This documentation describes the json-messages used by the different ViPLab components to fulfill all the various features of ViPLab.","title":"ViPLab 3.0"},{"location":"viplab3.0/#terms-viplab-specific","text":"ViPLab virtual programming laboratory (for programming this term is more generic than NumLab (outdated)) NumLab legacy term for ViPLab (don't use it for new documentation) ViP ViPLab shortcut \"Virtuelles Programmierlabor\" (German project shortcut) CC computation client, also backend FC frontend client; has different views: teacher view or view of a researcher creating a new computation template student view or view of a researcher executing an existing computation client a system component interacting with the websocket-api , e.g. backends, frontends frontend launcher entrypoints for the user, that start the frontend, e.g. viplab-question-plugin-for-ilias or dataverse-viplab-extension computation a CC computes a Result of a Computation Task complementing a Computation Template ( Computation Task and - referenced - Computation Template being input, Result output of computation).","title":"Terms (ViPLab specific)"},{"location":"viplab3.0/#flow-of-information","text":"Describe who is sending which kind of message and gets what back","title":"Flow of information"},{"location":"viplab3.0/#versioning-rules","text":"Versioning rules","title":"Versioning rules"},{"location":"viplab3.0/#long-living-json-messages","text":"Computation Template Computation Task Computation Result","title":"Long living JSON messages"},{"location":"viplab3.0/#wrapper","text":"Computation","title":"Wrapper"},{"location":"viplab3.0/#message-types","text":"CreateComputation Result System status (not implemented yet) Computation Interrupt (not implemented yet)","title":"Message Types"},{"location":"viplab3.0/computation/","text":"Computation JSON Message A computation represents the combination of a computation template and a corresponding computation task . It is the input of any backend. The JSON message of a computation is very similar to a computation template , so the interested reader is also referred to its documentation . Example (informal) Note: // with text following until EOL is a comment, which is not covered by the JSON spec, and should not be contained in message sends in real; but nevertheless it would help, if JSON parsers could just ignore them. { \"identifier\" : \"4598393-95bf-409a-98a5-ee375982c3e\", // uuid, created by websocket api \"environment\" : \"C\", // important for interpreting configuration \"files\" : // must: at least one array element [ { \"identifier\": \"22483f42-95bf-984a-98a5-ee9485c85c3e\", // uuid from template \"path\" : \"code.c\" // filename on backend \"parts\" : // must: at least one array element [ { \"identifier\": \"preamble\", // identifier from template \"access\" : \"visible\", // access from template \"content\" : \"I2luY2x1ZGUgPHN0ZGlvLmg-Cg\" // source (base64url encoded) // decoded: #include <stdio.h>\\n }, { \"identifier\": \"codeFromStudent\", // identifier from template \"access\" : \"modifiable\", \"content\" : \"dm9pZCBiYXIoKSB7IHByaW50ZigiYmFyIQoiKTsKfQo\" // content from task // decoded: void bar() { printf(\\\"bar!\\\\n\\\");\\n}\\n }, { \"identifier\": \"postscript\", // identifier from template \"access\" : \"visible\", \"content\" : \"aW50IG1haW4oKSB7IGJhcigpOyByZXR1cm4gMDsgfQ\" // source // decoded: int main() { bar(); return 0; } } ] // parts[] } ], // files[] \"configuration\" : { \"compiling.compiler\" : \"gcc\", \"compiling.flags\" : \"-O2 -Wall\" \"checking.sources\" : [\"codeFromStudent\"], // identifier to parts \"checking.forbiddenCalls\": \"system execve\" // forbidden call names separated by WS \"linking.flags\" : \"-lm\" \"running.commandLineArguments\" : \"--stepwidth 0.5\" // mustache template with injected arguments } } Explaining the JSON Format Key [--Subkey] Type (a default is marked by italics ) Opt / Must Description Comment identifier string (UUID) must the identifier of this computation is generated by the websocket api environment one of {\"C\", \"C++\", \"Java\", \"Matlab\", \"Octave\", \"Container\", \"DuMuX\"} must Specifies the environment used for the Computation. It defines language, runtime, libraries and tools files [ {...}, {...}, ... ] must array containing File objects : there has to be at least one element configuration struct opt/must (depends on environment) Environment specific configurations Different phases can be configured like compiling, checking (for legal function calls in source code), ... configuration --compiling.sources [FILE_ID, FILE_ID, ...] must Array of identifiers of JSON File objects . Explicit compilation (only referenced sources will be compiled). for C, C++, Java configuration --compiling.compiler string must compiler to be used, e.g. \"gcc\" for C, C++ configuration --compiling.flags string must for C, C++ ; optional for Java CFLAGS for C/C++ ; compile flags for Java e.g. \"gcc\" for C/C++ ; \"-O2\" or \"\" for Java configuration --checking.sources [PART_ID, PART_ID, ...] must if checking should be performed array of identifiers of to be checked sources; given by parts[]{PART_ID} (see below ) for Matlab, Octave, C, Java configuration --checking.allowedCalls string must if checking should be performed for Matlab/Octave : allowed call names separated by WS; only idents (no braces, no func args) for Java : allowed call name expressions separated by WS for Java semantics see Java checking semantics . configuration --checking.forbiddenCalls string must if checking should be performed for C : forbidden call names separated by WS; only idents (no braces, no func args) for Java : forbidden call name expressions separated by WS for C semantics see C checking semantics ); for Java semantics see Java checking semantics . configuration --linking.flags string must LFLAGS for C, C++ ; e.g. \"\" configuration --running.stdinFilename FILE_ID must the file identifier that is passed to Matlab/Octave via standard-in configuration --running.timelimitInSeconds int opt CPU time limit for all environments ; for semantics see Notes to \"timelimitInSeconds\" . configuration --running.commandLineArguments string opt for C, C++, Java : arguments given to main() function; for DuMuX, Container : additional command line args configuration --running.flags string opt flags given to JVM for Java configuration --running.mainClass string opt (if unique) / must (if not unique) class containing \"public static void main(String[] args) {\" for Java : \"args\" may be another name. If main function is unique, its correct class should be detected automatically. configuration --running.executable string must name of executable to run (as in backend file system) for DuMuX configuration --running.entrypoint string must executable to run inside the container for Container configuration --running.observe_stderr bool ( false ) opt if true, transfer intermediate stderr Results for DuMuX, Container configuration --resources.image url must location of the image to be executed for Container ; has to be a tar configuration --resources.volume string must path in the container where data is placed for Container configuration --resources.memory string opt ( 64mb ) memory limit for the container for Container configuration --resources.numCPUs int opt number of CPUs for the container for Container JSON objects in files An object in array files[] has the following members: Key Type (an enum default is marked by italics ) Opt / Must Description Comment identifier string (UUID) must reference to a computation template file path string must absolute path to file It is not allowed to start with '/' parts [{...}, {...}, ...] must array containing part objects . There has to be at least one. JSON objects in parts An object in array parts[] has the following members: Key Type (an enum default is marked by italics ) Opt / Must Description Comment identifier string must reference to a computation template part access one of {\"invisible\", \"visible\", \"modifiable\", \"template\"} must the access level of this part equals to the access level of this part in the computation template content string must base64url-encoded source code","title":"Computation JSON Message"},{"location":"viplab3.0/computation/#computation-json-message","text":"A computation represents the combination of a computation template and a corresponding computation task . It is the input of any backend. The JSON message of a computation is very similar to a computation template , so the interested reader is also referred to its documentation .","title":"Computation JSON Message"},{"location":"viplab3.0/computation/#example-informal","text":"Note: // with text following until EOL is a comment, which is not covered by the JSON spec, and should not be contained in message sends in real; but nevertheless it would help, if JSON parsers could just ignore them. { \"identifier\" : \"4598393-95bf-409a-98a5-ee375982c3e\", // uuid, created by websocket api \"environment\" : \"C\", // important for interpreting configuration \"files\" : // must: at least one array element [ { \"identifier\": \"22483f42-95bf-984a-98a5-ee9485c85c3e\", // uuid from template \"path\" : \"code.c\" // filename on backend \"parts\" : // must: at least one array element [ { \"identifier\": \"preamble\", // identifier from template \"access\" : \"visible\", // access from template \"content\" : \"I2luY2x1ZGUgPHN0ZGlvLmg-Cg\" // source (base64url encoded) // decoded: #include <stdio.h>\\n }, { \"identifier\": \"codeFromStudent\", // identifier from template \"access\" : \"modifiable\", \"content\" : \"dm9pZCBiYXIoKSB7IHByaW50ZigiYmFyIQoiKTsKfQo\" // content from task // decoded: void bar() { printf(\\\"bar!\\\\n\\\");\\n}\\n }, { \"identifier\": \"postscript\", // identifier from template \"access\" : \"visible\", \"content\" : \"aW50IG1haW4oKSB7IGJhcigpOyByZXR1cm4gMDsgfQ\" // source // decoded: int main() { bar(); return 0; } } ] // parts[] } ], // files[] \"configuration\" : { \"compiling.compiler\" : \"gcc\", \"compiling.flags\" : \"-O2 -Wall\" \"checking.sources\" : [\"codeFromStudent\"], // identifier to parts \"checking.forbiddenCalls\": \"system execve\" // forbidden call names separated by WS \"linking.flags\" : \"-lm\" \"running.commandLineArguments\" : \"--stepwidth 0.5\" // mustache template with injected arguments } }","title":"Example (informal)"},{"location":"viplab3.0/computation/#explaining-the-json-format","text":"Key [--Subkey] Type (a default is marked by italics ) Opt / Must Description Comment identifier string (UUID) must the identifier of this computation is generated by the websocket api environment one of {\"C\", \"C++\", \"Java\", \"Matlab\", \"Octave\", \"Container\", \"DuMuX\"} must Specifies the environment used for the Computation. It defines language, runtime, libraries and tools files [ {...}, {...}, ... ] must array containing File objects : there has to be at least one element configuration struct opt/must (depends on environment) Environment specific configurations Different phases can be configured like compiling, checking (for legal function calls in source code), ... configuration --compiling.sources [FILE_ID, FILE_ID, ...] must Array of identifiers of JSON File objects . Explicit compilation (only referenced sources will be compiled). for C, C++, Java configuration --compiling.compiler string must compiler to be used, e.g. \"gcc\" for C, C++ configuration --compiling.flags string must for C, C++ ; optional for Java CFLAGS for C/C++ ; compile flags for Java e.g. \"gcc\" for C/C++ ; \"-O2\" or \"\" for Java configuration --checking.sources [PART_ID, PART_ID, ...] must if checking should be performed array of identifiers of to be checked sources; given by parts[]{PART_ID} (see below ) for Matlab, Octave, C, Java configuration --checking.allowedCalls string must if checking should be performed for Matlab/Octave : allowed call names separated by WS; only idents (no braces, no func args) for Java : allowed call name expressions separated by WS for Java semantics see Java checking semantics . configuration --checking.forbiddenCalls string must if checking should be performed for C : forbidden call names separated by WS; only idents (no braces, no func args) for Java : forbidden call name expressions separated by WS for C semantics see C checking semantics ); for Java semantics see Java checking semantics . configuration --linking.flags string must LFLAGS for C, C++ ; e.g. \"\" configuration --running.stdinFilename FILE_ID must the file identifier that is passed to Matlab/Octave via standard-in configuration --running.timelimitInSeconds int opt CPU time limit for all environments ; for semantics see Notes to \"timelimitInSeconds\" . configuration --running.commandLineArguments string opt for C, C++, Java : arguments given to main() function; for DuMuX, Container : additional command line args configuration --running.flags string opt flags given to JVM for Java configuration --running.mainClass string opt (if unique) / must (if not unique) class containing \"public static void main(String[] args) {\" for Java : \"args\" may be another name. If main function is unique, its correct class should be detected automatically. configuration --running.executable string must name of executable to run (as in backend file system) for DuMuX configuration --running.entrypoint string must executable to run inside the container for Container configuration --running.observe_stderr bool ( false ) opt if true, transfer intermediate stderr Results for DuMuX, Container configuration --resources.image url must location of the image to be executed for Container ; has to be a tar configuration --resources.volume string must path in the container where data is placed for Container configuration --resources.memory string opt ( 64mb ) memory limit for the container for Container configuration --resources.numCPUs int opt number of CPUs for the container for Container","title":"Explaining the JSON Format"},{"location":"viplab3.0/computation/#json-objects-in-files","text":"An object in array files[] has the following members: Key Type (an enum default is marked by italics ) Opt / Must Description Comment identifier string (UUID) must reference to a computation template file path string must absolute path to file It is not allowed to start with '/' parts [{...}, {...}, ...] must array containing part objects . There has to be at least one.","title":"JSON objects in files"},{"location":"viplab3.0/computation/#json-objects-in-parts","text":"An object in array parts[] has the following members: Key Type (an enum default is marked by italics ) Opt / Must Description Comment identifier string must reference to a computation template part access one of {\"invisible\", \"visible\", \"modifiable\", \"template\"} must the access level of this part equals to the access level of this part in the computation template content string must base64url-encoded source code","title":"JSON objects in parts"},{"location":"viplab3.0/computation_result/","text":"Computation Result JSON Message A computation result is the result of a computation . It always contains the stdout and stderr of of the computation. In addition, it may containIt contains arbitrary information contained in one or more artifacts. Artifacts are information about the success or failure (showing details for students) and result objects, like files, images, links, etc. Example (informal) { \"identifier\" : \"86165eea-14df-4a76-805a-09b21441cbf7\", \"version\" : \"3.0.0\" \"computation\" : \"4598393-95bf-409a-98a5-ee375982c3e\", // uuid of corresponding computation \"status\" : \"final\", // final and intermediate, \"timestamp\" : // creation time of this message in ISO-8601 \"output\" : { \"stdout\" : \"\", // base64url encoded content, mandatory, even if empty \"stderr\" : \"\", // base64url encoded content, mandatory, even if empty }, \"artifacts\" : [ // additional artifacts (files, notifications, etc) { \"type\": \"notifications\", // each artifact requires a type and \"identifier\" : \"1dd479d9-c9bd-4711-aed8-5bfb3ec5fcfa\", // and an identifier \"summary\" : \"(C chain)v1.9 failed.\", \"elements\" : [ { \"severity\" : \"info\", \"type\" : \"compiler\", \"message\" : \"source_0.c: In function \\u2018trapez\\u2019:\", \"output\" : { \"source\" : \"stderr\", \"extract\" : \"source_0.c: In function \\u2018trapez\\u2019:\", \"begin\" : 0, \"end\" : 37 } }, { \"severity\" : \"warning\", \"type\" : \"compiler\", \"message\" : \"source_0.c:21:10: warning: unused variable \\u2018x\\u2019 [-Wunused-variable]\", \"origin\" : { \"source\" : \"parts://7a1808d0-c997-4e28-acdf-bfda3ce70960\", //code the student can edit \"extract\" : \" double x = 0;\", \"begin\" : 406, \"end\" : 421, \"line\" : 15, \"col\" : 10 }, \"output\" : { \"source\" : \"stderr\", \"extract\" : \"source_0.c:21:10: warning: unused variable \\u2018x\\u2019 [-Wunused-variable]\", \"begin\" : 38, \"end\" : 108 } }, { \"severity\" : \"error\", \"type\" : \"callcheck\", \"message\" : \"[C function filtering] Function call not allowed:\\n\\\"system\\\"; original source: codeFromStudent, line (corrected): 20, col: 3\\nForbidden calls:\\nsystem.\\n\", \"origin\" : { \"elementID\" : \"parts://7a1808d0-c997-4e28-acdf-bfda3ce70960\", \"extract\" : \" system(\\\"/bin/rm /tmp/foo.txt\\\"); // illegal call (should be catched by checker)\", \"begin\" : 325, \"end\" : 405, \"line\" : 14, \"col\" : 3 } } ] }, { \"type\" : \"file\", \"identifier\" : \"de762095-6cd2-439f-80eb-313e85d33869\", \"MIMEtype\": \"image/png\", \"path\" : \"/images/img.png\", \"content\": \"\" // base64url encoded content }, { \"type\" : \"file\", \"identifier\" : \"10516761-d937-4ba4-a82f-dc2847d45032\", \"MIMEtype\": \"image/png\", \"path\" : \"/images/img2.png\", \"content\": \"\" // base64url encoded content }, { \"type\" : \"s3file\", \"identifier\" : \"cc3c1cf9-c02d-4694-902c-93c298d68c51\", \"MIMEtype\": \"application/gzip\", \"path\" : \"/largefile/result.tar.gz\", \"url\": \"https://s3.temporary.file.url/result.tar.gz\", \"size\" : 123456789, \"hash\" : \"sha512:hashcode_of_file\" } ] } Result Artifacts Each computation ends with a ComputationResult containing at least the output generated on stdout and stderr. All additional information about an executed computation like created files is contained inside an arbitrary number of artifacts. Each artifact containes at least an identifier and a type describing the content. The main purposes of this concept is to allow a standard way how to extend what information can be created and returned during a computation. artifact types In addition to the two mandatory fields for each artifact, each artifact has a specific set of additional fields. Currently, the following list of artifact types are defined with a given set fields: file s3file notifications Specification of the JSON formats ComputationResult JSON object Key Value Type Opt / Must Description Comment identifier string (uuid) must unique ComputationResult ID version string must version of the json specification used. The major version must match the version of the ComputationTask computation string (uuid) must identifier of the computation that is responsible for this result status One of {\"final\", \"intermediate\"} must \"final\": last Result of computation \"intermediate\": more Results expected If there is only one Result, it status should be \"final\". If there are multiple Results, status of all before \"final\" should be \"intermediate\". timestamp ISO-8601 datetimeString must Timestamp when this result is generated. Need for ordering of intermediate result output output json object must an object containing stdout and stderr artifacts array of artifact objects opt array of objects containing artifacts described at Artifacts output JSON object format Key Value Type Opt / Must Description Comment stdout string must the stdout of the exection, base64url encode must be provided even if empty stderr string must the stderr of the exection, base64url encode must be provided even if empty artifact JSON objects The base artifact object that needs to be extended all other artifacts defined. artifact JSON object Key Value Type Opt / Must Description Comment identifier string (uuid) must unique id for this artifact type string must the type of this artifact The type may be used by the client to determine how to display the artifact file artifact JSON object Key Value Type Opt / Must Description Comment path string must the path in which the content had been created during the computation MIMEtype string must MIMEtype of the content content string must base64url encoded content of the file In Viplab 2.0, the following MIMEtypes where allowed. They contain some custom defined types, which need to be keep supported: text/plain text/html text/uri-list\": links to websides to be presented in SC image/png\" application/x-vgf: generated graphics output in 'ViP graphics format' application/x-vgf3: generated graphics output in 'ViP graphics format 3D' application/x-vgfc: generated graphics output in 'ViP graphics format contour plot'.| s3file artifact JSON object Key Value Type Opt / Must Description Comment path string must the path in which the content had been created during the computation MIMEtype string must MIMEtype of the content url string must url on which the content of the file can be retrieved size int must size in bytes of the file stored on the external system hash string must the hash of the remote file in the format usedhash:hashcode_of_file, e.g. sha512:a12355.... notifications artifact JSON object Each notifications artifact contains at least one summary and unlimited number of notification elemets providing more details Key Value Type Opt / Must Description Comment summary string must summary of all info_element's: e.g. one warning, one error may have a summary \"An error occured.\" E.g.: \"[Error] Backend has detected an error: no result!\" or \"Success!\" notifications array of notification objects opt the more detailed notification objects for this notifications object notification JSON object Key Value Type Opt / Must Description Comment severity string must One of {\"error\", \"warning\", \"info\"} type string must One of {\"system\", \"chain\", \"output\", \"callcheck\", \"interpreter\", \"compiler\", \"linker\", \"executable\"} For all chains: {\"system, \"chain\", \"output\"}; for Octave/Matlab: {\"callcheck\", \"interpreter\"}; for C: {\"callcheck\", \"compiler\", \"linker\", \"executable\"}; for Java: {\"callcheck\", \"compiler\", \"executable\"}; for DuMuX: {\"executable\"} If type equals \"system\", whole Result if of interest for a bug report. message string must summary of one message to the user; it should not contain wrong error locations (file, line, col). Together with \"source\"/\"line\" or \"col\" (containing corrected locations) it should give the most interesting info. may be empty string (',' in optional location_part) origin notification origin json object opt If the message can be linked to a part from the ComputationTask, the original position can be found inside only allowed if \"type\" in {\"compiler\", \"interpreter\", \"callcheck\"} output notification output json object opt The position and text from either stdout or stderr (see Output ) which caused notification. Notes: There are error messages containing multiple error triggering locations. This leads to multiple info_elements containing same \"message\" and \"output\", but different \"source\" objects. Note: another way would be to specify \"sources\":[{},...] as alternative to \"source\":{}. \"type\": \"fatal\" may be introduced later Compiler output may contain multiple error positions; only the first one should be extracted. notification origin JSON object Key Value Type Opt / Must Description Comment source string must identifier of part from ComputationTask which has triggered (error/warning/...) message extract string must Part of referenced part. Extracted from message triggering input. begin unsigned int must Offset of extract into ... end unsigned int must ... referenced part: C-like (zero-based). line 1..uint_max must Location of error/warning ... col 1..uint_max opt ... referring to position in triggering part. It is optional, since there are messages containing line info only notification output JSON object Key Value Type Opt / Must Description Comment source string must part of Output , which contained the message extract string must Part of referenced output. Extracted from message triggering input. begin unsigned int must Offset of extract into ... end unsigned int must ... referenced element: C-like (zero-based). Leftovers from Viplab 2.0 might be converted later, just keep around as inspration Key Value Type Opt / Must Description Comment startTime datetimeString must May be local or universal time. Just after getting a Solution. duration durationString must e.g. \"128ms\" Computation duration time since startTime (increases with each intermediate Result). finishTime datetimeString must, iff status == \"final\" May be local or universal time. Just before posting final Result. CC_versionLong string must CC_version string must chain_version string must technicalInfo struct must technicalInfo/host string must CC host technicalInfo/PID unsigned must CC PID technicalInfo/<key> <val_type> opt <key>: locally unique, <val_type>: arbitrary type For allowing further key/val pairs if there should be a need.","title":"Computation Result JSON Message"},{"location":"viplab3.0/computation_result/#computation-result-json-message","text":"A computation result is the result of a computation . It always contains the stdout and stderr of of the computation. In addition, it may containIt contains arbitrary information contained in one or more artifacts. Artifacts are information about the success or failure (showing details for students) and result objects, like files, images, links, etc.","title":"Computation Result JSON Message"},{"location":"viplab3.0/computation_result/#example-informal","text":"{ \"identifier\" : \"86165eea-14df-4a76-805a-09b21441cbf7\", \"version\" : \"3.0.0\" \"computation\" : \"4598393-95bf-409a-98a5-ee375982c3e\", // uuid of corresponding computation \"status\" : \"final\", // final and intermediate, \"timestamp\" : // creation time of this message in ISO-8601 \"output\" : { \"stdout\" : \"\", // base64url encoded content, mandatory, even if empty \"stderr\" : \"\", // base64url encoded content, mandatory, even if empty }, \"artifacts\" : [ // additional artifacts (files, notifications, etc) { \"type\": \"notifications\", // each artifact requires a type and \"identifier\" : \"1dd479d9-c9bd-4711-aed8-5bfb3ec5fcfa\", // and an identifier \"summary\" : \"(C chain)v1.9 failed.\", \"elements\" : [ { \"severity\" : \"info\", \"type\" : \"compiler\", \"message\" : \"source_0.c: In function \\u2018trapez\\u2019:\", \"output\" : { \"source\" : \"stderr\", \"extract\" : \"source_0.c: In function \\u2018trapez\\u2019:\", \"begin\" : 0, \"end\" : 37 } }, { \"severity\" : \"warning\", \"type\" : \"compiler\", \"message\" : \"source_0.c:21:10: warning: unused variable \\u2018x\\u2019 [-Wunused-variable]\", \"origin\" : { \"source\" : \"parts://7a1808d0-c997-4e28-acdf-bfda3ce70960\", //code the student can edit \"extract\" : \" double x = 0;\", \"begin\" : 406, \"end\" : 421, \"line\" : 15, \"col\" : 10 }, \"output\" : { \"source\" : \"stderr\", \"extract\" : \"source_0.c:21:10: warning: unused variable \\u2018x\\u2019 [-Wunused-variable]\", \"begin\" : 38, \"end\" : 108 } }, { \"severity\" : \"error\", \"type\" : \"callcheck\", \"message\" : \"[C function filtering] Function call not allowed:\\n\\\"system\\\"; original source: codeFromStudent, line (corrected): 20, col: 3\\nForbidden calls:\\nsystem.\\n\", \"origin\" : { \"elementID\" : \"parts://7a1808d0-c997-4e28-acdf-bfda3ce70960\", \"extract\" : \" system(\\\"/bin/rm /tmp/foo.txt\\\"); // illegal call (should be catched by checker)\", \"begin\" : 325, \"end\" : 405, \"line\" : 14, \"col\" : 3 } } ] }, { \"type\" : \"file\", \"identifier\" : \"de762095-6cd2-439f-80eb-313e85d33869\", \"MIMEtype\": \"image/png\", \"path\" : \"/images/img.png\", \"content\": \"\" // base64url encoded content }, { \"type\" : \"file\", \"identifier\" : \"10516761-d937-4ba4-a82f-dc2847d45032\", \"MIMEtype\": \"image/png\", \"path\" : \"/images/img2.png\", \"content\": \"\" // base64url encoded content }, { \"type\" : \"s3file\", \"identifier\" : \"cc3c1cf9-c02d-4694-902c-93c298d68c51\", \"MIMEtype\": \"application/gzip\", \"path\" : \"/largefile/result.tar.gz\", \"url\": \"https://s3.temporary.file.url/result.tar.gz\", \"size\" : 123456789, \"hash\" : \"sha512:hashcode_of_file\" } ] }","title":"Example (informal)"},{"location":"viplab3.0/computation_result/#result-artifacts","text":"Each computation ends with a ComputationResult containing at least the output generated on stdout and stderr. All additional information about an executed computation like created files is contained inside an arbitrary number of artifacts. Each artifact containes at least an identifier and a type describing the content. The main purposes of this concept is to allow a standard way how to extend what information can be created and returned during a computation.","title":"Result Artifacts"},{"location":"viplab3.0/computation_result/#artifact-types","text":"In addition to the two mandatory fields for each artifact, each artifact has a specific set of additional fields. Currently, the following list of artifact types are defined with a given set fields: file s3file notifications","title":"artifact types"},{"location":"viplab3.0/computation_result/#specification-of-the-json-formats","text":"","title":"Specification of the JSON formats"},{"location":"viplab3.0/computation_result/#computationresult-json-object","text":"Key Value Type Opt / Must Description Comment identifier string (uuid) must unique ComputationResult ID version string must version of the json specification used. The major version must match the version of the ComputationTask computation string (uuid) must identifier of the computation that is responsible for this result status One of {\"final\", \"intermediate\"} must \"final\": last Result of computation \"intermediate\": more Results expected If there is only one Result, it status should be \"final\". If there are multiple Results, status of all before \"final\" should be \"intermediate\". timestamp ISO-8601 datetimeString must Timestamp when this result is generated. Need for ordering of intermediate result output output json object must an object containing stdout and stderr artifacts array of artifact objects opt array of objects containing artifacts described at Artifacts","title":"ComputationResult JSON object"},{"location":"viplab3.0/computation_result/#output-json-object-format","text":"Key Value Type Opt / Must Description Comment stdout string must the stdout of the exection, base64url encode must be provided even if empty stderr string must the stderr of the exection, base64url encode must be provided even if empty","title":"output JSON object format"},{"location":"viplab3.0/computation_result/#artifact-json-objects","text":"The base artifact object that needs to be extended all other artifacts defined.","title":"artifact JSON objects"},{"location":"viplab3.0/computation_result/#artifact-json-object","text":"Key Value Type Opt / Must Description Comment identifier string (uuid) must unique id for this artifact type string must the type of this artifact The type may be used by the client to determine how to display the artifact","title":"artifact JSON object"},{"location":"viplab3.0/computation_result/#file-artifact-json-object","text":"Key Value Type Opt / Must Description Comment path string must the path in which the content had been created during the computation MIMEtype string must MIMEtype of the content content string must base64url encoded content of the file In Viplab 2.0, the following MIMEtypes where allowed. They contain some custom defined types, which need to be keep supported: text/plain text/html text/uri-list\": links to websides to be presented in SC image/png\" application/x-vgf: generated graphics output in 'ViP graphics format' application/x-vgf3: generated graphics output in 'ViP graphics format 3D' application/x-vgfc: generated graphics output in 'ViP graphics format contour plot'.|","title":"file artifact JSON object"},{"location":"viplab3.0/computation_result/#s3file-artifact-json-object","text":"Key Value Type Opt / Must Description Comment path string must the path in which the content had been created during the computation MIMEtype string must MIMEtype of the content url string must url on which the content of the file can be retrieved size int must size in bytes of the file stored on the external system hash string must the hash of the remote file in the format usedhash:hashcode_of_file, e.g. sha512:a12355....","title":"s3file artifact JSON object"},{"location":"viplab3.0/computation_result/#notifications-artifact-json-object","text":"Each notifications artifact contains at least one summary and unlimited number of notification elemets providing more details Key Value Type Opt / Must Description Comment summary string must summary of all info_element's: e.g. one warning, one error may have a summary \"An error occured.\" E.g.: \"[Error] Backend has detected an error: no result!\" or \"Success!\" notifications array of notification objects opt the more detailed notification objects for this notifications object","title":"notifications artifact JSON object"},{"location":"viplab3.0/computation_result/#notification-json-object","text":"Key Value Type Opt / Must Description Comment severity string must One of {\"error\", \"warning\", \"info\"} type string must One of {\"system\", \"chain\", \"output\", \"callcheck\", \"interpreter\", \"compiler\", \"linker\", \"executable\"} For all chains: {\"system, \"chain\", \"output\"}; for Octave/Matlab: {\"callcheck\", \"interpreter\"}; for C: {\"callcheck\", \"compiler\", \"linker\", \"executable\"}; for Java: {\"callcheck\", \"compiler\", \"executable\"}; for DuMuX: {\"executable\"} If type equals \"system\", whole Result if of interest for a bug report. message string must summary of one message to the user; it should not contain wrong error locations (file, line, col). Together with \"source\"/\"line\" or \"col\" (containing corrected locations) it should give the most interesting info. may be empty string (',' in optional location_part) origin notification origin json object opt If the message can be linked to a part from the ComputationTask, the original position can be found inside only allowed if \"type\" in {\"compiler\", \"interpreter\", \"callcheck\"} output notification output json object opt The position and text from either stdout or stderr (see Output ) which caused notification. Notes: There are error messages containing multiple error triggering locations. This leads to multiple info_elements containing same \"message\" and \"output\", but different \"source\" objects. Note: another way would be to specify \"sources\":[{},...] as alternative to \"source\":{}. \"type\": \"fatal\" may be introduced later Compiler output may contain multiple error positions; only the first one should be extracted.","title":"notification JSON object"},{"location":"viplab3.0/computation_result/#notification-origin-json-object","text":"Key Value Type Opt / Must Description Comment source string must identifier of part from ComputationTask which has triggered (error/warning/...) message extract string must Part of referenced part. Extracted from message triggering input. begin unsigned int must Offset of extract into ... end unsigned int must ... referenced part: C-like (zero-based). line 1..uint_max must Location of error/warning ... col 1..uint_max opt ... referring to position in triggering part. It is optional, since there are messages containing line info only","title":"notification origin JSON object"},{"location":"viplab3.0/computation_result/#notification-output-json-object","text":"Key Value Type Opt / Must Description Comment source string must part of Output , which contained the message extract string must Part of referenced output. Extracted from message triggering input. begin unsigned int must Offset of extract into ... end unsigned int must ... referenced element: C-like (zero-based).","title":"notification output JSON object"},{"location":"viplab3.0/computation_result/#leftovers-from-viplab-20","text":"might be converted later, just keep around as inspration Key Value Type Opt / Must Description Comment startTime datetimeString must May be local or universal time. Just after getting a Solution. duration durationString must e.g. \"128ms\" Computation duration time since startTime (increases with each intermediate Result). finishTime datetimeString must, iff status == \"final\" May be local or universal time. Just before posting final Result. CC_versionLong string must CC_version string must chain_version string must technicalInfo struct must technicalInfo/host string must CC host technicalInfo/PID unsigned must CC PID technicalInfo/<key> <val_type> opt <key>: locally unique, <val_type>: arbitrary type For allowing further key/val pairs if there should be a need.","title":"Leftovers from Viplab 2.0"},{"location":"viplab3.0/computation_task/","text":"Computation Task JSON Message A computation task is the result of a possibly manipulated computation template . It contains the changes made on the template. Together with the template, a computation task forms a computation that is sent to the backend. In the context of a learning environment, a computation task can be seen as a Solution . Example (informal) { \"template\" : \"11483f23-95bf-424a-98a5-ee5868c85c3e\", // uuid of corresponding computation template \"arguments\" : { \"__STEPWIDTH__\" : \"0.5\" // parameter values from template, filled out by frontend }, \"metadata\" : { \"comment\" : \"Die war aber schwer!\", }, \"parts\" : [ { \"identifier\": \"codeFromStudent\", // must: identifier of template part that has changed \"content\" : \"dm9pZCBiYXIoKSB7IHByaW50ZigiYmFyIQoiKTsKfQo\" // changed source from user // decoded: void bar() { printf(\\\"bar!\\\\n\\\");\\n}\\n // other fields defining this (text) element must *not* be repeated here. } // unchanged elements needn't be repeated here ] } Explaining the JSON Format Key [--Subkey] Type Opt / Must Description Comment AS template string (UUID) must computation template identifier arguments {PARAM_ID: value, ..., PARAM_ID: value} opt arguments of, e.g., configuration.commandLineArguments extracted by the frontend see computation template metadata struct opt contains information for frontend metadata --comment string opt comment from user implemented in frontend? parts [{...}, {...}, ...] opt array containing modified part objects . Only identifier - and content -attributes are allowed. Only \"modifiable\" or \"template\" parts can be referenced here (see access -attribute). The frontend creates the content for \"template\" parts. See notes . Notes for template parts The frontend will encode parts with access -value \"template\" as JSON messages with the following structure: { \"PARAM_ID1\" : \"value\", \"PARAM_ID2\" : \"value_2\", ... \"PARAM_IDn\" : \"value_n\" } PARAM_ID is the reference (key) to a parameter name inside the mustache template. \"value\" is the selected value of the user in the frontend. Evaluation Task The feature of ViPLab to automatically evaluate student code (correction service) is still possible in ViPLab 3.0. The code needed for evaluation is send to the correction server as a JSON message with the same structure as a Computation Task . The only difference is, that here all parts can be replaced, regardless of there access -settings.","title":"Computation Task JSON Message"},{"location":"viplab3.0/computation_task/#computation-task-json-message","text":"A computation task is the result of a possibly manipulated computation template . It contains the changes made on the template. Together with the template, a computation task forms a computation that is sent to the backend. In the context of a learning environment, a computation task can be seen as a Solution .","title":"Computation Task JSON Message"},{"location":"viplab3.0/computation_task/#example-informal","text":"{ \"template\" : \"11483f23-95bf-424a-98a5-ee5868c85c3e\", // uuid of corresponding computation template \"arguments\" : { \"__STEPWIDTH__\" : \"0.5\" // parameter values from template, filled out by frontend }, \"metadata\" : { \"comment\" : \"Die war aber schwer!\", }, \"parts\" : [ { \"identifier\": \"codeFromStudent\", // must: identifier of template part that has changed \"content\" : \"dm9pZCBiYXIoKSB7IHByaW50ZigiYmFyIQoiKTsKfQo\" // changed source from user // decoded: void bar() { printf(\\\"bar!\\\\n\\\");\\n}\\n // other fields defining this (text) element must *not* be repeated here. } // unchanged elements needn't be repeated here ] }","title":"Example (informal)"},{"location":"viplab3.0/computation_task/#explaining-the-json-format","text":"Key [--Subkey] Type Opt / Must Description Comment AS template string (UUID) must computation template identifier arguments {PARAM_ID: value, ..., PARAM_ID: value} opt arguments of, e.g., configuration.commandLineArguments extracted by the frontend see computation template metadata struct opt contains information for frontend metadata --comment string opt comment from user implemented in frontend? parts [{...}, {...}, ...] opt array containing modified part objects . Only identifier - and content -attributes are allowed. Only \"modifiable\" or \"template\" parts can be referenced here (see access -attribute). The frontend creates the content for \"template\" parts. See notes .","title":"Explaining the JSON Format"},{"location":"viplab3.0/computation_task/#notes-for-template-parts","text":"The frontend will encode parts with access -value \"template\" as JSON messages with the following structure: { \"PARAM_ID1\" : \"value\", \"PARAM_ID2\" : \"value_2\", ... \"PARAM_IDn\" : \"value_n\" } PARAM_ID is the reference (key) to a parameter name inside the mustache template. \"value\" is the selected value of the user in the frontend.","title":"Notes for template parts"},{"location":"viplab3.0/computation_task/#evaluation-task","text":"The feature of ViPLab to automatically evaluate student code (correction service) is still possible in ViPLab 3.0. The code needed for evaluation is send to the correction server as a JSON message with the same structure as a Computation Task . The only difference is, that here all parts can be replaced, regardless of there access -settings.","title":"Evaluation Task"},{"location":"viplab3.0/computation_template/","text":"Computation Template JSON Message A computation template can be the definition of an Exercise in the context of a learning environment, or a pre-configured research software (stored in a docker image), used to show reproducability of a research work or to reduce complex software environments to specific functionality Examples (informal) Note: // with text following until EOL is a comment, which is not covered by the JSON spec, and should not be contained in message sends in real; but nevertheless it would help, if JSON parsers could just ignore them. C Student Example { \"identifier\" : \"11483f23-95bf-424a-98a5-ee5868c85c3e\", // uuid, created by a frontend launcher \"version\" : \"3.0.0\" // version of this JSON-spec definition \"metadata\": // information for frontend { \"displayName\" : \"Aufgabe 1\", // name of computation template shown in frontend \"description\" : \"Schreiben Sie eine C-Funktion...\", // short description (could be used // as subtitle, further descriptions in \"parts\"). }, \"environment\" : \"C\", // important for interpreting configuration \"files\" : // must: at least one array element [ { \"identifier\": \"22483f42-95bf-984a-98a5-ee9485c85c3e\", // uuid, for referencing \"path\" : \"code.c\" // filename on backend \"metadata\" : // information for frontend { \"syntaxHighlighting\": \"C\", // optional (default: \"none\") }, \"parts\" : // must: at least one array element [ { \"identifier\": \"preamble\", \"access\" : \"visible\", // it is rendered, but can not be changed \"metadata\" : // what has to be moved to files ? { \"name\" : \"Info: source before your code.\", // name of element in frontend \"emphasis\" : \"low\" // optional (for rendering) }, \"content\" : \"I2luY2x1ZGUgPHN0ZGlvLmg-Cg\" // source (base64url encoded) // decoded: #include <stdio.h>\\n }, { \"identifier\": \"codeFromStudent\", \"access\" : \"modifiable\", // it can be edited in the frontend \"metadata\" : { \"name\" : \"Fill in your code!\", \"emphasis\" : \"medium\" }, \"content\" : \"dm9pZCBiYXIoKSB7IC8qIFNjaHJlaWJlbiBTaWUgaGllciBDb2RlLCBkZXIgImJhciIgYXVzZ2lidC4gKi8KCn0K\" // source (template) // decoded: void bar() { /* Schreiben Sie hier Code, der \"bar\" ausgibt. */\\n\\n}\\n }, { \"identifier\": \"postscript\", \"access\" : \"visible\", \"metadata\" : { \"name\" : \"Info: source after your code calling bar() in it.\", \"emphasis\" : \"low\", }, \"content\" : \"aW50IG1haW4oKSB7IGJhcigpOyByZXR1cm4gMDsgfQ\" // source // decoded: int main() { bar(); return 0; } } ] // parts[] } ], // files[] \"parameters\" : // parameters can be used to supply values at runtime to the configuration [ { \"mode\" : \"any\", // depending on guiType either any or fixed \"identifier\" : \"__STEPWIDTH__\", \"metadata\" : { \"guiType\" : \"input_field\", \"type\": \"number\", \"name\": \"stepwidth\" }, \"default\": [0.001], //default \"min\": 0, \"max\": 1, \"step\": 0.001, \"validation\" : \"range\" // one of [range, pattern (regex), anyof/oneof] } ], \"configuration\" : { \"compiling.compiler\" : \"gcc\", // string \"compiling.flags\" : \"-O2 -Wall\" // string \"checking.sources\" : [\"codeFromStudent\"], // identifier to parts \"checking.forbiddenCalls\": \"system execve\", // forbidden call names separated by WS \"linking.flags\" : \"-lm\", // string \"running.commandLineArguments\" : \"--stepwidth {{ __STEPWIDTH__ }}\" // mustache template if parameters are used } } Parameters Example { \"identifier\" : \"11483f23-95bf-424a-98a5-ee5868c85c3f\", // uuid, created by a frontend launcher \"version\" : \"3.0.0\" // version of this JSON-spec definition \"metadata\": // information for frontend { \"displayName\" : \"Parameters Example\", // name of computation template shown in frontend \"description\" : \"This is an example\", // short description (could be used // as subtitle, further descriptions in \"parts\"). }, \"environment\" : \"C\", // important for interpreting configuration \"files\" : // must: at least one array element [ { \"identifier\": \"22483f42-95bf-984a-98a5-ee9485c85c3f\", // uuid, for referencing \"path\" : \"params.input\" // filename on backend \"metadata\" : // information for frontend { \"syntaxHighlighting\": \"ini\", // optional (default: \"none\") }, \"parts\" : // must: at least one array element [ { \"identifier\": \"part-contains-slider\", \"access\": \"template\", \"metadata\": { \"name\": \"Parameter in part\", \"emphasis\": \"low\" }, \"parameters\" : [ { \"mode\" : \"any\", \"identifier\" : \"__sliderSingle__\", \"metadata\" : { \"guiType\" : \"slider\", \"name\": \"temperature\", \"vertical\": false }, \"default\": [ 10 ], \"min\": 0, \"max\": 500, \"step\": 10, \"validation\": \"range\" } ], \"content\": \"VGhpcyBpcyBhIFRleHQ6Ont7X19zbGlkZXJTaW5nbGVfX319OjpUaGlzIGlzIGEgVGV4dA==\" }, { \"identifier\": \"ceb051d8-b50c-4814-983a-b9d703cae0c6\", \"access\" : \"template\", \"metadata\" : { \"name\" : \"params.input file\" }, \"parameters\": [ { \"mode\" : \"fixed\", \"identifier\" : \"__checkbox__\", \"metadata\" : { \"guiType\": \"checkbox\", \"name\": \"options\" }, \"options\": [ { \"value\" : \"verbose\", \"selected\" : true }, { \"value\" : \"debug\" }, { \"value\" : \"make_plot\" } ], \"validation\": \"anyof\" }, { \"mode\" : \"fixed\", \"identifier\" : \"__radioButton__\", \"metadata\" : { \"guiType\": \"radio\", \"name\": \"backend\" }, \"options\": [ { \"value\" : \"debug\" }, { \"value\" : \"serial\", \"selected\" : true }, { \"value\" : \"hpc\", \"disabled\" : true }, { \"value\" : \"test\" } ], \"validation\": \"oneof\" }, { \"mode\" : \"fixed\", \"identifier\" : \"__dropdownSingle__\", \"metadata\" : { \"guiType\": \"dropdown\", \"name\": \"model\" }, \"options\": [ { \"value\" : \"Please choose one\", \"disabled\" : true }, { \"value\" : \"1p\", \"selected\" : true }, { \"value\" : \"1pnc\" }, { \"value\" : \"1pncmin\" }, { \"value\" : \"2p\" }, { \"value\" : \"2p1c\" } ], \"validation\": \"oneof\" }, { \"mode\" : \"fixed\", \"identifier\" : \"__dropdownMultiple__\", \"metadata\" : { \"guiType\": \"dropdown\", \"name\": \"model\" }, \"options\": [ { \"value\" : \"Please choose multiple\", \"disabled\" : true }, { \"value\" : \"1p\", \"selected\" : true }, { \"value\" : \"1pnc\" }, { \"value\" : \"1pncmin\" }, { \"value\" : \"2p\", \"selected\" : true }, { \"value\" : \"2p1c\", \"disabled\" : true } ], \"validation\": \"anyof\" }, { \"mode\" : \"fixed\", \"identifier\" : \"__toggle__\", \"metadata\" : { \"guiType\": \"toggle\", \"name\": \"options\" }, \"options\": [ { \"value\" : \"verbose\", \"selected\" : true }, { \"value\" : \"debug\" }, { \"value\" : \"make_plot\" } ], \"validation\": \"anyof\" }, { \"mode\" : \"any\", \"identifier\" : \"__sliderMultiple__\", \"metadata\" : { \"guiType\" : \"slider\", \"name\": \"temperature\", \"vertical\": true }, \"default\": [ 25, 50, 75 ], \"min\": 0, \"max\": 100, \"step\": 5, \"validation\": \"range\" }, { \"mode\" : \"any\", \"identifier\" : \"__inputTextWOMaxlangth__\", \"metadata\" : { \"guiType\" : \"input_field\", \"type\": \"text\", \"name\": \"file_name\" }, \"default\" : [\"\"], \"validation\": \"pattern\" }, { \"mode\" : \"any\", \"identifier\" : \"__inputTextWMaxlength__\", \"metadata\" : { \"guiType\" : \"input_field\", \"type\": \"text\", \"name\": \"file_name\" }, \"maxlength\": 200, \"default\" : [\"\"], \"validation\": \"pattern\" }, { \"mode\" : \"any\", \"identifier\" : \"__inputNumber__\", \"metadata\" : { \"guiType\" : \"input_field\", \"type\": \"number\", \"name\": \"time_delay\" }, \"default\": [10], \"min\": 0, \"max\": 500, \"step\": 0.1, \"validation\": \"range\" }, { \"mode\" : \"any\", \"identifier\" : \"__default__\", \"metadata\" : { \"guiType\" : \"editor\", \"name\": \"code 1\" }, \"default\": [\"I2luY2x1ZGUgPHN0ZGlvLmg-Cg\"], \"validation\": \"pattern\" }, ], \"content\" : \"\" } ] // parts[] } ], // files[] \"configuration\" : { \"resources.image\" : \"name://git.iws.uni-stuttgart.de:4567/dumux-repositories/dumux-docker/viplab/test\", \"resources.volume\" : \"/data/shared\", \"resources.memory\" : \"1g\", \"resources.numCPUs\" : 1, \"running.entrypoint\" : \"/data/bin/run.sh\", \"running.commandLineArguments\" : \"params.input\" } } Explaining the JSON Format version 3.0.0 Key [--Subkey] Type (a default is marked by italics ) Opt / Must Description Comment AS identifier string (UUID) must the identifier of this computation template can be generated by the frontend launcher version string opt version of the json specification should be given for backwards compatibility metadata struct opt contains information for frontend metadata --displayName string opt name of computation template shown in frontend Makes 'opt' sense for frontend? metadata --description string (plain text) opt short description Mostly a few lines. A longer description in different formats can be put in \"elements\" (see below). There is nothing 'below'. Where are descriptions actually used in the frontend? metadata --viewer one or more (list) of {\"Image\", \"ParaView\", \"ViPLabGraphics\"} opt When given, specific file extension, like \".vtu\" are interpreted by the frontend for displaying results. Otherwise files are only downloadable. environment one of {\"C\", \"C++\", \"Java\", \"Matlab\", \"Octave\", \"Container\", \"DuMuX\"} must Specifies the environment used for the Computation. It defines language, runtime, libraries and tools files [ {...}, {...}, ... ] must array containing File objects : there has to be at least one element parameters [{...}, {...}, ...] opt Parameters can be used to supply values at runtime to the configuration. Each parameter has a unique identifier (as string) and is a Parameter object . For security reasons free text gui_type , i.e., text input field or editor, are not allowed here. configuration struct opt/must (depends on environment) Environment specific configurations Different phases can be configured like compiling, checking (for legal function calls in source code), ... configuration --compiling.sources [FILE_ID, FILE_ID, ...] must Array of identifiers of JSON File objects . Explicit compilation (only referenced sources will be compiled). for C, C++, Java ; The frontend should suggest defaults here, e.g. by suited file suffix ('.c', '.cpp', '.java'). name/path (Java) for implicit compiling? check backend? configuration --compiling.compiler string must compiler to be used, e.g. \"gcc\" for C, C++ configuration --compiling.flags string must for C, C++ ; optional for Java CFLAGS for C/C++ ; compile flags for Java e.g. \"gcc\" for C/C++ ; \"-O2\" or \"\" for Java configuration --checking.sources [PART_ID, PART_ID, ...] must if checking should be performed array of identifiers of to be checked sources; given by parts[]{PART_ID} (see below ) for Matlab, Octave, C, Java ; frontend should suggest all \"modifiable\" and \"template\" parts here configuration --checking.allowedCalls string must if checking should be performed for Matlab/Octave : allowed call names separated by WS; only idents (no braces, no func args) for Java : allowed call name expressions separated by WS for Java semantics see Java checking semantics . configuration --checking.forbiddenCalls string must if checking should be performed for C : forbidden call names separated by WS; only idents (no braces, no func args) for Java : forbidden call name expressions separated by WS for C semantics see C checking semantics ); for Java semantics see Java checking semantics . configuration --linking.flags string must LFLAGS for C, C++ ; e.g. \"\" configuration --running.stdinFilename FILE_ID must the file identifier that is passed to Matlab/Octave via standard-in configuration --running.timelimitInSeconds int opt CPU time limit for all environments ; for semantics see Notes to \"timelimitInSeconds\" . configuration --running.commandLineArguments string opt for C, C++, Java : arguments given to main() function; for DuMuX, Container : additional command line args mustache template syntax can be used to transform input values (e.g. of sliders) into CLI arguments (see parameters -attribute) configuration --running.flags string opt flags given to JVM for Java configuration --running.mainClass string opt (if unique) / must (if not unique) class containing \"public static void main(String[] args) {\" for Java : \"args\" may be another name. If main function is unique, its correct class should be detected automatically. configuration --running.executable string must name of executable to run (as in backend file system) for DuMuX configuration --running.entrypoint string opt executable to run inside the container for Container ; can contain mustache template syntax for injecting PARAM_IDs (see parameters -attribute) configuration --running.intermediateFilesPattern string opt regex-expression in stdout which file is ready to be transferred for Container Is this implemented? configuration --running.userId int opt user id of the user that writes files inside the container for Container ; needed to set correct permissions configuration --resources.image url must location of the image to be executed for Container ; has to be a tar configuration --resources.volume string opt path in the container where data is placed for Container we need workaround for kata containers?! configuration --resources.memory string opt ( 64mb ) memory limit for the container for Container configuration --resources.numCPUs int opt number of CPUs for the container for Container default?; kubernetes map to softlimit cpu-shares... C checking semantics 08.05.2013: Semantics is \"mergeAndInclude\" for both prod systems and devel system (\"element\" unused). \"mergeAndInclude\" (default): Checked will be the merge result of elements after being preprocessed by the C preprocessor, so #include's are allowed and honored. Types have to be defined by the corresponding system headers (e.g. by #include <stdio.h> ) and no predefined standard types should be expected. It's possible to have illegal function calls in source elements (being part of some merge) not being checked (typically teacher code). This means, that during checking it has to and will be looked, in which source element an illegal function call happens, for knowing, if this actually is an error case. \"element\" (unused): Each element has to contain correct C code for itself. In addition to basic types some standard types defined in system headers are predefined (e.g. FILE, size_t). Using types from the outside -- e.g. other elements defining them or #include's in teacher code elements -- does not work. Common for both: no preprocessor commands are allowed in to be checked elements, with only one exception: #include's are allowed in case of \"mergeAndInclude\". The reason for the latter is to give students access to source elements serving as headers - editable for them or not. Functions from system headers could be #include'd, too. The teacher has the responsibility to put unwished system calls like system() and others from libc into \"forbiddenCalls\". Another point of control is to avoid linking with libs, whose functions shouldn't be used (this does not work with libc (automatically linked)). Java checking semantics Matching expressions for use in \"allowedCalls\" and \"forbiddenCalls\" '**' is for pure prefix matching; '*' for more fine-granular matching. Examples of matching expressions: - java.io.* matches all calls to methods in all classes in package, but does not match calls to methods in classes in subpackages; - java.io.** matches all calls to methods in all classes in package, _and_ in all classes in subpackages (if they exist); - java.io.Foo matches all calls to methods in class Foo, _and_ to methods in inner classes; - java.io.Foo.* \" \" \" \" \" \" \" \" , but _not_ to methods in inner classes (eg. to java.io.Foo$Bar.callMe); - java.io.Foo.callMe matches (only) the call to method callMe in Foo; - java.io.Foo$Bar.callMe matches (only) the call to method callMe in inner class Foo$Bar. If used in \"forbiddenCalls\" only (property \"allowedCalls\" missing): - java.io.* forbids all calls to methods in all classes in package, but allows calls to methods in classes in subpackages; - java.io.** forbids all calls to methods in all classes in package, _and_ in all classes in subpackages (if they exist); - java.io.Foo forbids all calls to methods in class Foo, _and_ to methods in inner classes; - java.io.Foo.* \" \" \" \" \" \" \" \" , but _not_ to methods in inner classes (eg. to java.io.Foo$Bar.callMe); - java.io.Foo.callMe forbids (only) the call to method callMe in Foo; - java.io.Foo$Bar.callMe forbids (only) the call to method callMe in inner class Foo$Bar. One or more of these expressions may be given by \"allowedCalls\" and/or \"forbiddenCalls\", separated by WS; e.g. \"forbiddenCalls\": \"java.io.** java.lang.Class\" . An allowed() or forbidden() predicate gives true, - if one of its corresponding matching expressions - an entry in property \"allowedCalls\" resp. \"forbiddenCalls\" - matches, or - if there is no corresponding property given at all. Otherwise it gives false. All calls will be filtered by following composed predicate for getting allowed ones: allowed(call) && ! forbidden(call) <=> ! forbidden(call) && allowed(call) . If only one part is given, this predicate reduces to: allowed(call) resp. ! forbidden(call) . Default for not given part of predicate is - 'no forbidden': ! forbidden(call) == true, and - 'all allowed' : allowed(call) == true. (opposite defaults would render the given part useless). If sets 'allowed' and 'forbidden' - are disjunct -> 'allowed' are allowed and all other forbidden. - have an intersection -> ('allowed' minus intersection) is allowed (all other forbidden). With this logic it is possible to define - a negative list by giving 'forbiddenCalls' only, or - a positive one by giving \"allowedCalls\", or - a mixture of both. Notes to \"timelimitInSeconds\" There is a default CPU time limit (see RLIMIT_CPU of 'man setrlimit') for running or interpreting, which depends on backend configuration. This is good for terminating non-terminating programs, e.g. endless loops. Optional attribute \"timelimitInSeconds\" may lower this default CPU time limit; if it is higher than default, it will be ignored. Setting it to a value as much as possible below default is good for backend response time under high load; especially, if default is configured for performing expensive computations. JSON objects in files An object in array files[] has the following members: Key Type (an enum default is marked by italics ) Opt / Must Description Comment identifier string (UUID) must for later referencing, has to be unique can be autogenerated by frontend path string must absolute path to file It is not allowed to start with '/' metadata struct opt contains information for frontend metadata --syntaxHighlighting string ( text ) opt Mode of the ace editor. List can be found in on github Examples: \"ini\", \"c_cpp\", \"matlab\", \"java\". See also Ace demo parts [{...}, {...}, ...] must array containing part objects . There has to be at least one. JSON objects in parts An object in array parts[] has the following members: Key Type (an enum default is marked by italics ) Opt / Must Description Comment AS identifier string must for later referencing, has to be unique can be autogenerated by frontend access one of {\"invisible\", \"visible\", \"modifiable\", \"template\"} must defines the access level of this part for the user see Notes on access levels for more details metadata struct opt contains information mainly for the frontend metadata --name string opt additional description of this part To be shown in the frontend Where? Is it used? metadata --emphasis One of {\"low\", \"medium\" , \"high\"} opt info for rendering Still needed? parameters array of parameter-objects opt definition of parameters that are injected to content at runtime Any number of parameters can be specified, but the PARAM_ID (identifier) has to be unique. content string must base64url-encoded source code Can contain mustache expressions with PARAM_IDs (identifiers) if the access type of this part is \"template\". Notes on access levels in parts Four access levels can be specified inside a part: invisible : The content is not shown to a user, i.e., student or re-user of a software. This can be used to hide irrelevant source code from the user, to focus on the important parts, etc... visible : The content is shown to a user, but can not be changed by him/her. modifiable : The content is shown to a user and can be changed. This comprise functions students should implement or input files of a research software that can be changed by a re-user. template : The content is shown to a user, but can not be changed. Additionally, GUI elements like input fields, sliders, buttons, etc. that are specified within the metadata can be set by the user and the template is then filled with these parameter values. This access-level can be used to simplify complex research software configurations for the re-user. JSON object Parameter A parameter-object, has the following members: Key [--Subkey] Type (a default is marked by italics ) Opt / Must Description Comment mode one of {\"any\", \"fixed\"} must specifies type of the parameter used to define the type of validation that is performed identifier string must unique id for this parameter This id must be valid mustach template variable. Example: \" __BINARY__ \" fixed-type parameter JSON object A fixed-type PARAM-object, like __checkbox__ , has the following members: Key [--Subkey] Type (a default is marked by italics ) Opt / Must Description Comment metadata Object must JSON object containing information how to render this parameter See definition of fixed-type JSON object Parameter-Metadata options array of objects must for gui_type \"checkbox\", \"radio\", \"dropdown\", \"toggle\" specifies the allowed values See fixed-type options JSON object for details on contained objects validation one of {\"onlyone\", \"minone\", \"any\"} must See Parameter validation semantics for details fixed-type JSON object Parameter-Metadata A metadata-object, has the following members: Key [--Subkey] Type (a default is marked by italics ) Opt / Must Description Comment guiType one of {\"checkbox\", \"radio\", \"dropdown\", \"toggle\"} must specifies how the frontend renders the parameter name string must Label for the parameter frontend feature fixed-type options JSON object Key [--Subkey] Type (a default is marked by italics ) Opt / Must Description Comment value string must specifies one avaliable value Example: { \"value\" : \"verbose\" } text string opt Text shown besides or as dropdown of the value disabled boolean opt Shows disabled options in frontend Example: { \"value\" : \"Please choose multiple\", \"disabled\" : true } selected Boolean opt specifies defaults value/values for frontend the strings have to be part of values ; for \"toogle\" given values mean true text string opt Text shown besides or as dropdown of the value any-type parameter JSON object A any-type PARAM-object, like __sliderMultiple__ , has the following members: Key [--Subkey] Type (a default is marked by italics ) Opt / Must Description Comment metadata Object must JSON object containing information how to render this parameter See definition of any-type JSON object Parameter-Metadata default array of number(s) or string(s) opt the default value(s) shown in frontend min number opt minimal allowed value for slider, or input_field with type number max number opt maximal allowed value for slider, or input_field with type number step number opt defines together with min and max attributes a finite set of allowed values for slider, or input_field with type number maxlength number opt Specifies for gui_type \"input_field\" the length of the input validation one of {\"range\", \"pattern\", \"none\"} must See Parameter validation semantics for details pattern string opt A regex pattern for validation any-type JSON object Parameter-Metadata A metadata-object, has the following members: Key [--Subkey] Type (a default is marked by italics ) Opt / Must Description Comment guiType one of { \"editor\" , \"input_field\", \"slider\"} must specifies how the frontend renders the parameter type one of {\"number\", \"text\"} opt Type of the input field name string must Label for the parameter frontend feature vertical bool opt ( false ) Specifies for gui_type \"slider\" whether it is rendered horizontal or vertical Parameter Validation Semantics Four types of validation are implemented at the moment: onlyone : Only one value can be chosen. The value has to be included in options and disabled for the value has to be set to false (is false by default, so disabled can also be missing). minone : One or more values can be chosen. The values have to be included in options and disabled for the value s has to be set to false (is false by default, so disabled can also be missing). any : All of the chosen values have to be included in options and disabled for the value s has to be set to false (is false by default, so disabled can also be missing). range : A numerical value is checked whether is is between min and max . If step is given a finite number of possible values is computed and the value has to be within this set. pattern : A regex pattern that the text value has to fulfill. none : If no validation is necessary, because there are no restraints on the value.","title":"Computation Template JSON Message"},{"location":"viplab3.0/computation_template/#computation-template-json-message","text":"A computation template can be the definition of an Exercise in the context of a learning environment, or a pre-configured research software (stored in a docker image), used to show reproducability of a research work or to reduce complex software environments to specific functionality","title":"Computation Template JSON Message"},{"location":"viplab3.0/computation_template/#examples-informal","text":"Note: // with text following until EOL is a comment, which is not covered by the JSON spec, and should not be contained in message sends in real; but nevertheless it would help, if JSON parsers could just ignore them.","title":"Examples (informal)"},{"location":"viplab3.0/computation_template/#c-student-example","text":"{ \"identifier\" : \"11483f23-95bf-424a-98a5-ee5868c85c3e\", // uuid, created by a frontend launcher \"version\" : \"3.0.0\" // version of this JSON-spec definition \"metadata\": // information for frontend { \"displayName\" : \"Aufgabe 1\", // name of computation template shown in frontend \"description\" : \"Schreiben Sie eine C-Funktion...\", // short description (could be used // as subtitle, further descriptions in \"parts\"). }, \"environment\" : \"C\", // important for interpreting configuration \"files\" : // must: at least one array element [ { \"identifier\": \"22483f42-95bf-984a-98a5-ee9485c85c3e\", // uuid, for referencing \"path\" : \"code.c\" // filename on backend \"metadata\" : // information for frontend { \"syntaxHighlighting\": \"C\", // optional (default: \"none\") }, \"parts\" : // must: at least one array element [ { \"identifier\": \"preamble\", \"access\" : \"visible\", // it is rendered, but can not be changed \"metadata\" : // what has to be moved to files ? { \"name\" : \"Info: source before your code.\", // name of element in frontend \"emphasis\" : \"low\" // optional (for rendering) }, \"content\" : \"I2luY2x1ZGUgPHN0ZGlvLmg-Cg\" // source (base64url encoded) // decoded: #include <stdio.h>\\n }, { \"identifier\": \"codeFromStudent\", \"access\" : \"modifiable\", // it can be edited in the frontend \"metadata\" : { \"name\" : \"Fill in your code!\", \"emphasis\" : \"medium\" }, \"content\" : \"dm9pZCBiYXIoKSB7IC8qIFNjaHJlaWJlbiBTaWUgaGllciBDb2RlLCBkZXIgImJhciIgYXVzZ2lidC4gKi8KCn0K\" // source (template) // decoded: void bar() { /* Schreiben Sie hier Code, der \"bar\" ausgibt. */\\n\\n}\\n }, { \"identifier\": \"postscript\", \"access\" : \"visible\", \"metadata\" : { \"name\" : \"Info: source after your code calling bar() in it.\", \"emphasis\" : \"low\", }, \"content\" : \"aW50IG1haW4oKSB7IGJhcigpOyByZXR1cm4gMDsgfQ\" // source // decoded: int main() { bar(); return 0; } } ] // parts[] } ], // files[] \"parameters\" : // parameters can be used to supply values at runtime to the configuration [ { \"mode\" : \"any\", // depending on guiType either any or fixed \"identifier\" : \"__STEPWIDTH__\", \"metadata\" : { \"guiType\" : \"input_field\", \"type\": \"number\", \"name\": \"stepwidth\" }, \"default\": [0.001], //default \"min\": 0, \"max\": 1, \"step\": 0.001, \"validation\" : \"range\" // one of [range, pattern (regex), anyof/oneof] } ], \"configuration\" : { \"compiling.compiler\" : \"gcc\", // string \"compiling.flags\" : \"-O2 -Wall\" // string \"checking.sources\" : [\"codeFromStudent\"], // identifier to parts \"checking.forbiddenCalls\": \"system execve\", // forbidden call names separated by WS \"linking.flags\" : \"-lm\", // string \"running.commandLineArguments\" : \"--stepwidth {{ __STEPWIDTH__ }}\" // mustache template if parameters are used } }","title":"C Student Example"},{"location":"viplab3.0/computation_template/#parameters-example","text":"{ \"identifier\" : \"11483f23-95bf-424a-98a5-ee5868c85c3f\", // uuid, created by a frontend launcher \"version\" : \"3.0.0\" // version of this JSON-spec definition \"metadata\": // information for frontend { \"displayName\" : \"Parameters Example\", // name of computation template shown in frontend \"description\" : \"This is an example\", // short description (could be used // as subtitle, further descriptions in \"parts\"). }, \"environment\" : \"C\", // important for interpreting configuration \"files\" : // must: at least one array element [ { \"identifier\": \"22483f42-95bf-984a-98a5-ee9485c85c3f\", // uuid, for referencing \"path\" : \"params.input\" // filename on backend \"metadata\" : // information for frontend { \"syntaxHighlighting\": \"ini\", // optional (default: \"none\") }, \"parts\" : // must: at least one array element [ { \"identifier\": \"part-contains-slider\", \"access\": \"template\", \"metadata\": { \"name\": \"Parameter in part\", \"emphasis\": \"low\" }, \"parameters\" : [ { \"mode\" : \"any\", \"identifier\" : \"__sliderSingle__\", \"metadata\" : { \"guiType\" : \"slider\", \"name\": \"temperature\", \"vertical\": false }, \"default\": [ 10 ], \"min\": 0, \"max\": 500, \"step\": 10, \"validation\": \"range\" } ], \"content\": \"VGhpcyBpcyBhIFRleHQ6Ont7X19zbGlkZXJTaW5nbGVfX319OjpUaGlzIGlzIGEgVGV4dA==\" }, { \"identifier\": \"ceb051d8-b50c-4814-983a-b9d703cae0c6\", \"access\" : \"template\", \"metadata\" : { \"name\" : \"params.input file\" }, \"parameters\": [ { \"mode\" : \"fixed\", \"identifier\" : \"__checkbox__\", \"metadata\" : { \"guiType\": \"checkbox\", \"name\": \"options\" }, \"options\": [ { \"value\" : \"verbose\", \"selected\" : true }, { \"value\" : \"debug\" }, { \"value\" : \"make_plot\" } ], \"validation\": \"anyof\" }, { \"mode\" : \"fixed\", \"identifier\" : \"__radioButton__\", \"metadata\" : { \"guiType\": \"radio\", \"name\": \"backend\" }, \"options\": [ { \"value\" : \"debug\" }, { \"value\" : \"serial\", \"selected\" : true }, { \"value\" : \"hpc\", \"disabled\" : true }, { \"value\" : \"test\" } ], \"validation\": \"oneof\" }, { \"mode\" : \"fixed\", \"identifier\" : \"__dropdownSingle__\", \"metadata\" : { \"guiType\": \"dropdown\", \"name\": \"model\" }, \"options\": [ { \"value\" : \"Please choose one\", \"disabled\" : true }, { \"value\" : \"1p\", \"selected\" : true }, { \"value\" : \"1pnc\" }, { \"value\" : \"1pncmin\" }, { \"value\" : \"2p\" }, { \"value\" : \"2p1c\" } ], \"validation\": \"oneof\" }, { \"mode\" : \"fixed\", \"identifier\" : \"__dropdownMultiple__\", \"metadata\" : { \"guiType\": \"dropdown\", \"name\": \"model\" }, \"options\": [ { \"value\" : \"Please choose multiple\", \"disabled\" : true }, { \"value\" : \"1p\", \"selected\" : true }, { \"value\" : \"1pnc\" }, { \"value\" : \"1pncmin\" }, { \"value\" : \"2p\", \"selected\" : true }, { \"value\" : \"2p1c\", \"disabled\" : true } ], \"validation\": \"anyof\" }, { \"mode\" : \"fixed\", \"identifier\" : \"__toggle__\", \"metadata\" : { \"guiType\": \"toggle\", \"name\": \"options\" }, \"options\": [ { \"value\" : \"verbose\", \"selected\" : true }, { \"value\" : \"debug\" }, { \"value\" : \"make_plot\" } ], \"validation\": \"anyof\" }, { \"mode\" : \"any\", \"identifier\" : \"__sliderMultiple__\", \"metadata\" : { \"guiType\" : \"slider\", \"name\": \"temperature\", \"vertical\": true }, \"default\": [ 25, 50, 75 ], \"min\": 0, \"max\": 100, \"step\": 5, \"validation\": \"range\" }, { \"mode\" : \"any\", \"identifier\" : \"__inputTextWOMaxlangth__\", \"metadata\" : { \"guiType\" : \"input_field\", \"type\": \"text\", \"name\": \"file_name\" }, \"default\" : [\"\"], \"validation\": \"pattern\" }, { \"mode\" : \"any\", \"identifier\" : \"__inputTextWMaxlength__\", \"metadata\" : { \"guiType\" : \"input_field\", \"type\": \"text\", \"name\": \"file_name\" }, \"maxlength\": 200, \"default\" : [\"\"], \"validation\": \"pattern\" }, { \"mode\" : \"any\", \"identifier\" : \"__inputNumber__\", \"metadata\" : { \"guiType\" : \"input_field\", \"type\": \"number\", \"name\": \"time_delay\" }, \"default\": [10], \"min\": 0, \"max\": 500, \"step\": 0.1, \"validation\": \"range\" }, { \"mode\" : \"any\", \"identifier\" : \"__default__\", \"metadata\" : { \"guiType\" : \"editor\", \"name\": \"code 1\" }, \"default\": [\"I2luY2x1ZGUgPHN0ZGlvLmg-Cg\"], \"validation\": \"pattern\" }, ], \"content\" : \"\" } ] // parts[] } ], // files[] \"configuration\" : { \"resources.image\" : \"name://git.iws.uni-stuttgart.de:4567/dumux-repositories/dumux-docker/viplab/test\", \"resources.volume\" : \"/data/shared\", \"resources.memory\" : \"1g\", \"resources.numCPUs\" : 1, \"running.entrypoint\" : \"/data/bin/run.sh\", \"running.commandLineArguments\" : \"params.input\" } }","title":"Parameters Example"},{"location":"viplab3.0/computation_template/#explaining-the-json-format","text":"version 3.0.0 Key [--Subkey] Type (a default is marked by italics ) Opt / Must Description Comment AS identifier string (UUID) must the identifier of this computation template can be generated by the frontend launcher version string opt version of the json specification should be given for backwards compatibility metadata struct opt contains information for frontend metadata --displayName string opt name of computation template shown in frontend Makes 'opt' sense for frontend? metadata --description string (plain text) opt short description Mostly a few lines. A longer description in different formats can be put in \"elements\" (see below). There is nothing 'below'. Where are descriptions actually used in the frontend? metadata --viewer one or more (list) of {\"Image\", \"ParaView\", \"ViPLabGraphics\"} opt When given, specific file extension, like \".vtu\" are interpreted by the frontend for displaying results. Otherwise files are only downloadable. environment one of {\"C\", \"C++\", \"Java\", \"Matlab\", \"Octave\", \"Container\", \"DuMuX\"} must Specifies the environment used for the Computation. It defines language, runtime, libraries and tools files [ {...}, {...}, ... ] must array containing File objects : there has to be at least one element parameters [{...}, {...}, ...] opt Parameters can be used to supply values at runtime to the configuration. Each parameter has a unique identifier (as string) and is a Parameter object . For security reasons free text gui_type , i.e., text input field or editor, are not allowed here. configuration struct opt/must (depends on environment) Environment specific configurations Different phases can be configured like compiling, checking (for legal function calls in source code), ... configuration --compiling.sources [FILE_ID, FILE_ID, ...] must Array of identifiers of JSON File objects . Explicit compilation (only referenced sources will be compiled). for C, C++, Java ; The frontend should suggest defaults here, e.g. by suited file suffix ('.c', '.cpp', '.java'). name/path (Java) for implicit compiling? check backend? configuration --compiling.compiler string must compiler to be used, e.g. \"gcc\" for C, C++ configuration --compiling.flags string must for C, C++ ; optional for Java CFLAGS for C/C++ ; compile flags for Java e.g. \"gcc\" for C/C++ ; \"-O2\" or \"\" for Java configuration --checking.sources [PART_ID, PART_ID, ...] must if checking should be performed array of identifiers of to be checked sources; given by parts[]{PART_ID} (see below ) for Matlab, Octave, C, Java ; frontend should suggest all \"modifiable\" and \"template\" parts here configuration --checking.allowedCalls string must if checking should be performed for Matlab/Octave : allowed call names separated by WS; only idents (no braces, no func args) for Java : allowed call name expressions separated by WS for Java semantics see Java checking semantics . configuration --checking.forbiddenCalls string must if checking should be performed for C : forbidden call names separated by WS; only idents (no braces, no func args) for Java : forbidden call name expressions separated by WS for C semantics see C checking semantics ); for Java semantics see Java checking semantics . configuration --linking.flags string must LFLAGS for C, C++ ; e.g. \"\" configuration --running.stdinFilename FILE_ID must the file identifier that is passed to Matlab/Octave via standard-in configuration --running.timelimitInSeconds int opt CPU time limit for all environments ; for semantics see Notes to \"timelimitInSeconds\" . configuration --running.commandLineArguments string opt for C, C++, Java : arguments given to main() function; for DuMuX, Container : additional command line args mustache template syntax can be used to transform input values (e.g. of sliders) into CLI arguments (see parameters -attribute) configuration --running.flags string opt flags given to JVM for Java configuration --running.mainClass string opt (if unique) / must (if not unique) class containing \"public static void main(String[] args) {\" for Java : \"args\" may be another name. If main function is unique, its correct class should be detected automatically. configuration --running.executable string must name of executable to run (as in backend file system) for DuMuX configuration --running.entrypoint string opt executable to run inside the container for Container ; can contain mustache template syntax for injecting PARAM_IDs (see parameters -attribute) configuration --running.intermediateFilesPattern string opt regex-expression in stdout which file is ready to be transferred for Container Is this implemented? configuration --running.userId int opt user id of the user that writes files inside the container for Container ; needed to set correct permissions configuration --resources.image url must location of the image to be executed for Container ; has to be a tar configuration --resources.volume string opt path in the container where data is placed for Container we need workaround for kata containers?! configuration --resources.memory string opt ( 64mb ) memory limit for the container for Container configuration --resources.numCPUs int opt number of CPUs for the container for Container default?; kubernetes map to softlimit cpu-shares...","title":"Explaining the JSON Format"},{"location":"viplab3.0/computation_template/#c-checking-semantics","text":"08.05.2013: Semantics is \"mergeAndInclude\" for both prod systems and devel system (\"element\" unused). \"mergeAndInclude\" (default): Checked will be the merge result of elements after being preprocessed by the C preprocessor, so #include's are allowed and honored. Types have to be defined by the corresponding system headers (e.g. by #include <stdio.h> ) and no predefined standard types should be expected. It's possible to have illegal function calls in source elements (being part of some merge) not being checked (typically teacher code). This means, that during checking it has to and will be looked, in which source element an illegal function call happens, for knowing, if this actually is an error case. \"element\" (unused): Each element has to contain correct C code for itself. In addition to basic types some standard types defined in system headers are predefined (e.g. FILE, size_t). Using types from the outside -- e.g. other elements defining them or #include's in teacher code elements -- does not work. Common for both: no preprocessor commands are allowed in to be checked elements, with only one exception: #include's are allowed in case of \"mergeAndInclude\". The reason for the latter is to give students access to source elements serving as headers - editable for them or not. Functions from system headers could be #include'd, too. The teacher has the responsibility to put unwished system calls like system() and others from libc into \"forbiddenCalls\". Another point of control is to avoid linking with libs, whose functions shouldn't be used (this does not work with libc (automatically linked)).","title":"C checking semantics"},{"location":"viplab3.0/computation_template/#java-checking-semantics","text":"Matching expressions for use in \"allowedCalls\" and \"forbiddenCalls\" '**' is for pure prefix matching; '*' for more fine-granular matching. Examples of matching expressions: - java.io.* matches all calls to methods in all classes in package, but does not match calls to methods in classes in subpackages; - java.io.** matches all calls to methods in all classes in package, _and_ in all classes in subpackages (if they exist); - java.io.Foo matches all calls to methods in class Foo, _and_ to methods in inner classes; - java.io.Foo.* \" \" \" \" \" \" \" \" , but _not_ to methods in inner classes (eg. to java.io.Foo$Bar.callMe); - java.io.Foo.callMe matches (only) the call to method callMe in Foo; - java.io.Foo$Bar.callMe matches (only) the call to method callMe in inner class Foo$Bar. If used in \"forbiddenCalls\" only (property \"allowedCalls\" missing): - java.io.* forbids all calls to methods in all classes in package, but allows calls to methods in classes in subpackages; - java.io.** forbids all calls to methods in all classes in package, _and_ in all classes in subpackages (if they exist); - java.io.Foo forbids all calls to methods in class Foo, _and_ to methods in inner classes; - java.io.Foo.* \" \" \" \" \" \" \" \" , but _not_ to methods in inner classes (eg. to java.io.Foo$Bar.callMe); - java.io.Foo.callMe forbids (only) the call to method callMe in Foo; - java.io.Foo$Bar.callMe forbids (only) the call to method callMe in inner class Foo$Bar. One or more of these expressions may be given by \"allowedCalls\" and/or \"forbiddenCalls\", separated by WS; e.g. \"forbiddenCalls\": \"java.io.** java.lang.Class\" . An allowed() or forbidden() predicate gives true, - if one of its corresponding matching expressions - an entry in property \"allowedCalls\" resp. \"forbiddenCalls\" - matches, or - if there is no corresponding property given at all. Otherwise it gives false. All calls will be filtered by following composed predicate for getting allowed ones: allowed(call) && ! forbidden(call) <=> ! forbidden(call) && allowed(call) . If only one part is given, this predicate reduces to: allowed(call) resp. ! forbidden(call) . Default for not given part of predicate is - 'no forbidden': ! forbidden(call) == true, and - 'all allowed' : allowed(call) == true. (opposite defaults would render the given part useless). If sets 'allowed' and 'forbidden' - are disjunct -> 'allowed' are allowed and all other forbidden. - have an intersection -> ('allowed' minus intersection) is allowed (all other forbidden). With this logic it is possible to define - a negative list by giving 'forbiddenCalls' only, or - a positive one by giving \"allowedCalls\", or - a mixture of both.","title":"Java checking semantics"},{"location":"viplab3.0/computation_template/#notes-to-timelimitinseconds","text":"There is a default CPU time limit (see RLIMIT_CPU of 'man setrlimit') for running or interpreting, which depends on backend configuration. This is good for terminating non-terminating programs, e.g. endless loops. Optional attribute \"timelimitInSeconds\" may lower this default CPU time limit; if it is higher than default, it will be ignored. Setting it to a value as much as possible below default is good for backend response time under high load; especially, if default is configured for performing expensive computations.","title":"Notes to \"timelimitInSeconds\""},{"location":"viplab3.0/computation_template/#json-objects-in-files","text":"An object in array files[] has the following members: Key Type (an enum default is marked by italics ) Opt / Must Description Comment identifier string (UUID) must for later referencing, has to be unique can be autogenerated by frontend path string must absolute path to file It is not allowed to start with '/' metadata struct opt contains information for frontend metadata --syntaxHighlighting string ( text ) opt Mode of the ace editor. List can be found in on github Examples: \"ini\", \"c_cpp\", \"matlab\", \"java\". See also Ace demo parts [{...}, {...}, ...] must array containing part objects . There has to be at least one.","title":"JSON objects in files"},{"location":"viplab3.0/computation_template/#json-objects-in-parts","text":"An object in array parts[] has the following members: Key Type (an enum default is marked by italics ) Opt / Must Description Comment AS identifier string must for later referencing, has to be unique can be autogenerated by frontend access one of {\"invisible\", \"visible\", \"modifiable\", \"template\"} must defines the access level of this part for the user see Notes on access levels for more details metadata struct opt contains information mainly for the frontend metadata --name string opt additional description of this part To be shown in the frontend Where? Is it used? metadata --emphasis One of {\"low\", \"medium\" , \"high\"} opt info for rendering Still needed? parameters array of parameter-objects opt definition of parameters that are injected to content at runtime Any number of parameters can be specified, but the PARAM_ID (identifier) has to be unique. content string must base64url-encoded source code Can contain mustache expressions with PARAM_IDs (identifiers) if the access type of this part is \"template\".","title":"JSON objects in parts"},{"location":"viplab3.0/computation_template/#notes-on-access-levels-in-parts","text":"Four access levels can be specified inside a part: invisible : The content is not shown to a user, i.e., student or re-user of a software. This can be used to hide irrelevant source code from the user, to focus on the important parts, etc... visible : The content is shown to a user, but can not be changed by him/her. modifiable : The content is shown to a user and can be changed. This comprise functions students should implement or input files of a research software that can be changed by a re-user. template : The content is shown to a user, but can not be changed. Additionally, GUI elements like input fields, sliders, buttons, etc. that are specified within the metadata can be set by the user and the template is then filled with these parameter values. This access-level can be used to simplify complex research software configurations for the re-user.","title":"Notes on access levels in parts"},{"location":"viplab3.0/computation_template/#json-object-parameter","text":"A parameter-object, has the following members: Key [--Subkey] Type (a default is marked by italics ) Opt / Must Description Comment mode one of {\"any\", \"fixed\"} must specifies type of the parameter used to define the type of validation that is performed identifier string must unique id for this parameter This id must be valid mustach template variable. Example: \" __BINARY__ \"","title":"JSON object Parameter"},{"location":"viplab3.0/computation_template/#fixed-type-parameter-json-object","text":"A fixed-type PARAM-object, like __checkbox__ , has the following members: Key [--Subkey] Type (a default is marked by italics ) Opt / Must Description Comment metadata Object must JSON object containing information how to render this parameter See definition of fixed-type JSON object Parameter-Metadata options array of objects must for gui_type \"checkbox\", \"radio\", \"dropdown\", \"toggle\" specifies the allowed values See fixed-type options JSON object for details on contained objects validation one of {\"onlyone\", \"minone\", \"any\"} must See Parameter validation semantics for details","title":"fixed-type parameter JSON object"},{"location":"viplab3.0/computation_template/#fixed-type-json-object-parameter-metadata","text":"A metadata-object, has the following members: Key [--Subkey] Type (a default is marked by italics ) Opt / Must Description Comment guiType one of {\"checkbox\", \"radio\", \"dropdown\", \"toggle\"} must specifies how the frontend renders the parameter name string must Label for the parameter frontend feature","title":"fixed-type JSON object Parameter-Metadata"},{"location":"viplab3.0/computation_template/#fixed-type-options-json-object","text":"Key [--Subkey] Type (a default is marked by italics ) Opt / Must Description Comment value string must specifies one avaliable value Example: { \"value\" : \"verbose\" } text string opt Text shown besides or as dropdown of the value disabled boolean opt Shows disabled options in frontend Example: { \"value\" : \"Please choose multiple\", \"disabled\" : true } selected Boolean opt specifies defaults value/values for frontend the strings have to be part of values ; for \"toogle\" given values mean true text string opt Text shown besides or as dropdown of the value","title":"fixed-type options JSON object"},{"location":"viplab3.0/computation_template/#any-type-parameter-json-object","text":"A any-type PARAM-object, like __sliderMultiple__ , has the following members: Key [--Subkey] Type (a default is marked by italics ) Opt / Must Description Comment metadata Object must JSON object containing information how to render this parameter See definition of any-type JSON object Parameter-Metadata default array of number(s) or string(s) opt the default value(s) shown in frontend min number opt minimal allowed value for slider, or input_field with type number max number opt maximal allowed value for slider, or input_field with type number step number opt defines together with min and max attributes a finite set of allowed values for slider, or input_field with type number maxlength number opt Specifies for gui_type \"input_field\" the length of the input validation one of {\"range\", \"pattern\", \"none\"} must See Parameter validation semantics for details pattern string opt A regex pattern for validation","title":"any-type parameter JSON object"},{"location":"viplab3.0/computation_template/#any-type-json-object-parameter-metadata","text":"A metadata-object, has the following members: Key [--Subkey] Type (a default is marked by italics ) Opt / Must Description Comment guiType one of { \"editor\" , \"input_field\", \"slider\"} must specifies how the frontend renders the parameter type one of {\"number\", \"text\"} opt Type of the input field name string must Label for the parameter frontend feature vertical bool opt ( false ) Specifies for gui_type \"slider\" whether it is rendered horizontal or vertical","title":"any-type JSON object Parameter-Metadata"},{"location":"viplab3.0/computation_template/#parameter-validation-semantics","text":"Four types of validation are implemented at the moment: onlyone : Only one value can be chosen. The value has to be included in options and disabled for the value has to be set to false (is false by default, so disabled can also be missing). minone : One or more values can be chosen. The values have to be included in options and disabled for the value s has to be set to false (is false by default, so disabled can also be missing). any : All of the chosen values have to be included in options and disabled for the value s has to be set to false (is false by default, so disabled can also be missing). range : A numerical value is checked whether is is between min and max . If step is given a finite number of possible values is computed and the value has to be within this set. pattern : A regex pattern that the text value has to fulfill. none : If no validation is necessary, because there are no restraints on the value.","title":"Parameter Validation Semantics"},{"location":"viplab3.0/system_status/","text":"System status JSON message to inform frontend about computations in-preparation...","title":"System status JSON message"},{"location":"viplab3.0/system_status/#system-status-json-message","text":"to inform frontend about computations in-preparation...","title":"System status JSON message"},{"location":"viplab3.0/versioning/","text":"JSON Object Versioning Rules Status: proposed Deciders: Leon Kiefer, Per Pascal Seeland Date: 2020-05-14 Technical Story: https://github.com/VirtualProgrammingLab/documentation/issues/1 Context and Problem Statement The ViPLab Projects defines a set of JSON-objects, which are used in the different components of the project. Since ViPLab itself does not store any data, these objects have to be stored by third party systems. These will be, depending on the context they are used in either LMS (like ILIAS) or data repositories (like dataverse). There needs to be a way to identify the version of the different objects stored by the third party system to allow e.g. upgrading/migrating the different components. Decision Drivers Provide a way to identify the version of the objects and also provide a path for e.g. upgrading the API endpoints used by those systems. Considered Options Version all endpoints, but not the objects Version all objects, but not the endpoints Version parts of the objects and all of the endpoints. Version all objects and all of the endpoints. Decision Outcome It has been decided to version all long living objects, and all endpoints. The reason for requiring all objects to have version tags is for consistency reasons. Endpoints will only accept objects versions of one major version. Breaking changes will require to define a new version. Incremental updates, which only extend the object are allowed. All systems are expected to handle these incremental updates gracefully. This means that a version 3.1.x message returned by the api must be accept by a 3.0.x client. The additional information contained by the api may be discarded. The same rules apply when a 3.1.x client talks to a 3.0.x api. The api will process the message according to the 3.0.x rules and extra information might be discarded. The client has to determine the correct endpoint versions to use. When the client will use a ComputationTemplate with version 3.x.x the corresponding websocket api will be ws://example.com/v3/computation. All other messages used in any further communication between the websocket-api and the client are also expected to be version 3.x.x. There is no possiblity to mix different versions. If a client wants to use a v4 api, he has to reconnect to the correct endpoint at ws://example.com/v4/computation The objects have been devided into three groups: - Long living object: ComputationTemplate, ComputationTask and ComputationResult - Wrappers: Computation - Message Types: CreateComputation and Result All long living objects are expected to be stored by clients and have version attribute on their top level of the json object, making it easy to get the information. Wrappers only exist during the communication between the client and the api and thus will not contain any version information, as it can be derived from the version of the api version they are being used with. Their only functionality is to group long living objects during a request. Messages Types are the messages used for the communication of the client with the websocket api. Like the wrappers they belong to a specific endpoint version and are also not versioned. Positive Consequences Providing version information allows api and the client to be updated independently. It also allows the objects being held by the client to be easily identified without the need to either store this information somewhere external, where is might get lost or require some method to identify it based on the attributes available. Negative Consequences The version needs to stored on all objects, which requires additional space and bandwidth. Also this information needs to be processed in the endpoints. But this in neglactable considered to the need of upgrading different systems of different third party users at once. Pros and Cons of the Options Versioning either only the endpoints would still cause the issue, that a client needs to keep track of which implicit version an object has, to make sure he picks the right endpoint. This might also lead to the fact, that one might try to send the data to the wrong endpoint, since it is not known where it should belong. Only versioning the endpoints would require to add a lot of version identification cold on the api side, which should be avoided. Between the last to options, the only difference is, that the actions wrappers are not being versioned. This tradeoff has been made due to the fact, that they should never be stored somewhere and that they are considered stable for one api version. Adding actions or changing the wrappers itself will cause a upgrade of the api version. Links","title":"JSON Object Versioning Rules"},{"location":"viplab3.0/versioning/#json-object-versioning-rules","text":"Status: proposed Deciders: Leon Kiefer, Per Pascal Seeland Date: 2020-05-14 Technical Story: https://github.com/VirtualProgrammingLab/documentation/issues/1","title":"JSON Object Versioning Rules"},{"location":"viplab3.0/versioning/#context-and-problem-statement","text":"The ViPLab Projects defines a set of JSON-objects, which are used in the different components of the project. Since ViPLab itself does not store any data, these objects have to be stored by third party systems. These will be, depending on the context they are used in either LMS (like ILIAS) or data repositories (like dataverse). There needs to be a way to identify the version of the different objects stored by the third party system to allow e.g. upgrading/migrating the different components.","title":"Context and Problem Statement"},{"location":"viplab3.0/versioning/#decision-drivers","text":"Provide a way to identify the version of the objects and also provide a path for e.g. upgrading the API endpoints used by those systems.","title":"Decision Drivers"},{"location":"viplab3.0/versioning/#considered-options","text":"Version all endpoints, but not the objects Version all objects, but not the endpoints Version parts of the objects and all of the endpoints. Version all objects and all of the endpoints.","title":"Considered Options"},{"location":"viplab3.0/versioning/#decision-outcome","text":"It has been decided to version all long living objects, and all endpoints. The reason for requiring all objects to have version tags is for consistency reasons. Endpoints will only accept objects versions of one major version. Breaking changes will require to define a new version. Incremental updates, which only extend the object are allowed. All systems are expected to handle these incremental updates gracefully. This means that a version 3.1.x message returned by the api must be accept by a 3.0.x client. The additional information contained by the api may be discarded. The same rules apply when a 3.1.x client talks to a 3.0.x api. The api will process the message according to the 3.0.x rules and extra information might be discarded. The client has to determine the correct endpoint versions to use. When the client will use a ComputationTemplate with version 3.x.x the corresponding websocket api will be ws://example.com/v3/computation. All other messages used in any further communication between the websocket-api and the client are also expected to be version 3.x.x. There is no possiblity to mix different versions. If a client wants to use a v4 api, he has to reconnect to the correct endpoint at ws://example.com/v4/computation The objects have been devided into three groups: - Long living object: ComputationTemplate, ComputationTask and ComputationResult - Wrappers: Computation - Message Types: CreateComputation and Result All long living objects are expected to be stored by clients and have version attribute on their top level of the json object, making it easy to get the information. Wrappers only exist during the communication between the client and the api and thus will not contain any version information, as it can be derived from the version of the api version they are being used with. Their only functionality is to group long living objects during a request. Messages Types are the messages used for the communication of the client with the websocket api. Like the wrappers they belong to a specific endpoint version and are also not versioned.","title":"Decision Outcome"},{"location":"viplab3.0/versioning/#positive-consequences","text":"Providing version information allows api and the client to be updated independently. It also allows the objects being held by the client to be easily identified without the need to either store this information somewhere external, where is might get lost or require some method to identify it based on the attributes available.","title":"Positive Consequences"},{"location":"viplab3.0/versioning/#negative-consequences","text":"The version needs to stored on all objects, which requires additional space and bandwidth. Also this information needs to be processed in the endpoints. But this in neglactable considered to the need of upgrading different systems of different third party users at once.","title":"Negative Consequences"},{"location":"viplab3.0/versioning/#pros-and-cons-of-the-options","text":"Versioning either only the endpoints would still cause the issue, that a client needs to keep track of which implicit version an object has, to make sure he picks the right endpoint. This might also lead to the fact, that one might try to send the data to the wrong endpoint, since it is not known where it should belong. Only versioning the endpoints would require to add a lot of version identification cold on the api side, which should be avoided. Between the last to options, the only difference is, that the actions wrappers are not being versioned. This tradeoff has been made due to the fact, that they should never be stored somewhere and that they are considered stable for one api version. Adding actions or changing the wrappers itself will cause a upgrade of the api version.","title":"Pros and Cons of the Options"},{"location":"viplab3.0/versioning/#links","text":"","title":"Links"}]}