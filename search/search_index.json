{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the Viplab documentation The documentation contains the ViPLab 3.0 documenation. If you need the documentation for ECS 2.x and Viplab 2.x, please checkout the ecs2 branch. mkdoc command mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"Welcome to the Viplab documentation"},{"location":"#welcome-to-the-viplab-documentation","text":"The documentation contains the ViPLab 3.0 documenation. If you need the documentation for ECS 2.x and Viplab 2.x, please checkout the ecs2 branch.","title":"Welcome to the Viplab documentation"},{"location":"#mkdoc-command","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs help - Print this help message.","title":"mkdoc command"},{"location":"viplab-3.0/","text":"ViPLab 3.0 Virtual programming laboratory for education and teaching at universities as well as executing docker images in the context of research data management. Clients (frontends) use the websocket-api to communicate to several backends (computation clients) working in a cluster. A computation client instance supports one or more language environments (e.g. 'C', 'Matlab'). This documentation describes the json-messages used by the different ViPLab components to fulfill all the various features of ViPLab. Terms (ViPLab specific) ViPLab virtual programming laboratory (for programming this term is more generic than NumLab (outdated)) NumLab legacy term for ViPLab (don't use it for new documentation) ViP ViPLab shortcut \"Virtuelles Programmierlabor\" (German project shortcut) CC computation client, also backend FC frontend client; has different views: teacher view or view of a researcher creating a new computation template student view or view of a researcher executing an existing computation client a system component interacting with the websocket-api , e.g. backends, frontends frontend launcher entrypoints for the user, that start the frontend, e.g. viplab-question-plugin-for-ilias or dataverse-viplab-extension computation a CC computes a Result of a Computation Task complementing a Computation Template ( Computation Task and - referenced - Computation Template being input, Result output of computation). Flow of information Describe who is sending which kind of message and gets what back Versioning rules Versioning rules Long living JSON messages Computation Template Computation Task Computation Result Wrapper Computation Message Types CreateComputation Result System status (not implemented yet) Computation Interrupt (not implemented yet)","title":"Index"},{"location":"viplab-3.0/#viplab-30","text":"Virtual programming laboratory for education and teaching at universities as well as executing docker images in the context of research data management. Clients (frontends) use the websocket-api to communicate to several backends (computation clients) working in a cluster. A computation client instance supports one or more language environments (e.g. 'C', 'Matlab'). This documentation describes the json-messages used by the different ViPLab components to fulfill all the various features of ViPLab.","title":"ViPLab 3.0"},{"location":"viplab-3.0/#terms-viplab-specific","text":"ViPLab virtual programming laboratory (for programming this term is more generic than NumLab (outdated)) NumLab legacy term for ViPLab (don't use it for new documentation) ViP ViPLab shortcut \"Virtuelles Programmierlabor\" (German project shortcut) CC computation client, also backend FC frontend client; has different views: teacher view or view of a researcher creating a new computation template student view or view of a researcher executing an existing computation client a system component interacting with the websocket-api , e.g. backends, frontends frontend launcher entrypoints for the user, that start the frontend, e.g. viplab-question-plugin-for-ilias or dataverse-viplab-extension computation a CC computes a Result of a Computation Task complementing a Computation Template ( Computation Task and - referenced - Computation Template being input, Result output of computation).","title":"Terms (ViPLab specific)"},{"location":"viplab-3.0/#flow-of-information","text":"Describe who is sending which kind of message and gets what back","title":"Flow of information"},{"location":"viplab-3.0/#versioning-rules","text":"Versioning rules","title":"Versioning rules"},{"location":"viplab-3.0/#long-living-json-messages","text":"Computation Template Computation Task Computation Result","title":"Long living JSON messages"},{"location":"viplab-3.0/#wrapper","text":"Computation","title":"Wrapper"},{"location":"viplab-3.0/#message-types","text":"CreateComputation Result System status (not implemented yet) Computation Interrupt (not implemented yet)","title":"Message Types"},{"location":"viplab-3.0/computation/","text":"Computation JSON Message A computation represents the combination of a computation template and a corresponding computation task . It is the input of any backend. The JSON message of a computation is very similar to a computation template , so the interested reader is also referred to its documentation . Example (informal) Note: // with text following until EOL is a comment, which is not covered by the JSON spec, and should not be contained in message sends in real; but nevertheless it would help, if JSON parsers could just ignore them. { \"identifier\" : \"4598393-95bf-409a-98a5-ee375982c3e\", // uuid, created by websocket api \"environment\" : \"C\", // important for interpreting configuration \"files\" : // must: at least one array element [ { \"identifier\": \"22483f42-95bf-984a-98a5-ee9485c85c3e\", // uuid from template \"path\" : \"code.c\" // filename on backend \"parts\" : // must: at least one array element [ { \"identifier\": \"preamble\", // identifier from template \"access\" : \"visible\", // access from template \"content\" : \"I2luY2x1ZGUgPHN0ZGlvLmg-Cg\" // source (base64url encoded) // decoded: #include <stdio.h>\\n }, { \"identifier\": \"codeFromStudent\", // identifier from template \"access\" : \"modifiable\", \"content\" : \"dm9pZCBiYXIoKSB7IHByaW50ZigiYmFyIQoiKTsKfQo\" // content from task // decoded: void bar() { printf(\\\"bar!\\\\n\\\");\\n}\\n }, { \"identifier\": \"postscript\", // identifier from template \"access\" : \"visible\", \"content\" : \"aW50IG1haW4oKSB7IGJhcigpOyByZXR1cm4gMDsgfQ\" // source // decoded: int main() { bar(); return 0; } } ] // parts[] } ], // files[] \"configuration\" : { \"compiling.compiler\" : \"gcc\", \"compiling.flags\" : \"-O2 -Wall\" \"checking.sources\" : [\"codeFromStudent\"], // identifier to parts \"checking.forbiddenCalls\": \"system execve\" // forbidden call names separated by WS \"linking.flags\" : \"-lm\" \"running.commandLineArguments\" : \"--stepwidth 0.5\" // mustache template with injected arguments } } Explaining the JSON Format Key [--Subkey] Type (a default is marked by italics ) Opt / Must Description Comment identifier string (UUID) must the identifier of this computation is generated by the websocket api environment one of {\"C\", \"C++\", \"Java\", \"Matlab\", \"Octave\", \"Container\", \"DuMuX\"} must Specifies the environment used for the Computation. It defines language, runtime, libraries and tools files [ {...}, {...}, ... ] must array containing File objects : there has to be at least one element configuration struct opt/must (depends on environment) Environment specific configurations Different phases can be configured like compiling, checking (for legal function calls in source code), ... configuration --compiling.sources [FILE_ID, FILE_ID, ...] must Array of identifiers of JSON File objects . Explicit compilation (only referenced sources will be compiled). for C, C++, Java configuration --compiling.compiler string must compiler to be used, e.g. \"gcc\" for C, C++ configuration --compiling.flags string must for C, C++ ; optional for Java CFLAGS for C/C++ ; compile flags for Java e.g. \"gcc\" for C/C++ ; \"-O2\" or \"\" for Java configuration --checking.sources [PART_ID, PART_ID, ...] must if checking should be performed array of identifiers of to be checked sources; given by parts[]{PART_ID} (see below ) for Matlab, Octave, C, Java configuration --checking.allowedCalls string must if checking should be performed for Matlab/Octave : allowed call names separated by WS; only idents (no braces, no func args) for Java : allowed call name expressions separated by WS for Java semantics see Java checking semantics . configuration --checking.forbiddenCalls string must if checking should be performed for C : forbidden call names separated by WS; only idents (no braces, no func args) for Java : forbidden call name expressions separated by WS for C semantics see C checking semantics ); for Java semantics see Java checking semantics . configuration --linking.flags string must LFLAGS for C, C++ ; e.g. \"\" configuration --running.stdinFilename FILE_ID must the file identifier that is passed to Matlab/Octave via standard-in configuration --running.timelimitInSeconds int opt CPU time limit for all environments ; for semantics see Notes to \"timelimitInSeconds\" . configuration --running.commandLineArguments string opt for C, C++, Java : arguments given to main() function; for DuMuX, Container : additional command line args configuration --running.flags string opt flags given to JVM for Java configuration --running.mainClass string opt (if unique) / must (if not unique) class containing \"public static void main(String[] args) {\" for Java : \"args\" may be another name. If main function is unique, its correct class should be detected automatically. configuration --running.executable string must name of executable to run (as in backend file system) for DuMuX configuration --running.entrypoint string must executable to run inside the container for Container configuration --running.observe_stderr bool ( false ) opt if true, transfer intermediate stderr Results for DuMuX, Container configuration --resources.image url must location of the image to be executed for Container ; has to be a tar configuration --resources.volume string must path in the container where data is placed for Container configuration --resources.memory string opt ( 64mb ) memory limit for the container for Container configuration --resources.numCPUs int opt number of CPUs for the container for Container JSON objects in files An object in array files[] has the following members: Key Type (an enum default is marked by italics ) Opt / Must Description Comment identifier string (UUID) must reference to a computation template file path string must absolute path to file It is not allowed to start with '/' parts [{...}, {...}, ...] must array containing part objects . There has to be at least one. JSON objects in parts An object in array parts[] has the following members: Key Type (an enum default is marked by italics ) Opt / Must Description Comment identifier string must reference to a computation template part access one of {\"invisible\", \"visible\", \"modifiable\", \"template\"} must the access level of this part equals to the access level of this part in the computation template content string must base64url-encoded source code","title":"Computation JSON Message"},{"location":"viplab-3.0/computation/#computation-json-message","text":"A computation represents the combination of a computation template and a corresponding computation task . It is the input of any backend. The JSON message of a computation is very similar to a computation template , so the interested reader is also referred to its documentation .","title":"Computation JSON Message"},{"location":"viplab-3.0/computation/#example-informal","text":"Note: // with text following until EOL is a comment, which is not covered by the JSON spec, and should not be contained in message sends in real; but nevertheless it would help, if JSON parsers could just ignore them. { \"identifier\" : \"4598393-95bf-409a-98a5-ee375982c3e\", // uuid, created by websocket api \"environment\" : \"C\", // important for interpreting configuration \"files\" : // must: at least one array element [ { \"identifier\": \"22483f42-95bf-984a-98a5-ee9485c85c3e\", // uuid from template \"path\" : \"code.c\" // filename on backend \"parts\" : // must: at least one array element [ { \"identifier\": \"preamble\", // identifier from template \"access\" : \"visible\", // access from template \"content\" : \"I2luY2x1ZGUgPHN0ZGlvLmg-Cg\" // source (base64url encoded) // decoded: #include <stdio.h>\\n }, { \"identifier\": \"codeFromStudent\", // identifier from template \"access\" : \"modifiable\", \"content\" : \"dm9pZCBiYXIoKSB7IHByaW50ZigiYmFyIQoiKTsKfQo\" // content from task // decoded: void bar() { printf(\\\"bar!\\\\n\\\");\\n}\\n }, { \"identifier\": \"postscript\", // identifier from template \"access\" : \"visible\", \"content\" : \"aW50IG1haW4oKSB7IGJhcigpOyByZXR1cm4gMDsgfQ\" // source // decoded: int main() { bar(); return 0; } } ] // parts[] } ], // files[] \"configuration\" : { \"compiling.compiler\" : \"gcc\", \"compiling.flags\" : \"-O2 -Wall\" \"checking.sources\" : [\"codeFromStudent\"], // identifier to parts \"checking.forbiddenCalls\": \"system execve\" // forbidden call names separated by WS \"linking.flags\" : \"-lm\" \"running.commandLineArguments\" : \"--stepwidth 0.5\" // mustache template with injected arguments } }","title":"Example (informal)"},{"location":"viplab-3.0/computation/#explaining-the-json-format","text":"Key [--Subkey] Type (a default is marked by italics ) Opt / Must Description Comment identifier string (UUID) must the identifier of this computation is generated by the websocket api environment one of {\"C\", \"C++\", \"Java\", \"Matlab\", \"Octave\", \"Container\", \"DuMuX\"} must Specifies the environment used for the Computation. It defines language, runtime, libraries and tools files [ {...}, {...}, ... ] must array containing File objects : there has to be at least one element configuration struct opt/must (depends on environment) Environment specific configurations Different phases can be configured like compiling, checking (for legal function calls in source code), ... configuration --compiling.sources [FILE_ID, FILE_ID, ...] must Array of identifiers of JSON File objects . Explicit compilation (only referenced sources will be compiled). for C, C++, Java configuration --compiling.compiler string must compiler to be used, e.g. \"gcc\" for C, C++ configuration --compiling.flags string must for C, C++ ; optional for Java CFLAGS for C/C++ ; compile flags for Java e.g. \"gcc\" for C/C++ ; \"-O2\" or \"\" for Java configuration --checking.sources [PART_ID, PART_ID, ...] must if checking should be performed array of identifiers of to be checked sources; given by parts[]{PART_ID} (see below ) for Matlab, Octave, C, Java configuration --checking.allowedCalls string must if checking should be performed for Matlab/Octave : allowed call names separated by WS; only idents (no braces, no func args) for Java : allowed call name expressions separated by WS for Java semantics see Java checking semantics . configuration --checking.forbiddenCalls string must if checking should be performed for C : forbidden call names separated by WS; only idents (no braces, no func args) for Java : forbidden call name expressions separated by WS for C semantics see C checking semantics ); for Java semantics see Java checking semantics . configuration --linking.flags string must LFLAGS for C, C++ ; e.g. \"\" configuration --running.stdinFilename FILE_ID must the file identifier that is passed to Matlab/Octave via standard-in configuration --running.timelimitInSeconds int opt CPU time limit for all environments ; for semantics see Notes to \"timelimitInSeconds\" . configuration --running.commandLineArguments string opt for C, C++, Java : arguments given to main() function; for DuMuX, Container : additional command line args configuration --running.flags string opt flags given to JVM for Java configuration --running.mainClass string opt (if unique) / must (if not unique) class containing \"public static void main(String[] args) {\" for Java : \"args\" may be another name. If main function is unique, its correct class should be detected automatically. configuration --running.executable string must name of executable to run (as in backend file system) for DuMuX configuration --running.entrypoint string must executable to run inside the container for Container configuration --running.observe_stderr bool ( false ) opt if true, transfer intermediate stderr Results for DuMuX, Container configuration --resources.image url must location of the image to be executed for Container ; has to be a tar configuration --resources.volume string must path in the container where data is placed for Container configuration --resources.memory string opt ( 64mb ) memory limit for the container for Container configuration --resources.numCPUs int opt number of CPUs for the container for Container","title":"Explaining the JSON Format"},{"location":"viplab-3.0/computation/#json-objects-in-files","text":"An object in array files[] has the following members: Key Type (an enum default is marked by italics ) Opt / Must Description Comment identifier string (UUID) must reference to a computation template file path string must absolute path to file It is not allowed to start with '/' parts [{...}, {...}, ...] must array containing part objects . There has to be at least one.","title":"JSON objects in files"},{"location":"viplab-3.0/computation/#json-objects-in-parts","text":"An object in array parts[] has the following members: Key Type (an enum default is marked by italics ) Opt / Must Description Comment identifier string must reference to a computation template part access one of {\"invisible\", \"visible\", \"modifiable\", \"template\"} must the access level of this part equals to the access level of this part in the computation template content string must base64url-encoded source code","title":"JSON objects in parts"},{"location":"viplab-3.0/computation_result/","text":"Computation Result JSON Message A computation result is the result of a computation . It always contains the stdout and stderr of of the computation. In addition, it may containIt contains arbitrary information contained in one or more artifacts. Artifacts are information about the success or failure (showing details for students) and result objects, like files, images, links, etc. Example (informal) { \"identifier\" : \"86165eea-14df-4a76-805a-09b21441cbf7\", \"version\" : \"3.0.0\" \"computation\" : \"4598393-95bf-409a-98a5-ee375982c3e\", // uuid of corresponding computation \"status\" : \"final\", // final and intermediate, \"timestamp\" : // creation time of this message in ISO-8601 \"output\" : { \"stdout\" : \"\", // base64url encoded content, mandatory, even if empty \"stderr\" : \"\", // base64url encoded content, mandatory, even if empty }, \"artifacts\" : [ // additional artifacts (files, notifications, etc) { \"type\": \"notifications\", // each artifact requires a type and \"identifier\" : \"1dd479d9-c9bd-4711-aed8-5bfb3ec5fcfa\", // and an identifier \"summary\" : \"(C chain)v1.9 failed.\", \"elements\" : [ { \"severity\" : \"info\", \"type\" : \"compiler\", \"message\" : \"source_0.c: In function \\u2018trapez\\u2019:\", \"output\" : { \"source\" : \"stderr\", \"extract\" : \"source_0.c: In function \\u2018trapez\\u2019:\", \"begin\" : 0, \"end\" : 37 } }, { \"severity\" : \"warning\", \"type\" : \"compiler\", \"message\" : \"source_0.c:21:10: warning: unused variable \\u2018x\\u2019 [-Wunused-variable]\", \"origin\" : { \"source\" : \"parts://7a1808d0-c997-4e28-acdf-bfda3ce70960\", //code the student can edit \"extract\" : \" double x = 0;\", \"begin\" : 406, \"end\" : 421, \"line\" : 15, \"col\" : 10 }, \"output\" : { \"source\" : \"stderr\", \"extract\" : \"source_0.c:21:10: warning: unused variable \\u2018x\\u2019 [-Wunused-variable]\", \"begin\" : 38, \"end\" : 108 } }, { \"severity\" : \"error\", \"type\" : \"callcheck\", \"message\" : \"[C function filtering] Function call not allowed:\\n\\\"system\\\"; original source: codeFromStudent, line (corrected): 20, col: 3\\nForbidden calls:\\nsystem.\\n\", \"origin\" : { \"elementID\" : \"parts://7a1808d0-c997-4e28-acdf-bfda3ce70960\", \"extract\" : \" system(\\\"/bin/rm /tmp/foo.txt\\\"); // illegal call (should be catched by checker)\", \"begin\" : 325, \"end\" : 405, \"line\" : 14, \"col\" : 3 } } ] }, { \"type\" : \"file\", \"identifier\" : \"de762095-6cd2-439f-80eb-313e85d33869\", \"MIMEtype\": \"image/png\", \"path\" : \"/images/img.png\", \"content\": \"\" // base64url encoded content }, { \"type\" : \"file\", \"identifier\" : \"10516761-d937-4ba4-a82f-dc2847d45032\", \"MIMEtype\": \"image/png\", \"path\" : \"/images/img2.png\", \"content\": \"\" // base64url encoded content }, { \"type\" : \"s3file\", \"identifier\" : \"cc3c1cf9-c02d-4694-902c-93c298d68c51\", \"MIMEtype\": \"application/gzip\", \"path\" : \"/largefile/result.tar.gz\", \"url\": \"https://s3.temporary.file.url/result.tar.gz\", \"size\" : 123456789, \"hash\" : \"sha512:hashcode_of_file\" } ] } Result Artifacts Each computation ends with a ComputationResult containing at least the output generated on stdout and stderr. All additional information about an executed computation like created files is contained inside an arbitrary number of artifacts. Each artifact containes at least an identifier and a type describing the content. The main purposes of this concept is to allow a standard way how to extend what information can be created and returned during a computation. artifact types In addition to the two mandatory fields for each artifact, each artifact has a specific set of additional fields. Currently, the following list of artifact types are defined with a given set fields: file s3file notifications Specification of the JSON formats ComputationResult JSON object Key Value Type Opt / Must Description Comment identifier string (uuid) must unique ComputationResult ID version string must version of the json specification used. The major version must match the version of the ComputationTask computation string (uuid) must identifier of the computation that is responsible for this result status One of {\"final\", \"intermediate\"} must \"final\": last Result of computation \"intermediate\": more Results expected If there is only one Result, it status should be \"final\". If there are multiple Results, status of all before \"final\" should be \"intermediate\". timestamp ISO-8601 datetimeString must Timestamp when this result is generated. Need for ordering of intermediate result output output json object must an object containing stdout and stderr artifacts array of artifact objects opt array of objects containing artifacts described at Artifacts output JSON object format Key Value Type Opt / Must Description Comment stdout string must the stdout of the exection, base64url encode must be provided even if empty stderr string must the stderr of the exection, base64url encode must be provided even if empty artifact JSON objects The base artifact object that needs to be extended all other artifacts defined. artifact JSON object Key Value Type Opt / Must Description Comment identifier string (uuid) must unique id for this artifact type string must the type of this artifact The type may be used by the client to determine how to display the artifact file artifact JSON object Key Value Type Opt / Must Description Comment path string must the path in which the content had been created during the computation MIMEtype string must MIMEtype of the content content string must base64url encoded content of the file In Viplab 2.0, the following MIMEtypes where allowed. They contain some custom defined types, which need to be keep supported: text/plain text/html text/uri-list\": links to websides to be presented in SC image/png\" application/x-vgf: generated graphics output in 'ViP graphics format' application/x-vgf3: generated graphics output in 'ViP graphics format 3D' application/x-vgfc: generated graphics output in 'ViP graphics format contour plot'.| s3file artifact JSON object Key Value Type Opt / Must Description Comment path string must the path in which the content had been created during the computation MIMEtype string must MIMEtype of the content url string must url on which the content of the file can be retrieved size int must size in bytes of the file stored on the external system hash string must the hash of the remote file in the format usedhash:hashcode_of_file, e.g. sha512:a12355.... notifications artifact JSON object Each notifications artifact contains at least one summary and unlimited number of notification elemets providing more details Key Value Type Opt / Must Description Comment summary string must summary of all info_element's: e.g. one warning, one error may have a summary \"An error occured.\" E.g.: \"[Error] Backend has detected an error: no result!\" or \"Success!\" notifications array of notification objects opt the more detailed notification objects for this notifications object notification JSON object Key Value Type Opt / Must Description Comment severity string must One of {\"error\", \"warning\", \"info\"} type string must One of {\"system\", \"chain\", \"output\", \"callcheck\", \"interpreter\", \"compiler\", \"linker\", \"executable\"} For all chains: {\"system, \"chain\", \"output\"}; for Octave/Matlab: {\"callcheck\", \"interpreter\"}; for C: {\"callcheck\", \"compiler\", \"linker\", \"executable\"}; for Java: {\"callcheck\", \"compiler\", \"executable\"}; for DuMuX: {\"executable\"} If type equals \"system\", whole Result if of interest for a bug report. message string must summary of one message to the user; it should not contain wrong error locations (file, line, col). Together with \"source\"/\"line\" or \"col\" (containing corrected locations) it should give the most interesting info. may be empty string (',' in optional location_part) origin notification origin json object opt If the message can be linked to a part from the ComputationTask, the original position can be found inside only allowed if \"type\" in {\"compiler\", \"interpreter\", \"callcheck\"} output notification output json object opt The position and text from either stdout or stderr (see Output ) which caused notification. Notes: There are error messages containing multiple error triggering locations. This leads to multiple info_elements containing same \"message\" and \"output\", but different \"source\" objects. Note: another way would be to specify \"sources\":[{},...] as alternative to \"source\":{}. \"type\": \"fatal\" may be introduced later Compiler output may contain multiple error positions; only the first one should be extracted. notification origin JSON object Key Value Type Opt / Must Description Comment source string must identifier of part from ComputationTask which has triggered (error/warning/...) message extract string must Part of referenced part. Extracted from message triggering input. begin unsigned int must Offset of extract into ... end unsigned int must ... referenced part: C-like (zero-based). line 1..uint_max must Location of error/warning ... col 1..uint_max opt ... referring to position in triggering part. It is optional, since there are messages containing line info only notification output JSON object Key Value Type Opt / Must Description Comment source string must part of Output , which contained the message extract string must Part of referenced output. Extracted from message triggering input. begin unsigned int must Offset of extract into ... end unsigned int must ... referenced element: C-like (zero-based). Leftovers from Viplab 2.0 might be converted later, just keep around as inspration Key Value Type Opt / Must Description Comment startTime datetimeString must May be local or universal time. Just after getting a Solution. duration durationString must e.g. \"128ms\" Computation duration time since startTime (increases with each intermediate Result). finishTime datetimeString must, iff status == \"final\" May be local or universal time. Just before posting final Result. CC_versionLong string must CC_version string must chain_version string must technicalInfo struct must technicalInfo/host string must CC host technicalInfo/PID unsigned must CC PID technicalInfo/<key> <val_type> opt <key>: locally unique, <val_type>: arbitrary type For allowing further key/val pairs if there should be a need.","title":"Computation Result JSON Message"},{"location":"viplab-3.0/computation_result/#computation-result-json-message","text":"A computation result is the result of a computation . It always contains the stdout and stderr of of the computation. In addition, it may containIt contains arbitrary information contained in one or more artifacts. Artifacts are information about the success or failure (showing details for students) and result objects, like files, images, links, etc.","title":"Computation Result JSON Message"},{"location":"viplab-3.0/computation_result/#example-informal","text":"{ \"identifier\" : \"86165eea-14df-4a76-805a-09b21441cbf7\", \"version\" : \"3.0.0\" \"computation\" : \"4598393-95bf-409a-98a5-ee375982c3e\", // uuid of corresponding computation \"status\" : \"final\", // final and intermediate, \"timestamp\" : // creation time of this message in ISO-8601 \"output\" : { \"stdout\" : \"\", // base64url encoded content, mandatory, even if empty \"stderr\" : \"\", // base64url encoded content, mandatory, even if empty }, \"artifacts\" : [ // additional artifacts (files, notifications, etc) { \"type\": \"notifications\", // each artifact requires a type and \"identifier\" : \"1dd479d9-c9bd-4711-aed8-5bfb3ec5fcfa\", // and an identifier \"summary\" : \"(C chain)v1.9 failed.\", \"elements\" : [ { \"severity\" : \"info\", \"type\" : \"compiler\", \"message\" : \"source_0.c: In function \\u2018trapez\\u2019:\", \"output\" : { \"source\" : \"stderr\", \"extract\" : \"source_0.c: In function \\u2018trapez\\u2019:\", \"begin\" : 0, \"end\" : 37 } }, { \"severity\" : \"warning\", \"type\" : \"compiler\", \"message\" : \"source_0.c:21:10: warning: unused variable \\u2018x\\u2019 [-Wunused-variable]\", \"origin\" : { \"source\" : \"parts://7a1808d0-c997-4e28-acdf-bfda3ce70960\", //code the student can edit \"extract\" : \" double x = 0;\", \"begin\" : 406, \"end\" : 421, \"line\" : 15, \"col\" : 10 }, \"output\" : { \"source\" : \"stderr\", \"extract\" : \"source_0.c:21:10: warning: unused variable \\u2018x\\u2019 [-Wunused-variable]\", \"begin\" : 38, \"end\" : 108 } }, { \"severity\" : \"error\", \"type\" : \"callcheck\", \"message\" : \"[C function filtering] Function call not allowed:\\n\\\"system\\\"; original source: codeFromStudent, line (corrected): 20, col: 3\\nForbidden calls:\\nsystem.\\n\", \"origin\" : { \"elementID\" : \"parts://7a1808d0-c997-4e28-acdf-bfda3ce70960\", \"extract\" : \" system(\\\"/bin/rm /tmp/foo.txt\\\"); // illegal call (should be catched by checker)\", \"begin\" : 325, \"end\" : 405, \"line\" : 14, \"col\" : 3 } } ] }, { \"type\" : \"file\", \"identifier\" : \"de762095-6cd2-439f-80eb-313e85d33869\", \"MIMEtype\": \"image/png\", \"path\" : \"/images/img.png\", \"content\": \"\" // base64url encoded content }, { \"type\" : \"file\", \"identifier\" : \"10516761-d937-4ba4-a82f-dc2847d45032\", \"MIMEtype\": \"image/png\", \"path\" : \"/images/img2.png\", \"content\": \"\" // base64url encoded content }, { \"type\" : \"s3file\", \"identifier\" : \"cc3c1cf9-c02d-4694-902c-93c298d68c51\", \"MIMEtype\": \"application/gzip\", \"path\" : \"/largefile/result.tar.gz\", \"url\": \"https://s3.temporary.file.url/result.tar.gz\", \"size\" : 123456789, \"hash\" : \"sha512:hashcode_of_file\" } ] }","title":"Example (informal)"},{"location":"viplab-3.0/computation_result/#result-artifacts","text":"Each computation ends with a ComputationResult containing at least the output generated on stdout and stderr. All additional information about an executed computation like created files is contained inside an arbitrary number of artifacts. Each artifact containes at least an identifier and a type describing the content. The main purposes of this concept is to allow a standard way how to extend what information can be created and returned during a computation.","title":"Result Artifacts"},{"location":"viplab-3.0/computation_result/#artifact-types","text":"In addition to the two mandatory fields for each artifact, each artifact has a specific set of additional fields. Currently, the following list of artifact types are defined with a given set fields: file s3file notifications","title":"artifact types"},{"location":"viplab-3.0/computation_result/#specification-of-the-json-formats","text":"","title":"Specification of the JSON formats"},{"location":"viplab-3.0/computation_result/#computationresult-json-object","text":"Key Value Type Opt / Must Description Comment identifier string (uuid) must unique ComputationResult ID version string must version of the json specification used. The major version must match the version of the ComputationTask computation string (uuid) must identifier of the computation that is responsible for this result status One of {\"final\", \"intermediate\"} must \"final\": last Result of computation \"intermediate\": more Results expected If there is only one Result, it status should be \"final\". If there are multiple Results, status of all before \"final\" should be \"intermediate\". timestamp ISO-8601 datetimeString must Timestamp when this result is generated. Need for ordering of intermediate result output output json object must an object containing stdout and stderr artifacts array of artifact objects opt array of objects containing artifacts described at Artifacts","title":"ComputationResult JSON object"},{"location":"viplab-3.0/computation_result/#output-json-object-format","text":"Key Value Type Opt / Must Description Comment stdout string must the stdout of the exection, base64url encode must be provided even if empty stderr string must the stderr of the exection, base64url encode must be provided even if empty","title":"output JSON object format"},{"location":"viplab-3.0/computation_result/#artifact-json-objects","text":"The base artifact object that needs to be extended all other artifacts defined.","title":"artifact JSON objects"},{"location":"viplab-3.0/computation_result/#artifact-json-object","text":"Key Value Type Opt / Must Description Comment identifier string (uuid) must unique id for this artifact type string must the type of this artifact The type may be used by the client to determine how to display the artifact","title":"artifact JSON object"},{"location":"viplab-3.0/computation_result/#file-artifact-json-object","text":"Key Value Type Opt / Must Description Comment path string must the path in which the content had been created during the computation MIMEtype string must MIMEtype of the content content string must base64url encoded content of the file In Viplab 2.0, the following MIMEtypes where allowed. They contain some custom defined types, which need to be keep supported: text/plain text/html text/uri-list\": links to websides to be presented in SC image/png\" application/x-vgf: generated graphics output in 'ViP graphics format' application/x-vgf3: generated graphics output in 'ViP graphics format 3D' application/x-vgfc: generated graphics output in 'ViP graphics format contour plot'.|","title":"file artifact JSON object"},{"location":"viplab-3.0/computation_result/#s3file-artifact-json-object","text":"Key Value Type Opt / Must Description Comment path string must the path in which the content had been created during the computation MIMEtype string must MIMEtype of the content url string must url on which the content of the file can be retrieved size int must size in bytes of the file stored on the external system hash string must the hash of the remote file in the format usedhash:hashcode_of_file, e.g. sha512:a12355....","title":"s3file artifact JSON object"},{"location":"viplab-3.0/computation_result/#notifications-artifact-json-object","text":"Each notifications artifact contains at least one summary and unlimited number of notification elemets providing more details Key Value Type Opt / Must Description Comment summary string must summary of all info_element's: e.g. one warning, one error may have a summary \"An error occured.\" E.g.: \"[Error] Backend has detected an error: no result!\" or \"Success!\" notifications array of notification objects opt the more detailed notification objects for this notifications object","title":"notifications artifact JSON object"},{"location":"viplab-3.0/computation_result/#notification-json-object","text":"Key Value Type Opt / Must Description Comment severity string must One of {\"error\", \"warning\", \"info\"} type string must One of {\"system\", \"chain\", \"output\", \"callcheck\", \"interpreter\", \"compiler\", \"linker\", \"executable\"} For all chains: {\"system, \"chain\", \"output\"}; for Octave/Matlab: {\"callcheck\", \"interpreter\"}; for C: {\"callcheck\", \"compiler\", \"linker\", \"executable\"}; for Java: {\"callcheck\", \"compiler\", \"executable\"}; for DuMuX: {\"executable\"} If type equals \"system\", whole Result if of interest for a bug report. message string must summary of one message to the user; it should not contain wrong error locations (file, line, col). Together with \"source\"/\"line\" or \"col\" (containing corrected locations) it should give the most interesting info. may be empty string (',' in optional location_part) origin notification origin json object opt If the message can be linked to a part from the ComputationTask, the original position can be found inside only allowed if \"type\" in {\"compiler\", \"interpreter\", \"callcheck\"} output notification output json object opt The position and text from either stdout or stderr (see Output ) which caused notification. Notes: There are error messages containing multiple error triggering locations. This leads to multiple info_elements containing same \"message\" and \"output\", but different \"source\" objects. Note: another way would be to specify \"sources\":[{},...] as alternative to \"source\":{}. \"type\": \"fatal\" may be introduced later Compiler output may contain multiple error positions; only the first one should be extracted.","title":"notification JSON object"},{"location":"viplab-3.0/computation_result/#notification-origin-json-object","text":"Key Value Type Opt / Must Description Comment source string must identifier of part from ComputationTask which has triggered (error/warning/...) message extract string must Part of referenced part. Extracted from message triggering input. begin unsigned int must Offset of extract into ... end unsigned int must ... referenced part: C-like (zero-based). line 1..uint_max must Location of error/warning ... col 1..uint_max opt ... referring to position in triggering part. It is optional, since there are messages containing line info only","title":"notification origin JSON object"},{"location":"viplab-3.0/computation_result/#notification-output-json-object","text":"Key Value Type Opt / Must Description Comment source string must part of Output , which contained the message extract string must Part of referenced output. Extracted from message triggering input. begin unsigned int must Offset of extract into ... end unsigned int must ... referenced element: C-like (zero-based).","title":"notification output JSON object"},{"location":"viplab-3.0/computation_result/#leftovers-from-viplab-20","text":"might be converted later, just keep around as inspration Key Value Type Opt / Must Description Comment startTime datetimeString must May be local or universal time. Just after getting a Solution. duration durationString must e.g. \"128ms\" Computation duration time since startTime (increases with each intermediate Result). finishTime datetimeString must, iff status == \"final\" May be local or universal time. Just before posting final Result. CC_versionLong string must CC_version string must chain_version string must technicalInfo struct must technicalInfo/host string must CC host technicalInfo/PID unsigned must CC PID technicalInfo/<key> <val_type> opt <key>: locally unique, <val_type>: arbitrary type For allowing further key/val pairs if there should be a need.","title":"Leftovers from Viplab 2.0"},{"location":"viplab-3.0/computation_task/","text":"Computation Task JSON Message A computation task is the result of a possibly manipulated computation template . It contains the changes made on the template. Together with the template, a computation task forms a computation that is sent to the backend. In the context of a learning environment, a computation task can be seen as a Solution . Example (informal) { \"template\" : \"11483f23-95bf-424a-98a5-ee5868c85c3e\", // uuid of corresponding computation template \"arguments\" : { \"__STEPWIDTH__\" : \"0.5\" // parameter values from template, filled out by frontend }, \"metadata\" : { \"comment\" : \"Die war aber schwer!\", }, \"parts\" : [ { \"identifier\": \"codeFromStudent\", // must: identifier of template part that has changed \"content\" : \"dm9pZCBiYXIoKSB7IHByaW50ZigiYmFyIQoiKTsKfQo\" // changed source from user // decoded: void bar() { printf(\\\"bar!\\\\n\\\");\\n}\\n // other fields defining this (text) element must *not* be repeated here. } // unchanged elements needn't be repeated here ] } Explaining the JSON Format Key [--Subkey] Type Opt / Must Description Comment AS template string (UUID) must computation template identifier arguments {PARAM_ID: value, ..., PARAM_ID: value} opt arguments of, e.g., configuration.commandLineArguments extracted by the frontend see computation template metadata struct opt contains information for frontend metadata --comment string opt comment from user implemented in frontend? parts [{...}, {...}, ...] opt array containing modified part objects . Only identifier - and content -attributes are allowed. Only \"modifiable\" or \"template\" parts can be referenced here (see access -attribute). The frontend creates the content for \"template\" parts. See notes . Notes for template parts The frontend will encode parts with access -value \"template\" as JSON messages with the following structure: { \"PARAM_ID1\" : \"value\", \"PARAM_ID2\" : \"value_2\", ... \"PARAM_IDn\" : \"value_n\" } PARAM_ID is the reference (key) to a parameter name inside the mustache template. \"value\" is the selected value of the user in the frontend. Evaluation Task The feature of ViPLab to automatically evaluate student code (correction service) is still possible in ViPLab 3.0. The code needed for evaluation is send to the correction server as a JSON message with the same structure as a Computation Task . The only difference is, that here all parts can be replaced, regardless of there access -settings.","title":"Computation Task JSON Message"},{"location":"viplab-3.0/computation_task/#computation-task-json-message","text":"A computation task is the result of a possibly manipulated computation template . It contains the changes made on the template. Together with the template, a computation task forms a computation that is sent to the backend. In the context of a learning environment, a computation task can be seen as a Solution .","title":"Computation Task JSON Message"},{"location":"viplab-3.0/computation_task/#example-informal","text":"{ \"template\" : \"11483f23-95bf-424a-98a5-ee5868c85c3e\", // uuid of corresponding computation template \"arguments\" : { \"__STEPWIDTH__\" : \"0.5\" // parameter values from template, filled out by frontend }, \"metadata\" : { \"comment\" : \"Die war aber schwer!\", }, \"parts\" : [ { \"identifier\": \"codeFromStudent\", // must: identifier of template part that has changed \"content\" : \"dm9pZCBiYXIoKSB7IHByaW50ZigiYmFyIQoiKTsKfQo\" // changed source from user // decoded: void bar() { printf(\\\"bar!\\\\n\\\");\\n}\\n // other fields defining this (text) element must *not* be repeated here. } // unchanged elements needn't be repeated here ] }","title":"Example (informal)"},{"location":"viplab-3.0/computation_task/#explaining-the-json-format","text":"Key [--Subkey] Type Opt / Must Description Comment AS template string (UUID) must computation template identifier arguments {PARAM_ID: value, ..., PARAM_ID: value} opt arguments of, e.g., configuration.commandLineArguments extracted by the frontend see computation template metadata struct opt contains information for frontend metadata --comment string opt comment from user implemented in frontend? parts [{...}, {...}, ...] opt array containing modified part objects . Only identifier - and content -attributes are allowed. Only \"modifiable\" or \"template\" parts can be referenced here (see access -attribute). The frontend creates the content for \"template\" parts. See notes .","title":"Explaining the JSON Format"},{"location":"viplab-3.0/computation_task/#notes-for-template-parts","text":"The frontend will encode parts with access -value \"template\" as JSON messages with the following structure: { \"PARAM_ID1\" : \"value\", \"PARAM_ID2\" : \"value_2\", ... \"PARAM_IDn\" : \"value_n\" } PARAM_ID is the reference (key) to a parameter name inside the mustache template. \"value\" is the selected value of the user in the frontend.","title":"Notes for template parts"},{"location":"viplab-3.0/computation_task/#evaluation-task","text":"The feature of ViPLab to automatically evaluate student code (correction service) is still possible in ViPLab 3.0. The code needed for evaluation is send to the correction server as a JSON message with the same structure as a Computation Task . The only difference is, that here all parts can be replaced, regardless of there access -settings.","title":"Evaluation Task"},{"location":"viplab-3.0/computation_template/","text":"Computation Template JSON Message A computation template can be the definition of an Exercise in the context of a learning environment, or a pre-configured research software (stored in a docker image), used to show reproducability of a research work or to reduce complex software environments to specific functionality Examples (informal) Note: // with text following until EOL is a comment, which is not covered by the JSON spec, and should not be contained in message sends in real; but nevertheless it would help, if JSON parsers could just ignore them. C Student Example { \"identifier\" : \"11483f23-95bf-424a-98a5-ee5868c85c3e\", // uuid, created by a frontend launcher \"version\" : \"3.0.0\", // version of this JSON-spec definition \"metadata\": // information for frontend { \"displayName\" : \"Aufgabe 1\", // name of computation template shown in frontend \"description\" : \"Schreiben Sie eine C-Funktion...\" // short description (could be used // as subtitle, further descriptions in \"parts\"). }, \"environment\" : \"C\", // important for interpreting configuration \"files\" : // must: at least one array element [ { \"identifier\": \"22483f42-95bf-984a-98a5-ee9485c85c3e\", // uuid, for referencing \"path\" : \"code.c\" // filename on backend \"metadata\" : // information for frontend { \"syntaxHighlighting\": \"C\", // optional (default: \"none\") }, \"parts\" : // must: at least one array element [ { \"identifier\": \"preamble\", \"access\" : \"visible\", // it is rendered, but can not be changed \"metadata\" : // what has to be moved to files ? { \"name\" : \"Info: source before your code.\", // name of element in frontend \"emphasis\" : \"low\" // optional (for rendering) }, \"content\" : \"I2luY2x1ZGUgPHN0ZGlvLmg-Cg\" // source (base64url encoded) // decoded: #include <stdio.h>\\n }, { \"identifier\": \"codeFromStudent\", \"access\" : \"modifiable\", // it can be edited in the frontend \"metadata\" : { \"name\" : \"Fill in your code!\", \"emphasis\" : \"medium\" }, \"content\" : \"dm9pZCBiYXIoKSB7IC8qIFNjaHJlaWJlbiBTaWUgaGllciBDb2RlLCBkZXIgImJhciIgYXVzZ2lidC4gKi8KCn0K\" // source (template) // decoded: void bar() { /* Schreiben Sie hier Code, der \"bar\" ausgibt. */\\n\\n}\\n }, { \"identifier\": \"postscript\", \"access\" : \"visible\", \"metadata\" : { \"name\" : \"Info: source after your code calling bar() in it.\", \"emphasis\" : \"low\", }, \"content\" : \"aW50IG1haW4oKSB7IGJhcigpOyByZXR1cm4gMDsgfQ\" // source // decoded: int main() { bar(); return 0; } } ] // parts[] } ], // files[] \"parameters\" : // parameters can be used to supply values at runtime to the configuration [ { \"mode\" : \"any\", // depending on guiType either any or fixed \"identifier\" : \"__STEPWIDTH__\", \"metadata\" : { \"guiType\" : \"input_field\", \"type\": \"number\", \"name\": \"stepwidth\" }, \"default\": [0.001], //default \"min\": 0, \"max\": 1, \"step\": 0.001, \"validation\" : \"range\" // one of [range, pattern (regex), anyof/oneof] } ], \"configuration\" : { \"compiling.compiler\" : \"gcc\", // string \"compiling.flags\" : \"-O2 -Wall\" // string \"checking.sources\" : [\"codeFromStudent\"], // identifier to parts \"checking.forbiddenCalls\": \"system execve\", // forbidden call names separated by WS \"linking.flags\" : \"-lm\", // string \"running.commandLineArguments\" : \"--stepwidth {{ __STEPWIDTH__ }}\" // mustache template if parameters are used } } Parameters Example { \"identifier\" : \"11483f23-95bf-424a-98a5-ee5868c85c3f\", // uuid, created by a frontend launcher \"version\" : \"3.0.0\" // version of this JSON-spec definition \"metadata\": // information for frontend { \"displayName\" : \"Parameters Example\", // name of computation template shown in frontend \"description\" : \"This is an example\", // short description (could be used // as subtitle, further descriptions in \"parts\"). }, \"environment\" : \"C\", // important for interpreting configuration \"files\" : // must: at least one array element [ { \"identifier\": \"22483f42-95bf-984a-98a5-ee9485c85c3f\", // uuid, for referencing \"path\" : \"params.input\" // filename on backend \"metadata\" : // information for frontend { \"syntaxHighlighting\": \"ini\", // optional (default: \"none\") }, \"parts\" : // must: at least one array element [ { \"identifier\": \"part-contains-slider\", \"access\": \"template\", \"metadata\": { \"name\": \"Parameter in part\", \"emphasis\": \"low\" }, \"parameters\" : [ { \"mode\" : \"any\", \"identifier\" : \"__sliderSingle__\", \"metadata\" : { \"guiType\" : \"slider\", \"name\": \"temperature\", \"vertical\": false }, \"default\": [ 10 ], \"min\": 0, \"max\": 500, \"step\": 10, \"validation\": \"range\" } ], \"content\": \"VGhpcyBpcyBhIFRleHQ6Ont7X19zbGlkZXJTaW5nbGVfX319OjpUaGlzIGlzIGEgVGV4dA==\" }, { \"identifier\": \"ceb051d8-b50c-4814-983a-b9d703cae0c6\", \"access\" : \"template\", \"metadata\" : { \"name\" : \"params.input file\" }, \"parameters\": [ { \"mode\" : \"fixed\", \"identifier\" : \"__checkbox__\", \"metadata\" : { \"guiType\": \"checkbox\", \"name\": \"options\" }, \"options\": [ { \"value\" : \"verbose\", \"selected\" : true }, { \"value\" : \"debug\" }, { \"value\" : \"make_plot\" } ], \"validation\": \"anyof\" }, { \"mode\" : \"fixed\", \"identifier\" : \"__radioButton__\", \"metadata\" : { \"guiType\": \"radio\", \"name\": \"backend\" }, \"options\": [ { \"value\" : \"debug\" }, { \"value\" : \"serial\", \"selected\" : true }, { \"value\" : \"hpc\", \"disabled\" : true }, { \"value\" : \"test\" } ], \"validation\": \"oneof\" }, { \"mode\" : \"fixed\", \"identifier\" : \"__dropdownSingle__\", \"metadata\" : { \"guiType\": \"dropdown\", \"name\": \"model\" }, \"options\": [ { \"value\" : \"Please choose one\", \"disabled\" : true }, { \"value\" : \"1p\", \"selected\" : true }, { \"value\" : \"1pnc\" }, { \"value\" : \"1pncmin\" }, { \"value\" : \"2p\" }, { \"value\" : \"2p1c\" } ], \"validation\": \"oneof\" }, { \"mode\" : \"fixed\", \"identifier\" : \"__dropdownMultiple__\", \"metadata\" : { \"guiType\": \"dropdown\", \"name\": \"model\" }, \"options\": [ { \"value\" : \"Please choose multiple\", \"disabled\" : true }, { \"value\" : \"1p\", \"selected\" : true }, { \"value\" : \"1pnc\" }, { \"value\" : \"1pncmin\" }, { \"value\" : \"2p\", \"selected\" : true }, { \"value\" : \"2p1c\", \"disabled\" : true } ], \"validation\": \"anyof\" }, { \"mode\" : \"fixed\", \"identifier\" : \"__toggle__\", \"metadata\" : { \"guiType\": \"toggle\", \"name\": \"options\" }, \"options\": [ { \"value\" : \"verbose\", \"selected\" : true }, { \"value\" : \"debug\" }, { \"value\" : \"make_plot\" } ], \"validation\": \"anyof\" }, { \"mode\" : \"any\", \"identifier\" : \"__sliderMultiple__\", \"metadata\" : { \"guiType\" : \"slider\", \"name\": \"temperature\", \"vertical\": true }, \"default\": [ 25, 50, 75 ], \"min\": 0, \"max\": 100, \"step\": 5, \"validation\": \"range\" }, { \"mode\" : \"any\", \"identifier\" : \"__inputTextWOMaxlangth__\", \"metadata\" : { \"guiType\" : \"input_field\", \"type\": \"text\", \"name\": \"file_name\" }, \"default\" : [\"\"], \"validation\": \"pattern\" }, { \"mode\" : \"any\", \"identifier\" : \"__inputTextWMaxlength__\", \"metadata\" : { \"guiType\" : \"input_field\", \"type\": \"text\", \"name\": \"file_name\" }, \"maxlength\": 200, \"default\" : [\"\"], \"validation\": \"pattern\" }, { \"mode\" : \"any\", \"identifier\" : \"__inputNumber__\", \"metadata\" : { \"guiType\" : \"input_field\", \"type\": \"number\", \"name\": \"time_delay\" }, \"default\": [10], \"min\": 0, \"max\": 500, \"step\": 0.1, \"validation\": \"range\" }, { \"mode\" : \"any\", \"identifier\" : \"__default__\", \"metadata\" : { \"guiType\" : \"editor\", \"name\": \"code 1\" }, \"default\": [\"I2luY2x1ZGUgPHN0ZGlvLmg-Cg\"], \"validation\": \"pattern\" }, ], \"content\" : \"\" } ] // parts[] } ], // files[] \"configuration\" : { \"resources.image\" : \"name://git.iws.uni-stuttgart.de:4567/dumux-repositories/dumux-docker/viplab/test\", \"resources.volume\" : \"/data/shared\", \"resources.memory\" : \"1g\", \"resources.numCPUs\" : 1, \"running.entrypoint\" : \"/data/bin/run.sh\", \"running.commandLineArguments\" : \"params.input\" } } Explaining the JSON Format version 3.0.0 Key [--Subkey] Type (a default is marked by italics ) Opt / Must Description Comment AS identifier string (UUID) must the identifier of this computation template can be generated by the frontend launcher version string opt version of the json specification should be given for backwards compatibility metadata struct opt contains information for frontend metadata --displayName string opt name of computation template shown in frontend Makes 'opt' sense for frontend? metadata --description string (plain text) opt short description Mostly a few lines. A longer description in different formats can be put in \"elements\" (see below). There is nothing 'below'. Where are descriptions actually used in the frontend? metadata --viewer one or more (list) of {\"Image\", \"ParaView\", \"ViPLabGraphics\"} opt When given, specific file extension, like \".vtu\" are interpreted by the frontend for displaying results. Otherwise files are only downloadable. environment one of {\"C\", \"C++\", \"Java\", \"Matlab\", \"Octave\", \"Container\", \"DuMuX\"} must Specifies the environment used for the Computation. It defines language, runtime, libraries and tools files [ {...}, {...}, ... ] must array containing File objects : there has to be at least one element parameters [{...}, {...}, ...] opt Parameters can be used to supply values at runtime to the configuration. Each parameter has a unique identifier (as string) and is a Parameter object . For security reasons free text gui_type , i.e., text input field or editor, are not allowed here. configuration struct opt/must (depends on environment) Environment specific configurations Different phases can be configured like compiling, checking (for legal function calls in source code), ... configuration --compiling.sources [FILE_ID, FILE_ID, ...] must Array of identifiers of JSON File objects . Explicit compilation (only referenced sources will be compiled). for C, C++, Java ; The frontend should suggest defaults here, e.g. by suited file suffix ('.c', '.cpp', '.java'). name/path (Java) for implicit compiling? check backend? configuration --compiling.compiler string must compiler to be used, e.g. \"gcc\" for C, C++ configuration --compiling.flags string must for C, C++ ; optional for Java CFLAGS for C/C++ ; compile flags for Java e.g. \"gcc\" for C/C++ ; \"-O2\" or \"\" for Java configuration --checking.sources [PART_ID, PART_ID, ...] must if checking should be performed array of identifiers of to be checked sources; given by parts[]{PART_ID} (see below ) for Matlab, Octave, C, Java ; frontend should suggest all \"modifiable\" and \"template\" parts here configuration --checking.allowedCalls string must if checking should be performed for Matlab/Octave : allowed call names separated by WS; only idents (no braces, no func args) for Java : allowed call name expressions separated by WS for Java semantics see Java checking semantics . configuration --checking.forbiddenCalls string must if checking should be performed for C : forbidden call names separated by WS; only idents (no braces, no func args) for Java : forbidden call name expressions separated by WS for C semantics see C checking semantics ); for Java semantics see Java checking semantics . configuration --linking.flags string must LFLAGS for C, C++ ; e.g. \"\" configuration --running.stdinFilename FILE_ID must the file identifier that is passed to Matlab/Octave via standard-in configuration --running.timelimitInSeconds int opt CPU time limit for all environments ; for semantics see Notes to \"timelimitInSeconds\" . configuration --running.commandLineArguments string opt for C, C++, Java : arguments given to main() function; for DuMuX, Container : additional command line args mustache template syntax can be used to transform input values (e.g. of sliders) into CLI arguments (see parameters -attribute) configuration --running.flags string opt flags given to JVM for Java configuration --running.mainClass string opt (if unique) / must (if not unique) class containing \"public static void main(String[] args) {\" for Java : \"args\" may be another name. If main function is unique, its correct class should be detected automatically. configuration --running.executable string must name of executable to run (as in backend file system) for DuMuX configuration --running.entrypoint string opt executable to run inside the container for Container ; can contain mustache template syntax for injecting PARAM_IDs (see parameters -attribute) configuration --running.intermediateFilesPattern string opt regex-expression in stdout which file is ready to be transferred for Container Is this implemented? configuration --running.userId int opt user id of the user that writes files inside the container for Container ; needed to set correct permissions configuration --resources.image url must location of the image to be executed for Container ; has to be a tar configuration --resources.volume string opt path in the container where data is placed for Container we need workaround for kata containers?! configuration --resources.memory string opt ( 64mb ) memory limit for the container for Container configuration --resources.numCPUs int opt number of CPUs for the container for Container default?; kubernetes map to softlimit cpu-shares... C checking semantics 08.05.2013: Semantics is \"mergeAndInclude\" for both prod systems and devel system (\"element\" unused). \"mergeAndInclude\" (default): Checked will be the merge result of elements after being preprocessed by the C preprocessor, so #include's are allowed and honored. Types have to be defined by the corresponding system headers (e.g. by #include <stdio.h> ) and no predefined standard types should be expected. It's possible to have illegal function calls in source elements (being part of some merge) not being checked (typically teacher code). This means, that during checking it has to and will be looked, in which source element an illegal function call happens, for knowing, if this actually is an error case. \"element\" (unused): Each element has to contain correct C code for itself. In addition to basic types some standard types defined in system headers are predefined (e.g. FILE, size_t). Using types from the outside -- e.g. other elements defining them or #include's in teacher code elements -- does not work. Common for both: no preprocessor commands are allowed in to be checked elements, with only one exception: #include's are allowed in case of \"mergeAndInclude\". The reason for the latter is to give students access to source elements serving as headers - editable for them or not. Functions from system headers could be #include'd, too. The teacher has the responsibility to put unwished system calls like system() and others from libc into \"forbiddenCalls\". Another point of control is to avoid linking with libs, whose functions shouldn't be used (this does not work with libc (automatically linked)). Java checking semantics Matching expressions for use in \"allowedCalls\" and \"forbiddenCalls\" '**' is for pure prefix matching; '*' for more fine-granular matching. Examples of matching expressions: - java.io.* matches all calls to methods in all classes in package, but does not match calls to methods in classes in subpackages; - java.io.** matches all calls to methods in all classes in package, _and_ in all classes in subpackages (if they exist); - java.io.Foo matches all calls to methods in class Foo, _and_ to methods in inner classes; - java.io.Foo.* \" \" \" \" \" \" \" \" , but _not_ to methods in inner classes (eg. to java.io.Foo$Bar.callMe); - java.io.Foo.callMe matches (only) the call to method callMe in Foo; - java.io.Foo$Bar.callMe matches (only) the call to method callMe in inner class Foo$Bar. If used in \"forbiddenCalls\" only (property \"allowedCalls\" missing): - java.io.* forbids all calls to methods in all classes in package, but allows calls to methods in classes in subpackages; - java.io.** forbids all calls to methods in all classes in package, _and_ in all classes in subpackages (if they exist); - java.io.Foo forbids all calls to methods in class Foo, _and_ to methods in inner classes; - java.io.Foo.* \" \" \" \" \" \" \" \" , but _not_ to methods in inner classes (eg. to java.io.Foo$Bar.callMe); - java.io.Foo.callMe forbids (only) the call to method callMe in Foo; - java.io.Foo$Bar.callMe forbids (only) the call to method callMe in inner class Foo$Bar. One or more of these expressions may be given by \"allowedCalls\" and/or \"forbiddenCalls\", separated by WS; e.g. \"forbiddenCalls\": \"java.io.** java.lang.Class\" . An allowed() or forbidden() predicate gives true, - if one of its corresponding matching expressions - an entry in property \"allowedCalls\" resp. \"forbiddenCalls\" - matches, or - if there is no corresponding property given at all. Otherwise it gives false. All calls will be filtered by following composed predicate for getting allowed ones: allowed(call) && ! forbidden(call) <=> ! forbidden(call) && allowed(call) . If only one part is given, this predicate reduces to: allowed(call) resp. ! forbidden(call) . Default for not given part of predicate is - 'no forbidden': ! forbidden(call) == true, and - 'all allowed' : allowed(call) == true. (opposite defaults would render the given part useless). If sets 'allowed' and 'forbidden' - are disjunct -> 'allowed' are allowed and all other forbidden. - have an intersection -> ('allowed' minus intersection) is allowed (all other forbidden). With this logic it is possible to define - a negative list by giving 'forbiddenCalls' only, or - a positive one by giving \"allowedCalls\", or - a mixture of both. Notes to \"timelimitInSeconds\" There is a default CPU time limit (see RLIMIT_CPU of 'man setrlimit') for running or interpreting, which depends on backend configuration. This is good for terminating non-terminating programs, e.g. endless loops. Optional attribute \"timelimitInSeconds\" may lower this default CPU time limit; if it is higher than default, it will be ignored. Setting it to a value as much as possible below default is good for backend response time under high load; especially, if default is configured for performing expensive computations. JSON objects in files An object in array files[] has the following members: Key Type (an enum default is marked by italics ) Opt / Must Description Comment identifier string (UUID) must for later referencing, has to be unique can be autogenerated by frontend path string must absolute path to file It is not allowed to start with '/' metadata struct opt contains information for frontend metadata --syntaxHighlighting string ( text ) opt Mode of the ace editor. List can be found in on github Examples: \"ini\", \"c_cpp\", \"matlab\", \"java\". See also Ace demo parts [{...}, {...}, ...] must array containing part objects . There has to be at least one. JSON objects in parts An object in array parts[] has the following members: Key Type (an enum default is marked by italics ) Opt / Must Description Comment AS identifier string must for later referencing, has to be unique can be autogenerated by frontend access one of {\"invisible\", \"visible\", \"modifiable\", \"template\"} must defines the access level of this part for the user see Notes on access levels for more details metadata struct opt contains information mainly for the frontend metadata --name string opt additional description of this part To be shown in the frontend Where? Is it used? metadata --emphasis One of {\"low\", \"medium\" , \"high\"} opt info for rendering Still needed? parameters array of parameter-objects opt definition of parameters that are injected to content at runtime Any number of parameters can be specified, but the PARAM_ID (identifier) has to be unique. content string must base64url-encoded source code Can contain mustache expressions with PARAM_IDs (identifiers) if the access type of this part is \"template\". Notes on access levels in parts Four access levels can be specified inside a part: invisible : The content is not shown to a user, i.e., student or re-user of a software. This can be used to hide irrelevant source code from the user, to focus on the important parts, etc... visible : The content is shown to a user, but can not be changed by him/her. modifiable : The content is shown to a user and can be changed. This comprise functions students should implement or input files of a research software that can be changed by a re-user. template : The content is shown to a user, but can not be changed. Additionally, GUI elements like input fields, sliders, buttons, etc. that are specified within the metadata can be set by the user and the template is then filled with these parameter values. This access-level can be used to simplify complex research software configurations for the re-user. JSON object Parameter A parameter-object, has the following members: Key [--Subkey] Type (a default is marked by italics ) Opt / Must Description Comment mode one of {\"any\", \"fixed\"} must specifies type of the parameter used to define the type of validation that is performed identifier string must unique id for this parameter This id must be valid mustach template variable. Example: \" __BINARY__ \" fixed-type parameter JSON object A fixed-type PARAM-object, like __checkbox__ , has the following members: Key [--Subkey] Type (a default is marked by italics ) Opt / Must Description Comment metadata Object must JSON object containing information how to render this parameter See definition of fixed-type JSON object Parameter-Metadata options array of objects must for gui_type \"checkbox\", \"radio\", \"dropdown\", \"toggle\" specifies the allowed values See fixed-type options JSON object for details on contained objects validation one of {\"onlyone\", \"minone\", \"any\"} must See Parameter validation semantics for details fixed-type JSON object Parameter-Metadata A metadata-object, has the following members: Key [--Subkey] Type (a default is marked by italics ) Opt / Must Description Comment guiType one of {\"checkbox\", \"radio\", \"dropdown\", \"toggle\"} must specifies how the frontend renders the parameter name string must Label for the parameter frontend feature fixed-type options JSON object Key [--Subkey] Type (a default is marked by italics ) Opt / Must Description Comment value string must specifies one avaliable value Example: { \"value\" : \"verbose\" } text string opt Text shown besides or as dropdown of the value disabled boolean opt Shows disabled options in frontend Example: { \"value\" : \"Please choose multiple\", \"disabled\" : true } selected Boolean opt specifies defaults value/values for frontend the strings have to be part of values ; for \"toogle\" given values mean true text string opt Text shown besides or as dropdown of the value any-type parameter JSON object A any-type PARAM-object, like __sliderMultiple__ , has the following members: Key [--Subkey] Type (a default is marked by italics ) Opt / Must Description Comment metadata Object must JSON object containing information how to render this parameter See definition of any-type JSON object Parameter-Metadata default array of number(s) or string(s) opt the default value(s) shown in frontend min number opt minimal allowed value for slider, or input_field with type number max number opt maximal allowed value for slider, or input_field with type number step number opt defines together with min and max attributes a finite set of allowed values for slider, or input_field with type number maxlength number opt Specifies for gui_type \"input_field\" the length of the input validation one of {\"range\", \"pattern\", \"none\"} must See Parameter validation semantics for details pattern string opt A regex pattern for validation any-type JSON object Parameter-Metadata A metadata-object, has the following members: Key [--Subkey] Type (a default is marked by italics ) Opt / Must Description Comment guiType one of { \"editor\" , \"input_field\", \"slider\"} must specifies how the frontend renders the parameter type one of {\"number\", \"text\"} opt Type of the input field name string must Label for the parameter frontend feature vertical bool opt ( false ) Specifies for gui_type \"slider\" whether it is rendered horizontal or vertical Parameter Validation Semantics Four types of validation are implemented at the moment: onlyone : Only one value can be chosen. The value has to be included in options and disabled for the value has to be set to false (is false by default, so disabled can also be missing). minone : One or more values can be chosen. The values have to be included in options and disabled for the value s has to be set to false (is false by default, so disabled can also be missing). any : All of the chosen values have to be included in options and disabled for the value s has to be set to false (is false by default, so disabled can also be missing). range : A numerical value is checked whether is is between min and max . If step is given a finite number of possible values is computed and the value has to be within this set. pattern : A regex pattern that the text value has to fulfill. none : If no validation is necessary, because there are no restraints on the value.","title":"Computation Template JSON Message"},{"location":"viplab-3.0/computation_template/#computation-template-json-message","text":"A computation template can be the definition of an Exercise in the context of a learning environment, or a pre-configured research software (stored in a docker image), used to show reproducability of a research work or to reduce complex software environments to specific functionality","title":"Computation Template JSON Message"},{"location":"viplab-3.0/computation_template/#examples-informal","text":"Note: // with text following until EOL is a comment, which is not covered by the JSON spec, and should not be contained in message sends in real; but nevertheless it would help, if JSON parsers could just ignore them.","title":"Examples (informal)"},{"location":"viplab-3.0/computation_template/#c-student-example","text":"{ \"identifier\" : \"11483f23-95bf-424a-98a5-ee5868c85c3e\", // uuid, created by a frontend launcher \"version\" : \"3.0.0\", // version of this JSON-spec definition \"metadata\": // information for frontend { \"displayName\" : \"Aufgabe 1\", // name of computation template shown in frontend \"description\" : \"Schreiben Sie eine C-Funktion...\" // short description (could be used // as subtitle, further descriptions in \"parts\"). }, \"environment\" : \"C\", // important for interpreting configuration \"files\" : // must: at least one array element [ { \"identifier\": \"22483f42-95bf-984a-98a5-ee9485c85c3e\", // uuid, for referencing \"path\" : \"code.c\" // filename on backend \"metadata\" : // information for frontend { \"syntaxHighlighting\": \"C\", // optional (default: \"none\") }, \"parts\" : // must: at least one array element [ { \"identifier\": \"preamble\", \"access\" : \"visible\", // it is rendered, but can not be changed \"metadata\" : // what has to be moved to files ? { \"name\" : \"Info: source before your code.\", // name of element in frontend \"emphasis\" : \"low\" // optional (for rendering) }, \"content\" : \"I2luY2x1ZGUgPHN0ZGlvLmg-Cg\" // source (base64url encoded) // decoded: #include <stdio.h>\\n }, { \"identifier\": \"codeFromStudent\", \"access\" : \"modifiable\", // it can be edited in the frontend \"metadata\" : { \"name\" : \"Fill in your code!\", \"emphasis\" : \"medium\" }, \"content\" : \"dm9pZCBiYXIoKSB7IC8qIFNjaHJlaWJlbiBTaWUgaGllciBDb2RlLCBkZXIgImJhciIgYXVzZ2lidC4gKi8KCn0K\" // source (template) // decoded: void bar() { /* Schreiben Sie hier Code, der \"bar\" ausgibt. */\\n\\n}\\n }, { \"identifier\": \"postscript\", \"access\" : \"visible\", \"metadata\" : { \"name\" : \"Info: source after your code calling bar() in it.\", \"emphasis\" : \"low\", }, \"content\" : \"aW50IG1haW4oKSB7IGJhcigpOyByZXR1cm4gMDsgfQ\" // source // decoded: int main() { bar(); return 0; } } ] // parts[] } ], // files[] \"parameters\" : // parameters can be used to supply values at runtime to the configuration [ { \"mode\" : \"any\", // depending on guiType either any or fixed \"identifier\" : \"__STEPWIDTH__\", \"metadata\" : { \"guiType\" : \"input_field\", \"type\": \"number\", \"name\": \"stepwidth\" }, \"default\": [0.001], //default \"min\": 0, \"max\": 1, \"step\": 0.001, \"validation\" : \"range\" // one of [range, pattern (regex), anyof/oneof] } ], \"configuration\" : { \"compiling.compiler\" : \"gcc\", // string \"compiling.flags\" : \"-O2 -Wall\" // string \"checking.sources\" : [\"codeFromStudent\"], // identifier to parts \"checking.forbiddenCalls\": \"system execve\", // forbidden call names separated by WS \"linking.flags\" : \"-lm\", // string \"running.commandLineArguments\" : \"--stepwidth {{ __STEPWIDTH__ }}\" // mustache template if parameters are used } }","title":"C Student Example"},{"location":"viplab-3.0/computation_template/#parameters-example","text":"{ \"identifier\" : \"11483f23-95bf-424a-98a5-ee5868c85c3f\", // uuid, created by a frontend launcher \"version\" : \"3.0.0\" // version of this JSON-spec definition \"metadata\": // information for frontend { \"displayName\" : \"Parameters Example\", // name of computation template shown in frontend \"description\" : \"This is an example\", // short description (could be used // as subtitle, further descriptions in \"parts\"). }, \"environment\" : \"C\", // important for interpreting configuration \"files\" : // must: at least one array element [ { \"identifier\": \"22483f42-95bf-984a-98a5-ee9485c85c3f\", // uuid, for referencing \"path\" : \"params.input\" // filename on backend \"metadata\" : // information for frontend { \"syntaxHighlighting\": \"ini\", // optional (default: \"none\") }, \"parts\" : // must: at least one array element [ { \"identifier\": \"part-contains-slider\", \"access\": \"template\", \"metadata\": { \"name\": \"Parameter in part\", \"emphasis\": \"low\" }, \"parameters\" : [ { \"mode\" : \"any\", \"identifier\" : \"__sliderSingle__\", \"metadata\" : { \"guiType\" : \"slider\", \"name\": \"temperature\", \"vertical\": false }, \"default\": [ 10 ], \"min\": 0, \"max\": 500, \"step\": 10, \"validation\": \"range\" } ], \"content\": \"VGhpcyBpcyBhIFRleHQ6Ont7X19zbGlkZXJTaW5nbGVfX319OjpUaGlzIGlzIGEgVGV4dA==\" }, { \"identifier\": \"ceb051d8-b50c-4814-983a-b9d703cae0c6\", \"access\" : \"template\", \"metadata\" : { \"name\" : \"params.input file\" }, \"parameters\": [ { \"mode\" : \"fixed\", \"identifier\" : \"__checkbox__\", \"metadata\" : { \"guiType\": \"checkbox\", \"name\": \"options\" }, \"options\": [ { \"value\" : \"verbose\", \"selected\" : true }, { \"value\" : \"debug\" }, { \"value\" : \"make_plot\" } ], \"validation\": \"anyof\" }, { \"mode\" : \"fixed\", \"identifier\" : \"__radioButton__\", \"metadata\" : { \"guiType\": \"radio\", \"name\": \"backend\" }, \"options\": [ { \"value\" : \"debug\" }, { \"value\" : \"serial\", \"selected\" : true }, { \"value\" : \"hpc\", \"disabled\" : true }, { \"value\" : \"test\" } ], \"validation\": \"oneof\" }, { \"mode\" : \"fixed\", \"identifier\" : \"__dropdownSingle__\", \"metadata\" : { \"guiType\": \"dropdown\", \"name\": \"model\" }, \"options\": [ { \"value\" : \"Please choose one\", \"disabled\" : true }, { \"value\" : \"1p\", \"selected\" : true }, { \"value\" : \"1pnc\" }, { \"value\" : \"1pncmin\" }, { \"value\" : \"2p\" }, { \"value\" : \"2p1c\" } ], \"validation\": \"oneof\" }, { \"mode\" : \"fixed\", \"identifier\" : \"__dropdownMultiple__\", \"metadata\" : { \"guiType\": \"dropdown\", \"name\": \"model\" }, \"options\": [ { \"value\" : \"Please choose multiple\", \"disabled\" : true }, { \"value\" : \"1p\", \"selected\" : true }, { \"value\" : \"1pnc\" }, { \"value\" : \"1pncmin\" }, { \"value\" : \"2p\", \"selected\" : true }, { \"value\" : \"2p1c\", \"disabled\" : true } ], \"validation\": \"anyof\" }, { \"mode\" : \"fixed\", \"identifier\" : \"__toggle__\", \"metadata\" : { \"guiType\": \"toggle\", \"name\": \"options\" }, \"options\": [ { \"value\" : \"verbose\", \"selected\" : true }, { \"value\" : \"debug\" }, { \"value\" : \"make_plot\" } ], \"validation\": \"anyof\" }, { \"mode\" : \"any\", \"identifier\" : \"__sliderMultiple__\", \"metadata\" : { \"guiType\" : \"slider\", \"name\": \"temperature\", \"vertical\": true }, \"default\": [ 25, 50, 75 ], \"min\": 0, \"max\": 100, \"step\": 5, \"validation\": \"range\" }, { \"mode\" : \"any\", \"identifier\" : \"__inputTextWOMaxlangth__\", \"metadata\" : { \"guiType\" : \"input_field\", \"type\": \"text\", \"name\": \"file_name\" }, \"default\" : [\"\"], \"validation\": \"pattern\" }, { \"mode\" : \"any\", \"identifier\" : \"__inputTextWMaxlength__\", \"metadata\" : { \"guiType\" : \"input_field\", \"type\": \"text\", \"name\": \"file_name\" }, \"maxlength\": 200, \"default\" : [\"\"], \"validation\": \"pattern\" }, { \"mode\" : \"any\", \"identifier\" : \"__inputNumber__\", \"metadata\" : { \"guiType\" : \"input_field\", \"type\": \"number\", \"name\": \"time_delay\" }, \"default\": [10], \"min\": 0, \"max\": 500, \"step\": 0.1, \"validation\": \"range\" }, { \"mode\" : \"any\", \"identifier\" : \"__default__\", \"metadata\" : { \"guiType\" : \"editor\", \"name\": \"code 1\" }, \"default\": [\"I2luY2x1ZGUgPHN0ZGlvLmg-Cg\"], \"validation\": \"pattern\" }, ], \"content\" : \"\" } ] // parts[] } ], // files[] \"configuration\" : { \"resources.image\" : \"name://git.iws.uni-stuttgart.de:4567/dumux-repositories/dumux-docker/viplab/test\", \"resources.volume\" : \"/data/shared\", \"resources.memory\" : \"1g\", \"resources.numCPUs\" : 1, \"running.entrypoint\" : \"/data/bin/run.sh\", \"running.commandLineArguments\" : \"params.input\" } }","title":"Parameters Example"},{"location":"viplab-3.0/computation_template/#explaining-the-json-format","text":"version 3.0.0 Key [--Subkey] Type (a default is marked by italics ) Opt / Must Description Comment AS identifier string (UUID) must the identifier of this computation template can be generated by the frontend launcher version string opt version of the json specification should be given for backwards compatibility metadata struct opt contains information for frontend metadata --displayName string opt name of computation template shown in frontend Makes 'opt' sense for frontend? metadata --description string (plain text) opt short description Mostly a few lines. A longer description in different formats can be put in \"elements\" (see below). There is nothing 'below'. Where are descriptions actually used in the frontend? metadata --viewer one or more (list) of {\"Image\", \"ParaView\", \"ViPLabGraphics\"} opt When given, specific file extension, like \".vtu\" are interpreted by the frontend for displaying results. Otherwise files are only downloadable. environment one of {\"C\", \"C++\", \"Java\", \"Matlab\", \"Octave\", \"Container\", \"DuMuX\"} must Specifies the environment used for the Computation. It defines language, runtime, libraries and tools files [ {...}, {...}, ... ] must array containing File objects : there has to be at least one element parameters [{...}, {...}, ...] opt Parameters can be used to supply values at runtime to the configuration. Each parameter has a unique identifier (as string) and is a Parameter object . For security reasons free text gui_type , i.e., text input field or editor, are not allowed here. configuration struct opt/must (depends on environment) Environment specific configurations Different phases can be configured like compiling, checking (for legal function calls in source code), ... configuration --compiling.sources [FILE_ID, FILE_ID, ...] must Array of identifiers of JSON File objects . Explicit compilation (only referenced sources will be compiled). for C, C++, Java ; The frontend should suggest defaults here, e.g. by suited file suffix ('.c', '.cpp', '.java'). name/path (Java) for implicit compiling? check backend? configuration --compiling.compiler string must compiler to be used, e.g. \"gcc\" for C, C++ configuration --compiling.flags string must for C, C++ ; optional for Java CFLAGS for C/C++ ; compile flags for Java e.g. \"gcc\" for C/C++ ; \"-O2\" or \"\" for Java configuration --checking.sources [PART_ID, PART_ID, ...] must if checking should be performed array of identifiers of to be checked sources; given by parts[]{PART_ID} (see below ) for Matlab, Octave, C, Java ; frontend should suggest all \"modifiable\" and \"template\" parts here configuration --checking.allowedCalls string must if checking should be performed for Matlab/Octave : allowed call names separated by WS; only idents (no braces, no func args) for Java : allowed call name expressions separated by WS for Java semantics see Java checking semantics . configuration --checking.forbiddenCalls string must if checking should be performed for C : forbidden call names separated by WS; only idents (no braces, no func args) for Java : forbidden call name expressions separated by WS for C semantics see C checking semantics ); for Java semantics see Java checking semantics . configuration --linking.flags string must LFLAGS for C, C++ ; e.g. \"\" configuration --running.stdinFilename FILE_ID must the file identifier that is passed to Matlab/Octave via standard-in configuration --running.timelimitInSeconds int opt CPU time limit for all environments ; for semantics see Notes to \"timelimitInSeconds\" . configuration --running.commandLineArguments string opt for C, C++, Java : arguments given to main() function; for DuMuX, Container : additional command line args mustache template syntax can be used to transform input values (e.g. of sliders) into CLI arguments (see parameters -attribute) configuration --running.flags string opt flags given to JVM for Java configuration --running.mainClass string opt (if unique) / must (if not unique) class containing \"public static void main(String[] args) {\" for Java : \"args\" may be another name. If main function is unique, its correct class should be detected automatically. configuration --running.executable string must name of executable to run (as in backend file system) for DuMuX configuration --running.entrypoint string opt executable to run inside the container for Container ; can contain mustache template syntax for injecting PARAM_IDs (see parameters -attribute) configuration --running.intermediateFilesPattern string opt regex-expression in stdout which file is ready to be transferred for Container Is this implemented? configuration --running.userId int opt user id of the user that writes files inside the container for Container ; needed to set correct permissions configuration --resources.image url must location of the image to be executed for Container ; has to be a tar configuration --resources.volume string opt path in the container where data is placed for Container we need workaround for kata containers?! configuration --resources.memory string opt ( 64mb ) memory limit for the container for Container configuration --resources.numCPUs int opt number of CPUs for the container for Container default?; kubernetes map to softlimit cpu-shares...","title":"Explaining the JSON Format"},{"location":"viplab-3.0/computation_template/#c-checking-semantics","text":"08.05.2013: Semantics is \"mergeAndInclude\" for both prod systems and devel system (\"element\" unused). \"mergeAndInclude\" (default): Checked will be the merge result of elements after being preprocessed by the C preprocessor, so #include's are allowed and honored. Types have to be defined by the corresponding system headers (e.g. by #include <stdio.h> ) and no predefined standard types should be expected. It's possible to have illegal function calls in source elements (being part of some merge) not being checked (typically teacher code). This means, that during checking it has to and will be looked, in which source element an illegal function call happens, for knowing, if this actually is an error case. \"element\" (unused): Each element has to contain correct C code for itself. In addition to basic types some standard types defined in system headers are predefined (e.g. FILE, size_t). Using types from the outside -- e.g. other elements defining them or #include's in teacher code elements -- does not work. Common for both: no preprocessor commands are allowed in to be checked elements, with only one exception: #include's are allowed in case of \"mergeAndInclude\". The reason for the latter is to give students access to source elements serving as headers - editable for them or not. Functions from system headers could be #include'd, too. The teacher has the responsibility to put unwished system calls like system() and others from libc into \"forbiddenCalls\". Another point of control is to avoid linking with libs, whose functions shouldn't be used (this does not work with libc (automatically linked)).","title":"C checking semantics"},{"location":"viplab-3.0/computation_template/#java-checking-semantics","text":"Matching expressions for use in \"allowedCalls\" and \"forbiddenCalls\" '**' is for pure prefix matching; '*' for more fine-granular matching. Examples of matching expressions: - java.io.* matches all calls to methods in all classes in package, but does not match calls to methods in classes in subpackages; - java.io.** matches all calls to methods in all classes in package, _and_ in all classes in subpackages (if they exist); - java.io.Foo matches all calls to methods in class Foo, _and_ to methods in inner classes; - java.io.Foo.* \" \" \" \" \" \" \" \" , but _not_ to methods in inner classes (eg. to java.io.Foo$Bar.callMe); - java.io.Foo.callMe matches (only) the call to method callMe in Foo; - java.io.Foo$Bar.callMe matches (only) the call to method callMe in inner class Foo$Bar. If used in \"forbiddenCalls\" only (property \"allowedCalls\" missing): - java.io.* forbids all calls to methods in all classes in package, but allows calls to methods in classes in subpackages; - java.io.** forbids all calls to methods in all classes in package, _and_ in all classes in subpackages (if they exist); - java.io.Foo forbids all calls to methods in class Foo, _and_ to methods in inner classes; - java.io.Foo.* \" \" \" \" \" \" \" \" , but _not_ to methods in inner classes (eg. to java.io.Foo$Bar.callMe); - java.io.Foo.callMe forbids (only) the call to method callMe in Foo; - java.io.Foo$Bar.callMe forbids (only) the call to method callMe in inner class Foo$Bar. One or more of these expressions may be given by \"allowedCalls\" and/or \"forbiddenCalls\", separated by WS; e.g. \"forbiddenCalls\": \"java.io.** java.lang.Class\" . An allowed() or forbidden() predicate gives true, - if one of its corresponding matching expressions - an entry in property \"allowedCalls\" resp. \"forbiddenCalls\" - matches, or - if there is no corresponding property given at all. Otherwise it gives false. All calls will be filtered by following composed predicate for getting allowed ones: allowed(call) && ! forbidden(call) <=> ! forbidden(call) && allowed(call) . If only one part is given, this predicate reduces to: allowed(call) resp. ! forbidden(call) . Default for not given part of predicate is - 'no forbidden': ! forbidden(call) == true, and - 'all allowed' : allowed(call) == true. (opposite defaults would render the given part useless). If sets 'allowed' and 'forbidden' - are disjunct -> 'allowed' are allowed and all other forbidden. - have an intersection -> ('allowed' minus intersection) is allowed (all other forbidden). With this logic it is possible to define - a negative list by giving 'forbiddenCalls' only, or - a positive one by giving \"allowedCalls\", or - a mixture of both.","title":"Java checking semantics"},{"location":"viplab-3.0/computation_template/#notes-to-timelimitinseconds","text":"There is a default CPU time limit (see RLIMIT_CPU of 'man setrlimit') for running or interpreting, which depends on backend configuration. This is good for terminating non-terminating programs, e.g. endless loops. Optional attribute \"timelimitInSeconds\" may lower this default CPU time limit; if it is higher than default, it will be ignored. Setting it to a value as much as possible below default is good for backend response time under high load; especially, if default is configured for performing expensive computations.","title":"Notes to \"timelimitInSeconds\""},{"location":"viplab-3.0/computation_template/#json-objects-in-files","text":"An object in array files[] has the following members: Key Type (an enum default is marked by italics ) Opt / Must Description Comment identifier string (UUID) must for later referencing, has to be unique can be autogenerated by frontend path string must absolute path to file It is not allowed to start with '/' metadata struct opt contains information for frontend metadata --syntaxHighlighting string ( text ) opt Mode of the ace editor. List can be found in on github Examples: \"ini\", \"c_cpp\", \"matlab\", \"java\". See also Ace demo parts [{...}, {...}, ...] must array containing part objects . There has to be at least one.","title":"JSON objects in files"},{"location":"viplab-3.0/computation_template/#json-objects-in-parts","text":"An object in array parts[] has the following members: Key Type (an enum default is marked by italics ) Opt / Must Description Comment AS identifier string must for later referencing, has to be unique can be autogenerated by frontend access one of {\"invisible\", \"visible\", \"modifiable\", \"template\"} must defines the access level of this part for the user see Notes on access levels for more details metadata struct opt contains information mainly for the frontend metadata --name string opt additional description of this part To be shown in the frontend Where? Is it used? metadata --emphasis One of {\"low\", \"medium\" , \"high\"} opt info for rendering Still needed? parameters array of parameter-objects opt definition of parameters that are injected to content at runtime Any number of parameters can be specified, but the PARAM_ID (identifier) has to be unique. content string must base64url-encoded source code Can contain mustache expressions with PARAM_IDs (identifiers) if the access type of this part is \"template\".","title":"JSON objects in parts"},{"location":"viplab-3.0/computation_template/#notes-on-access-levels-in-parts","text":"Four access levels can be specified inside a part: invisible : The content is not shown to a user, i.e., student or re-user of a software. This can be used to hide irrelevant source code from the user, to focus on the important parts, etc... visible : The content is shown to a user, but can not be changed by him/her. modifiable : The content is shown to a user and can be changed. This comprise functions students should implement or input files of a research software that can be changed by a re-user. template : The content is shown to a user, but can not be changed. Additionally, GUI elements like input fields, sliders, buttons, etc. that are specified within the metadata can be set by the user and the template is then filled with these parameter values. This access-level can be used to simplify complex research software configurations for the re-user.","title":"Notes on access levels in parts"},{"location":"viplab-3.0/computation_template/#json-object-parameter","text":"A parameter-object, has the following members: Key [--Subkey] Type (a default is marked by italics ) Opt / Must Description Comment mode one of {\"any\", \"fixed\"} must specifies type of the parameter used to define the type of validation that is performed identifier string must unique id for this parameter This id must be valid mustach template variable. Example: \" __BINARY__ \"","title":"JSON object Parameter"},{"location":"viplab-3.0/computation_template/#fixed-type-parameter-json-object","text":"A fixed-type PARAM-object, like __checkbox__ , has the following members: Key [--Subkey] Type (a default is marked by italics ) Opt / Must Description Comment metadata Object must JSON object containing information how to render this parameter See definition of fixed-type JSON object Parameter-Metadata options array of objects must for gui_type \"checkbox\", \"radio\", \"dropdown\", \"toggle\" specifies the allowed values See fixed-type options JSON object for details on contained objects validation one of {\"onlyone\", \"minone\", \"any\"} must See Parameter validation semantics for details","title":"fixed-type parameter JSON object"},{"location":"viplab-3.0/computation_template/#fixed-type-json-object-parameter-metadata","text":"A metadata-object, has the following members: Key [--Subkey] Type (a default is marked by italics ) Opt / Must Description Comment guiType one of {\"checkbox\", \"radio\", \"dropdown\", \"toggle\"} must specifies how the frontend renders the parameter name string must Label for the parameter frontend feature","title":"fixed-type JSON object Parameter-Metadata"},{"location":"viplab-3.0/computation_template/#fixed-type-options-json-object","text":"Key [--Subkey] Type (a default is marked by italics ) Opt / Must Description Comment value string must specifies one avaliable value Example: { \"value\" : \"verbose\" } text string opt Text shown besides or as dropdown of the value disabled boolean opt Shows disabled options in frontend Example: { \"value\" : \"Please choose multiple\", \"disabled\" : true } selected Boolean opt specifies defaults value/values for frontend the strings have to be part of values ; for \"toogle\" given values mean true text string opt Text shown besides or as dropdown of the value","title":"fixed-type options JSON object"},{"location":"viplab-3.0/computation_template/#any-type-parameter-json-object","text":"A any-type PARAM-object, like __sliderMultiple__ , has the following members: Key [--Subkey] Type (a default is marked by italics ) Opt / Must Description Comment metadata Object must JSON object containing information how to render this parameter See definition of any-type JSON object Parameter-Metadata default array of number(s) or string(s) opt the default value(s) shown in frontend min number opt minimal allowed value for slider, or input_field with type number max number opt maximal allowed value for slider, or input_field with type number step number opt defines together with min and max attributes a finite set of allowed values for slider, or input_field with type number maxlength number opt Specifies for gui_type \"input_field\" the length of the input validation one of {\"range\", \"pattern\", \"none\"} must See Parameter validation semantics for details pattern string opt A regex pattern for validation","title":"any-type parameter JSON object"},{"location":"viplab-3.0/computation_template/#any-type-json-object-parameter-metadata","text":"A metadata-object, has the following members: Key [--Subkey] Type (a default is marked by italics ) Opt / Must Description Comment guiType one of { \"editor\" , \"input_field\", \"slider\"} must specifies how the frontend renders the parameter type one of {\"number\", \"text\"} opt Type of the input field name string must Label for the parameter frontend feature vertical bool opt ( false ) Specifies for gui_type \"slider\" whether it is rendered horizontal or vertical","title":"any-type JSON object Parameter-Metadata"},{"location":"viplab-3.0/computation_template/#parameter-validation-semantics","text":"Four types of validation are implemented at the moment: onlyone : Only one value can be chosen. The value has to be included in options and disabled for the value has to be set to false (is false by default, so disabled can also be missing). minone : One or more values can be chosen. The values have to be included in options and disabled for the value s has to be set to false (is false by default, so disabled can also be missing). any : All of the chosen values have to be included in options and disabled for the value s has to be set to false (is false by default, so disabled can also be missing). range : A numerical value is checked whether is is between min and max . If step is given a finite number of possible values is computed and the value has to be within this set. pattern : A regex pattern that the text value has to fulfill. none : If no validation is necessary, because there are no restraints on the value.","title":"Parameter Validation Semantics"},{"location":"viplab-3.0/system_status/","text":"System status JSON message to inform frontend about computations in-preparation...","title":"System status JSON message"},{"location":"viplab-3.0/system_status/#system-status-json-message","text":"to inform frontend about computations in-preparation...","title":"System status JSON message"},{"location":"viplab-3.0/versioning/","text":"JSON Object Versioning Rules Status: proposed Deciders: Leon Kiefer, Per Pascal Seeland Date: 2020-05-14 Technical Story: https://github.com/VirtualProgrammingLab/documentation/issues/1 Context and Problem Statement The ViPLab Projects defines a set of JSON-objects, which are used in the different components of the project. Since ViPLab itself does not store any data, these objects have to be stored by third party systems. These will be, depending on the context they are used in either LMS (like ILIAS) or data repositories (like dataverse). There needs to be a way to identify the version of the different objects stored by the third party system to allow e.g. upgrading/migrating the different components. Decision Drivers Provide a way to identify the version of the objects and also provide a path for e.g. upgrading the API endpoints used by those systems. Considered Options Version all endpoints, but not the objects Version all objects, but not the endpoints Version parts of the objects and all of the endpoints. Version all objects and all of the endpoints. Decision Outcome It has been decided to version all long living objects, and all endpoints. The reason for requiring all objects to have version tags is for consistency reasons. Endpoints will only accept objects versions of one major version. Breaking changes will require to define a new version. Incremental updates, which only extend the object are allowed. All systems are expected to handle these incremental updates gracefully. This means that a version 3.1.x message returned by the api must be accept by a 3.0.x client. The additional information contained by the api may be discarded. The same rules apply when a 3.1.x client talks to a 3.0.x api. The api will process the message according to the 3.0.x rules and extra information might be discarded. The client has to determine the correct endpoint versions to use. When the client will use a ComputationTemplate with version 3.x.x the corresponding websocket api will be ws://example.com/v3/computation. All other messages used in any further communication between the websocket-api and the client are also expected to be version 3.x.x. There is no possiblity to mix different versions. If a client wants to use a v4 api, he has to reconnect to the correct endpoint at ws://example.com/v4/computation The objects have been devided into three groups: - Long living object: ComputationTemplate, ComputationTask and ComputationResult - Wrappers: Computation - Message Types: CreateComputation and Result All long living objects are expected to be stored by clients and have version attribute on their top level of the json object, making it easy to get the information. Wrappers only exist during the communication between the client and the api and thus will not contain any version information, as it can be derived from the version of the api version they are being used with. Their only functionality is to group long living objects during a request. Messages Types are the messages used for the communication of the client with the websocket api. Like the wrappers they belong to a specific endpoint version and are also not versioned. Positive Consequences Providing version information allows api and the client to be updated independently. It also allows the objects being held by the client to be easily identified without the need to either store this information somewhere external, where is might get lost or require some method to identify it based on the attributes available. Negative Consequences The version needs to stored on all objects, which requires additional space and bandwidth. Also this information needs to be processed in the endpoints. But this in neglactable considered to the need of upgrading different systems of different third party users at once. Pros and Cons of the Options Versioning either only the endpoints would still cause the issue, that a client needs to keep track of which implicit version an object has, to make sure he picks the right endpoint. This might also lead to the fact, that one might try to send the data to the wrong endpoint, since it is not known where it should belong. Only versioning the endpoints would require to add a lot of version identification cold on the api side, which should be avoided. Between the last to options, the only difference is, that the actions wrappers are not being versioned. This tradeoff has been made due to the fact, that they should never be stored somewhere and that they are considered stable for one api version. Adding actions or changing the wrappers itself will cause a upgrade of the api version. Links","title":"JSON Object Versioning Rules"},{"location":"viplab-3.0/versioning/#json-object-versioning-rules","text":"Status: proposed Deciders: Leon Kiefer, Per Pascal Seeland Date: 2020-05-14 Technical Story: https://github.com/VirtualProgrammingLab/documentation/issues/1","title":"JSON Object Versioning Rules"},{"location":"viplab-3.0/versioning/#context-and-problem-statement","text":"The ViPLab Projects defines a set of JSON-objects, which are used in the different components of the project. Since ViPLab itself does not store any data, these objects have to be stored by third party systems. These will be, depending on the context they are used in either LMS (like ILIAS) or data repositories (like dataverse). There needs to be a way to identify the version of the different objects stored by the third party system to allow e.g. upgrading/migrating the different components.","title":"Context and Problem Statement"},{"location":"viplab-3.0/versioning/#decision-drivers","text":"Provide a way to identify the version of the objects and also provide a path for e.g. upgrading the API endpoints used by those systems.","title":"Decision Drivers"},{"location":"viplab-3.0/versioning/#considered-options","text":"Version all endpoints, but not the objects Version all objects, but not the endpoints Version parts of the objects and all of the endpoints. Version all objects and all of the endpoints.","title":"Considered Options"},{"location":"viplab-3.0/versioning/#decision-outcome","text":"It has been decided to version all long living objects, and all endpoints. The reason for requiring all objects to have version tags is for consistency reasons. Endpoints will only accept objects versions of one major version. Breaking changes will require to define a new version. Incremental updates, which only extend the object are allowed. All systems are expected to handle these incremental updates gracefully. This means that a version 3.1.x message returned by the api must be accept by a 3.0.x client. The additional information contained by the api may be discarded. The same rules apply when a 3.1.x client talks to a 3.0.x api. The api will process the message according to the 3.0.x rules and extra information might be discarded. The client has to determine the correct endpoint versions to use. When the client will use a ComputationTemplate with version 3.x.x the corresponding websocket api will be ws://example.com/v3/computation. All other messages used in any further communication between the websocket-api and the client are also expected to be version 3.x.x. There is no possiblity to mix different versions. If a client wants to use a v4 api, he has to reconnect to the correct endpoint at ws://example.com/v4/computation The objects have been devided into three groups: - Long living object: ComputationTemplate, ComputationTask and ComputationResult - Wrappers: Computation - Message Types: CreateComputation and Result All long living objects are expected to be stored by clients and have version attribute on their top level of the json object, making it easy to get the information. Wrappers only exist during the communication between the client and the api and thus will not contain any version information, as it can be derived from the version of the api version they are being used with. Their only functionality is to group long living objects during a request. Messages Types are the messages used for the communication of the client with the websocket api. Like the wrappers they belong to a specific endpoint version and are also not versioned.","title":"Decision Outcome"},{"location":"viplab-3.0/versioning/#positive-consequences","text":"Providing version information allows api and the client to be updated independently. It also allows the objects being held by the client to be easily identified without the need to either store this information somewhere external, where is might get lost or require some method to identify it based on the attributes available.","title":"Positive Consequences"},{"location":"viplab-3.0/versioning/#negative-consequences","text":"The version needs to stored on all objects, which requires additional space and bandwidth. Also this information needs to be processed in the endpoints. But this in neglactable considered to the need of upgrading different systems of different third party users at once.","title":"Negative Consequences"},{"location":"viplab-3.0/versioning/#pros-and-cons-of-the-options","text":"Versioning either only the endpoints would still cause the issue, that a client needs to keep track of which implicit version an object has, to make sure he picks the right endpoint. This might also lead to the fact, that one might try to send the data to the wrong endpoint, since it is not known where it should belong. Only versioning the endpoints would require to add a lot of version identification cold on the api side, which should be avoided. Between the last to options, the only difference is, that the actions wrappers are not being versioned. This tradeoff has been made due to the fact, that they should never be stored somewhere and that they are considered stable for one api version. Adding actions or changing the wrappers itself will cause a upgrade of the api version.","title":"Pros and Cons of the Options"},{"location":"viplab-3.0/versioning/#links","text":"","title":"Links"}]}