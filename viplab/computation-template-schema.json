{
    "$schema": "http://json-schema.org/draft-07/schema",
    "$id": "computation-template-schema.json",
    "title": "Computation Template",
    "type": "object",
    "properties": {
        "Computation Template" : {
            "type": "object",
            "description": "Wrapper for a computation object",
            "properties": {
                "department": { 
                    "type" : "string",
                    "description": "For filtering exercises at frontend (e.g. for showing only a subset)."
                },
                "name": {
                    "type": "string",
                    "description": "Name of exercise to be shown in SCs."
                },
                "description": {
                    "type": "string",
                    "description": "Short description"
                },
                "elements": {
                    "type" : "array",
                    "minItems": 1,
                    "items" : {
                        "type" : "object",
                        "$ref" : "#definitions/element-entries"
                    }
                },
                "config": {
                    "type" : "object",
                    "properties" : {
                        "Octave" : { "$ref" : "#definitions/octave-matlab-config" },
                        "Matlab" : { "$ref" : "#definitions/octave-matlab-config" },
                        "C" : { "$ref" : "#definitions/c-config" },
                        "C++" : { "$ref" : "#definitions/c++-config" },
                        "Java" : { "$ref" : "#definitions/java-config" },
                        "DuMuX" : { "$ref" : "#definitions/dumux-config" },
                        "$comment": "***************** NEW ********************",
                        "Container" : { "$ref" : "#definitions/container-config" }
                    },
                    "$comment": "https://stackoverflow.com/questions/25742680/json-schema-validate-that-exactly-one-property-is-present",
                    "oneOf" : [
                        { "type": "object", "required": ["Octave"] },
                        { "type": "object", "required": ["Matlab"] },
                        { "type": "object", "required": ["C"] },
                        { "type": "object", "required": ["C++"] },
                        { "type": "object", "required": ["Java"] },
                        { "type": "object", "required": ["DuMuX"] },
                        { "type": "object", "required": ["Container"] }
                    ],
                    "dependencies" : {
                        "C" : { 
                            "compiling" : {
                                "required" : ["compiler", "flags"]
                            }
                        },
                        "C++" : { 
                            "compiling" : {
                                "required" : ["compiler", "flags"]
                            }
                        },
                        "Java" : {
                            "compiling" : {
                                "enum" : ["flags"]
                            }
                        }
                    }
                },
                "$comment" : "******************** NEW *********************** ",
                "version" : {"type": "string", "description": "version of the compute template json schema" }
            },
            "required" : ["elements"]
        }
    },
    "definitions": {
        "element-entries": {
            "properties" : {
                "identifier": {"$comment": "uniqueness has to be validated in the code", "type": "string", "description" : "For later referencing, has to be unique"},
                "value" : {"type": "string", "description" : "This is the member, which may be modified, if 'modifiable' (see above) is true."},
                "name" : {"type": "string", "description": "To show in Frontend. If missing identifier could be used."},
                "visible": {"type": "boolean", "description": "If element is shown in Frontend."},
                "modifiable": {"type": "boolean", "description": "If 'value' is editable/changable."},
                "MIMEtype" : {
                    "type" : "string",
                    "description": "Information for interpreting content. 'text/uri-list': weblinks to be followed and presented in Frontend.",
                    "enum" : ["text/plain", "text/html", "text/xml", "text/uri-list"]
                },
                "syntaxHighlighting" : {
                    "type" : "string",
                    "description": "'none': no syntax highlighting; 'C': syntax highlighting for C programming language; etc.",
                    "$comment": "Allow everything that Ace Editor can do?",
                    "enum" : ["none", "C", "C++", "Matlab", "XML", "Java"]
                },
                "$comment": "***************************** NEW ***********************",
                "gui_type": {
                    "type" : "string",
                    "description": "Name of the graphical element in which 'value' should be presented. Defaults to 'editor'", 
                    "enum" : ["checkbox", "radio", "dropdown", "listbox", "toggle", "slider", "textfield", "editor", "canvas"]
                }
            },
            "required" : ["identifier", "value"]
        },
        "octave-matlab-config" : {
            "type" : "object",
            "properties" : {
                "merging" : {
                    "type" : "object",
                    "description" : "Merging concatenates given elements for further processing. If non-empty elements do not end with a '\n', it will be added (to have a mapping from each line number of merge result to just ''one'' originating element).",
                    "properties" : {
                        "sources" : { "$ref" : "#definitions/sources" }
                    },                
                    "required" : ["sources"]
                },
                "checking" : {
                    "type" : "object",
                    "description" : "Checking for legal function calls in source code",
                    "properties" : {
                        "sources" : { "$ref" : "#definitions/sources" },
                        "allowedCalls" : { "$ref" : "#definitions/matlab-c-calls" }
                    },
                    "required" : ["sources", "allowedCalls"]    
                },
                "interpreting" : {
                    "type" : "object",
                    "properties" : {
                        "timelimitInSeconds" : {"type": "integer"}
                    }
                },
                "stopAfterPhase" : {
                    "type" : "string",
                    "enum" : ["merging", "checking", "interpreting"]
                }
            },
            "required" : ["merging"]
        },
        "c-config" : {
            "type": "object",
            "properties" : {
                "merging" : { "$ref": "#definitions/c-c++-java-merging" },
                "compiling" : { "$ref": "#definitions/c-c++-java-compiling" },
                "checking" : {
                    "type": "object",
                    "description" : "Checking for illegal function calls in source code. Performed after compiling, because compiler gives better syntax error messages. Can be omitted, if no checking should be done.",
                    "$comment" : "How can it be omitted?",
                    "properties" : {
                        "sources" : { "$ref" : "#definitions/sources" },
                        "$comment" : "is 'ignored' part of the enum?; 'element' not implemented?!", 
                        "behavior" : { "type": "string", "enum": ["mergeAndInclude", "element"] },
                        "forbiddenCalls" : { "$ref" : "#definitions/matlab-c-calls" }
                    },
                    "required" : ["sources", "forbiddenCalls"]
                },
                "linking" : { "$ref": "#definitions/c-c++-linking" },
                "running" : { "$ref": "#definitions/c-c++-running" },
                "stopAfterPhase" : {
                    "type" : "string",
                    "enum" : ["merging", "compiling", "checking", "linking", "running"]
                }
            }
        },
        "c++-config" : {
            "type" : "object",
            "properties" : {
                "merging" : { "$ref": "#definitions/c-c++-java-merging" },
                "compiling" : { "$ref": "#definitions/c-c++-java-compiling" },
                "linking" : { "$ref": "#definitions/c-c++-linking" },
                "running" : { "$ref": "#definitions/c-c++-running" },
                "stopAfterPhase" : {
                    "type" : "string",
                    "enum" : ["merging", "compiling", "linking", "running"]
                }
            }
        },
        "java-config" : {
            "type": "object",
            "properties" : {
                "merging" : { "$ref": "#definitions/c-c++-java-merging" },
                "compiling" : { "$ref": "#definitions/c-c++-java-compiling" },
                "checking" : {
                    "type": "object",
                    "description" : "Checking for illegal function calls in source code. Performed after compiling, because compiler gives better syntax error messages. Can be omitted, if no checking should be done.",
                    "$comment" : "How can it be omitted?",
                    "properties" : {
                        "sources" : { "$ref" : "#definitions/sources" },
                        "forbiddenCalls" : { "$ref" : "#definitions/java-calls" },
                        "allowedCalls" : { "$ref" : "#definitions/java-calls" }
                    },
                    "required" : ["sources"]
                },
                "running" : { 
                    "allOf" : [{"$ref": "#definitions/c-c++-running" }],
                    "properties": {
                        "flags" : { "type": "string", "description": "Flags given to JVM" },
                        "mainClass" : {"type": "string", "description": "Class containing 'plublic static void main'. Has to be given if method is not unique."}
                    }
                },
                "stopAfterPhase" : {
                    "type" : "string",
                    "enum" : ["merging", "compiling", "checking", "running"]
                }
            }
        },
        "dumux-config" : {
            "type": "object",
            "properties" : {
                "running" : { 
                    "type": "object",
                    "properties": {
                        "executable" : { "type": "string", "description": "Name of executable to run (as in backend file system)" },
                        "commandLineArguments" : {"type": "string", "description": "Additional command line args" },
                        "timelimitInSeconds" : {"type": "integer", "description": "CPU time limit"},
                        "observe_stderr" : {"type": "boolean", "description": "If true, transfer intermediate stderr Results" }
                    },
                    "required" : ["executable"]
                }
            },
            "required" : ["running"]
        },
        "$comment": "*************** NEW ********************************",
        "container-config" : {
            "type": "object",
            "properties" : {
                "merging" : {
                    "type": "object",
                    "properties" : {
                        "sources" : {"$ref": "#definitions/sources"},
                        "target" : {
                            "type": "string",
                            "description" : "URI of merged element; currently only files (file:///) are allowed",
                            "pattern": "^file:\/\/\/[\\w\/]+"
                        },
                        "template" : {
                            "type": "string",
                            "description": "element_id of a template written with 'Mustache' (http://mustache.github.io/). The sources are than merged into the template."
                        }
                    }
                },
                "running" : { 
                    "properties": {
                        "resources" : {
                            "type": "object",
                            "properties" : {
                                "volume" : { 
                                    "type": "string", 
                                    "description" : "path in docker image where data is placed",
                                    "$comment": "we need a workaround for kata containers?!"
                                },
                                "memory" : {
                                    "type": "string",
                                    "description" : "memory limit for the container",
                                    "pattern" : "^\\d+(b|k|m|g)$",
                                    "$comment": "has a counterpart in kubernetes; however docker has several other parameters: memory-swap, memory-swappiness, memory-reservation, kernel-memory, oom-kill-disable"
                                },
                                "numCPUs" : {
                                    "type": "integer",
                                    "description" : "number of CPUs for the container",
                                    "$comment": "has no counterpart in kubernetes; kubernetes maps to a soft limit (cpu-shares)"
                                },
                                "$comment": "docker run can further allocate GPUs"
                            },
                            "required": ["volume"]
                        },
                        "entrypoints" : { 
                            "type": "array", 
                            "description": "List of executables that can be run inside the container",
                            "minItems": 1,
                            "items" : {
                                "type" : "object",
                                "properties": {
                                    "name" : {"type": "string", "description": "path and name of executable"},
                                    "commandLineArguments" : {
                                        "type": "array",
                                        "description": "Arguments for the executable, splitted by WS; here, also target file name can be given (without 'file:///'",
                                        "items" : {"type": "string" }
                                    }
                                },
                                "required" : ["name"]
                            }
                        },
                        "observe_stderr" : {
                            "type": "boolean", 
                            "description": "If true, transfer intermediate stderr Results",
                            "$comment" : "Do we need something like this? Or other output attributes?"
                        }
                    },
                    "required" : ["entrypoints"]
                }
            },
            "required" : ["merging", "running"]
        },
        "c-c++-java-merging" : {
            "description": "Merging concatenates given elements for further processing. If non-empty elements do not end with a '\n', it will be added (to have a mapping from each line number of merge result to just ''one'' originating element).",
            "anyOf" : [
                { "$ref": "#definitions/source-mergeID" },
                { 
                    "type": "array", 
                    "items" : {"$ref": "#definitions/source-mergeID" },
                    "description" : "This alternative is for compiling multiple source files, generated by multiple merges."
                }
            ]
        },
        "c-c++-java-compiling" : {
            "type": "object",
            "properties": {
                "$comment" : "sources have to contain merge_ids here",
                "sources" : { "$ref" : "#definitions/sources" },
                "compiler" : { "type": "string" },
                "flags" : { "type": "string"}
            }
        },
        "c-c++-linking" : {
            "type" : "object",
            "properties" : {
                "flags" : { "type" : "string" }
            },
            "required" : ["flags"]
        },
        "c-c++-running" : {
            "type" : "object",
            "properties" : {
                "commandLineArguments" : { 
                    "description" : "arguments given to main() function",
                    "$comment" : "to implement the outlook, also a merge_id of a template can be given -> security issues?",
                    "type" : "string"
                },
                "timelimitInSeconds" : {"type": "integer"}
            }
        },
        "sources" : {
            "type" : "array",
            "description" : "Array of one or more identifiers (element_ids/merge_ids) of to be merged sources",
            "items" : { "type" : "string" },
            "uniqueItems": true,
            "$comment": "in json-schema it cannot be validated that items are element_ids/merge_ids..."
        },
        "source-mergeID" : {
            "type": "object",
            "properties" : {
                "sources" : { "$ref" : "#definitions/sources" },
                "mergeID" : { "type": "string" },
                "$comment" : "in json-schema it cannot be validated that mergeID is unique together with all element_ids..."
            },                
            "required" : ["sources"]
        },
        "matlab-c-calls" : {
            "type" : "string",
            "description" : "allowed/forbidden call names separated by WS; only idents (no braces, no func args)",
            "pattern" : "^([a-z]+([a-z0-9])* )*[a-z]+([a-z0-9])*$"
        },
        "java-calls" : {
            "type" : "string",
            "description" : "allowed/forbidden call names separated by WS",
            "pattern" : "^([a-z]+[a-zA-Z0-9.*$]* )*[a-z]+[a-zA-Z0-9.*$]*$"
        }
    }
}
